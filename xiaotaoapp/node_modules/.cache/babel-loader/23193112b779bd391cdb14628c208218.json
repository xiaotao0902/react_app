{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = upload;\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nvar _index = require('../util/index.js');\n\nvar _mime = require('./mime.js');\n\nvar _mime2 = _interopRequireDefault(_mime);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction getError(option, xhr) {\n  var msg = 'cannot post ' + option.action + ' ' + xhr.status + '\\'';\n  var err = new Error(msg);\n  err.status = xhr.status;\n  err.method = 'post';\n  err.url = option.action;\n  return err;\n}\n\nfunction getBody(xhr) {\n  var text = xhr.responseText || xhr.response;\n\n  if (!text) {\n    return text;\n  }\n\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return text;\n  }\n}\n\nfunction send(xhr, data) {\n  if (typeof data === 'string') {\n    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/sendAsBinary\n    if (xhr.sendAsBinary) {\n      // Gecko\n      xhr.sendAsBinary(data);\n    } else {\n      // WebKit with typed arrays support\n      var ui8a = new Uint8Array(data.length);\n\n      for (var i = 0, l = data.length; i < l; i++) {\n        ui8a[i] = data.charCodeAt(i) & 0xff;\n      }\n\n      xhr.send(ui8a.buffer);\n    }\n  } else {\n    xhr.send(data);\n  }\n}\n\nfunction upload(option) {\n  if (typeof XMLHttpRequest === 'undefined') {\n    return;\n  }\n\n  var xhr = new XMLHttpRequest();\n\n  if (xhr.upload) {\n    xhr.upload.onprogress = function progress(e) {\n      if (e.total > 0) {\n        e.percent = e.loaded / e.total * 100;\n      }\n\n      option.onProgress(e);\n    };\n  }\n\n  var formData = void 0;\n  var fileName = option.file && option.file.name || '';\n  var multipartArgs = (0, _objectAssign2['default'])({\n    name: fileName\n  }, option.data);\n\n  if (typeof option.bin === 'string') {\n    var bin = option.bin;\n    var boundary = '----ksuploadboundary' + (0, _index.uid)();\n    var dashdash = '--';\n    var crlf = '\\r\\n';\n    var multipartBlob = '';\n    option.headers = option.headers || {}; // if no FormData we can still try to send it directly as last resort (see below)\n    // Trying to send the whole thing as binary...\n    // Added multipart request\n\n    option.headers['Content-Type'] = 'multipart/form-data; boundary=' + boundary; // append multipart parameters\n\n    Object.keys(multipartArgs).forEach(function (name) {\n      /* eslint prefer-template: 0 */\n      multipartBlob += dashdash + boundary + crlf + 'Content-Disposition: form-data; name=\"' + name + '\"' + crlf + crlf;\n      multipartBlob += unescape(encodeURIComponent(multipartArgs[name])) + crlf;\n    });\n    var mimeType = _mime2['default'][option.file.name.replace(/^.+\\.([^.]+)/, '$1').toLowerCase()] || 'application/octet-stream'; // Build RFC2388 blob\n\n    multipartBlob += dashdash + boundary + crlf + 'Content-Disposition: form-data; name=\"' + option.filename + '\"; filename=\"' + unescape(encodeURIComponent(option.file.name)) + '\"' + crlf + 'Content-Type: ' + mimeType + crlf + crlf + bin + crlf + dashdash + boundary + dashdash + crlf; // multipartDeltaSize = multipartBlob.length - bin.length;\n\n    formData = multipartBlob;\n  } else {\n    formData = new FormData();\n    /* eslint-disable */\n\n    Object.keys(multipartArgs).map(function (key) {\n      formData.append(key, multipartArgs[key]);\n    });\n    /* eslint-enable */\n\n    formData.append(option.filename, option.bin);\n  }\n\n  xhr.onerror = function error(e) {\n    option.onError(e);\n  };\n\n  xhr.onload = function onload() {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(option, xhr), getBody(xhr));\n    }\n\n    option.onSuccess(getBody(xhr));\n  };\n\n  xhr.onabort = function (e) {\n    option.onAbort(e);\n  };\n\n  xhr.open('post', option.action, true); // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179\n\n  if (option.withCredentials && 'withCredentials' in xhr) {\n    xhr.withCredentials = true;\n  }\n\n  var headers = option.headers || {};\n\n  for (var h in headers) {\n    if (headers.hasOwnProperty(h)) {\n      xhr.setRequestHeader(h, headers[h]);\n    }\n  }\n\n  send(xhr, formData);\n  delete option.bin;\n  delete option.file;\n  return {\n    abort: function abort() {\n      xhr.abort();\n    }\n  };\n}\n\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}