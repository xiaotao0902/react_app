{"ast":null,"code":"/*!\n * Cropper.js v0.7.2\n * https://github.com/fengyuanchen/cropperjs\n *\n * Copyright (c) 2015-2016 Fengyuan Chen\n * Released under the MIT license\n *\n * Date: 2016-06-08T12:25:05.932Z\n */\n(function (global, factory) {\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = global.document ? factory(global, true) : function (window) {\n      if (!window.document) {\n        throw new Error('Cropper requires a window with a document');\n      }\n\n      return factory(window);\n    };\n  } else {\n    factory(global);\n  }\n})(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\n  'use strict'; // Globals\n\n  var document = window.document;\n  var location = window.location;\n  var navigator = window.navigator;\n  var ArrayBuffer = window.ArrayBuffer;\n  var Object = window.Object;\n  var Array = window.Array;\n  var String = window.String;\n  var Number = window.Number;\n  var Math = window.Math; // Constants\n\n  var NAMESPACE = 'cropper'; // Classes\n\n  var CLASS_MODAL = NAMESPACE + '-modal';\n  var CLASS_HIDE = NAMESPACE + '-hide';\n  var CLASS_HIDDEN = NAMESPACE + '-hidden';\n  var CLASS_INVISIBLE = NAMESPACE + '-invisible';\n  var CLASS_MOVE = NAMESPACE + '-move';\n  var CLASS_CROP = NAMESPACE + '-crop';\n  var CLASS_DISABLED = NAMESPACE + '-disabled';\n  var CLASS_BG = NAMESPACE + '-bg'; // Events\n\n  var EVENT_MOUSE_DOWN = 'mousedown touchstart pointerdown MSPointerDown';\n  var EVENT_MOUSE_MOVE = 'mousemove touchmove pointermove MSPointerMove';\n  var EVENT_MOUSE_UP = 'mouseup touchend touchcancel pointerup pointercancel MSPointerUp MSPointerCancel';\n  var EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_RESIZE = 'resize';\n  var EVENT_ERROR = 'error';\n  var EVENT_LOAD = 'load';\n  var EVENT_BUILD = 'build';\n  var EVENT_BUILT = 'built';\n  var EVENT_CROP_START = 'cropstart';\n  var EVENT_CROP_MOVE = 'cropmove';\n  var EVENT_CROP_END = 'cropend';\n  var EVENT_CROP = 'crop';\n  var EVENT_ZOOM = 'zoom'; // RegExps\n\n  var REGEXP_ACTIONS = /e|w|s|n|se|sw|ne|nw|all|crop|move|zoom/;\n  var REGEXP_SUFFIX = /width|height|left|top|marginLeft|marginTop/;\n  var REGEXP_ORIGINS = /^(https?:)\\/\\/([^\\:\\/\\?#]+):?(\\d*)/i;\n  var REGEXP_TRIM = /^\\s+(.*)\\s+$/;\n  var REGEXP_SPACES = /\\s+/;\n  var REGEXP_DATA_URL = /^data\\:/;\n  var REGEXP_DATA_URL_HEAD = /^data\\:([^\\;]+)\\;base64,/;\n  var REGEXP_DATA_URL_JPEG = /^data\\:image\\/jpeg.*;base64,/;\n  var REGEXP_HYPHENATE = /([a-z\\d])([A-Z])/g; // Data\n\n  var DATA_PREVIEW = 'preview';\n  var DATA_ACTION = 'action'; // Actions\n\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_NONE = 'none'; // Supports\n\n  var SUPPORT_CANVAS = !!document.createElement('canvas').getContext;\n  var IS_SAFARI_OR_UIWEBVIEW = navigator && /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i.test(navigator.userAgent); // Maths\n\n  var min = Math.min;\n  var max = Math.max;\n  var abs = Math.abs;\n  var sin = Math.sin;\n  var cos = Math.cos;\n  var sqrt = Math.sqrt;\n  var round = Math.round;\n  var floor = Math.floor;\n  var PI = Math.PI; // Utilities\n\n  var objectProto = Object.prototype;\n  var toString = objectProto.toString;\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  var slice = Array.prototype.slice;\n  var fromCharCode = String.fromCharCode;\n\n  function typeOf(obj) {\n    return toString.call(obj).slice(8, -1).toLowerCase();\n  }\n\n  function isNumber(num) {\n    return typeof num === 'number' && !isNaN(num);\n  }\n\n  function isUndefined(obj) {\n    return typeof obj === 'undefined';\n  }\n\n  function isObject(obj) {\n    return typeof obj === 'object' && obj !== null;\n  }\n\n  function isPlainObject(obj) {\n    var constructor;\n    var prototype;\n\n    if (!isObject(obj)) {\n      return false;\n    }\n\n    try {\n      constructor = obj.constructor;\n      prototype = constructor.prototype;\n      return constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function isFunction(fn) {\n    return typeOf(fn) === 'function';\n  }\n\n  function isArray(arr) {\n    return Array.isArray ? Array.isArray(arr) : typeOf(arr) === 'array';\n  }\n\n  function toArray(obj, offset) {\n    offset = offset >= 0 ? offset : 0;\n\n    if (Array.from) {\n      return Array.from(obj).slice(offset);\n    }\n\n    return slice.call(obj, offset);\n  }\n\n  function trim(str) {\n    if (typeof str === 'string') {\n      str = str.trim ? str.trim() : str.replace(REGEXP_TRIM, '$1');\n    }\n\n    return str;\n  }\n\n  function each(obj, callback) {\n    var length;\n    var i;\n\n    if (obj && isFunction(callback)) {\n      if (isArray(obj) || isNumber(obj.length)\n      /* array-like */\n      ) {\n          for (i = 0, length = obj.length; i < length; i++) {\n            if (callback.call(obj, obj[i], i, obj) === false) {\n              break;\n            }\n          }\n        } else if (isObject(obj)) {\n        for (i in obj) {\n          if (obj.hasOwnProperty(i)) {\n            if (callback.call(obj, obj[i], i, obj) === false) {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  function extend(obj) {\n    var args;\n\n    if (arguments.length > 1) {\n      args = toArray(arguments);\n\n      if (Object.assign) {\n        return Object.assign.apply(Object, args);\n      }\n\n      args.shift();\n      each(args, function (arg) {\n        each(arg, function (prop, i) {\n          obj[i] = prop;\n        });\n      });\n    }\n\n    return obj;\n  }\n\n  function proxy(fn, context) {\n    var args = toArray(arguments, 2);\n    return function () {\n      return fn.apply(context, args.concat(toArray(arguments)));\n    };\n  }\n\n  function setStyle(element, styles) {\n    var style = element.style;\n    each(styles, function (value, property) {\n      if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n        value += 'px';\n      }\n\n      style[property] = value;\n    });\n  }\n\n  function hasClass(element, value) {\n    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n  }\n\n  function addClass(element, value) {\n    var className;\n\n    if (isNumber(element.length)) {\n      return each(element, function (elem) {\n        addClass(elem, value);\n      });\n    }\n\n    if (element.classList) {\n      return element.classList.add(value);\n    }\n\n    className = trim(element.className);\n\n    if (!className) {\n      element.className = value;\n    } else if (className.indexOf(value) < 0) {\n      element.className = className + ' ' + value;\n    }\n  }\n\n  function removeClass(element, value) {\n    if (isNumber(element.length)) {\n      return each(element, function (elem) {\n        removeClass(elem, value);\n      });\n    }\n\n    if (element.classList) {\n      return element.classList.remove(value);\n    }\n\n    if (element.className.indexOf(value) >= 0) {\n      element.className = element.className.replace(value, '');\n    }\n  }\n\n  function toggleClass(element, value, added) {\n    if (isNumber(element.length)) {\n      return each(element, function (elem) {\n        toggleClass(elem, value, added);\n      });\n    } // IE10-11 doesn't support the second parameter of `classList.toggle`\n\n\n    if (added) {\n      addClass(element, value);\n    } else {\n      removeClass(element, value);\n    }\n  }\n\n  function hyphenate(str) {\n    return str.replace(REGEXP_HYPHENATE, '$1-$2').toLowerCase();\n  }\n\n  function getData(element, name) {\n    if (isObject(element[name])) {\n      return element[name];\n    } else if (element.dataset) {\n      return element.dataset[name];\n    }\n\n    return element.getAttribute('data-' + hyphenate(name));\n  }\n\n  function setData(element, name, data) {\n    if (isObject(data)) {\n      element[name] = data;\n    } else if (element.dataset) {\n      element.dataset[name] = data;\n    } else {\n      element.setAttribute('data-' + hyphenate(name), data);\n    }\n  }\n\n  function removeData(element, name) {\n    if (isObject(element[name])) {\n      delete element[name];\n    } else if (element.dataset) {\n      delete element.dataset[name];\n    } else {\n      element.removeAttribute('data-' + hyphenate(name));\n    }\n  }\n\n  function removeListener(element, type, handler) {\n    var types = trim(type).split(REGEXP_SPACES);\n\n    if (types.length > 1) {\n      return each(types, function (type) {\n        removeListener(element, type, handler);\n      });\n    }\n\n    if (element.removeEventListener) {\n      element.removeEventListener(type, handler, false);\n    } else if (element.detachEvent) {\n      element.detachEvent('on' + type, handler);\n    }\n  }\n\n  function addListener(element, type, _handler, once) {\n    var types = trim(type).split(REGEXP_SPACES);\n    var originalHandler = _handler;\n\n    if (types.length > 1) {\n      return each(types, function (type) {\n        addListener(element, type, _handler);\n      });\n    }\n\n    if (once) {\n      _handler = function handler() {\n        removeListener(element, type, _handler);\n        return originalHandler.apply(element, arguments);\n      };\n    }\n\n    if (element.addEventListener) {\n      element.addEventListener(type, _handler, false);\n    } else if (element.attachEvent) {\n      element.attachEvent('on' + type, _handler);\n    }\n  }\n\n  function dispatchEvent(element, type, data) {\n    var event;\n\n    if (element.dispatchEvent) {\n      // Event and CustomEvent on IE9-11 are global objects, not constructors\n      if (isFunction(Event) && isFunction(CustomEvent)) {\n        if (isUndefined(data)) {\n          event = new Event(type, {\n            bubbles: true,\n            cancelable: true\n          });\n        } else {\n          event = new CustomEvent(type, {\n            detail: data,\n            bubbles: true,\n            cancelable: true\n          });\n        }\n      } else {\n        // IE9-11\n        if (isUndefined(data)) {\n          event = document.createEvent('Event');\n          event.initEvent(type, true, true);\n        } else {\n          event = document.createEvent('CustomEvent');\n          event.initCustomEvent(type, true, true, data);\n        }\n      } // IE9+\n\n\n      return element.dispatchEvent(event);\n    } else if (element.fireEvent) {\n      // IE6-10 (native events only)\n      return element.fireEvent('on' + type);\n    }\n  }\n\n  function preventDefault(e) {\n    if (e.preventDefault) {\n      e.preventDefault();\n    } else {\n      e.returnValue = false;\n    }\n  }\n\n  function getEvent(event) {\n    var e = event || window.event;\n    var doc; // Fix target property (IE8)\n\n    if (!e.target) {\n      e.target = e.srcElement || document;\n    }\n\n    if (!isNumber(e.pageX)) {\n      doc = document.documentElement;\n      e.pageX = e.clientX + (window.scrollX || doc && doc.scrollLeft || 0) - (doc && doc.clientLeft || 0);\n      e.pageY = e.clientY + (window.scrollY || doc && doc.scrollTop || 0) - (doc && doc.clientTop || 0);\n    }\n\n    return e;\n  }\n\n  function getOffset(element) {\n    var doc = document.documentElement;\n    var box = element.getBoundingClientRect();\n    return {\n      left: box.left + (window.scrollX || doc && doc.scrollLeft || 0) - (doc && doc.clientLeft || 0),\n      top: box.top + (window.scrollY || doc && doc.scrollTop || 0) - (doc && doc.clientTop || 0)\n    };\n  }\n\n  function getTouchesCenter(touches) {\n    var length = touches.length;\n    var pageX = 0;\n    var pageY = 0;\n\n    if (length) {\n      each(touches, function (touch) {\n        pageX += touch.pageX;\n        pageY += touch.pageY;\n      });\n      pageX /= length;\n      pageY /= length;\n    }\n\n    return {\n      pageX: pageX,\n      pageY: pageY\n    };\n  }\n\n  function getByTag(element, tagName) {\n    return element.getElementsByTagName(tagName);\n  }\n\n  function getByClass(element, className) {\n    return element.getElementsByClassName ? element.getElementsByClassName(className) : element.querySelectorAll('.' + className);\n  }\n\n  function createElement(tagName) {\n    return document.createElement(tagName);\n  }\n\n  function appendChild(element, elem) {\n    element.appendChild(elem);\n  }\n\n  function removeChild(element) {\n    if (element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  function empty(element) {\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    }\n  }\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(REGEXP_ORIGINS);\n    return parts && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n  }\n\n  function addTimestamp(url) {\n    var timestamp = 'timestamp=' + new Date().getTime();\n    return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n  }\n\n  function getImageSize(image, callback) {\n    var newImage; // Modern browsers (ignore Safari)\n\n    if (image.naturalWidth && !IS_SAFARI_OR_UIWEBVIEW) {\n      return callback(image.naturalWidth, image.naturalHeight);\n    } // IE8: Don't use `new Image()` here\n\n\n    newImage = createElement('img');\n\n    newImage.onload = function () {\n      callback(this.width, this.height);\n    };\n\n    newImage.src = image.src;\n  }\n\n  function getTransform(data) {\n    var transforms = [];\n    var rotate = data.rotate;\n    var scaleX = data.scaleX;\n    var scaleY = data.scaleY; // Scale should come first before rotate\n\n    if (isNumber(scaleX) && isNumber(scaleY)) {\n      transforms.push('scale(' + scaleX + ',' + scaleY + ')');\n    }\n\n    if (isNumber(rotate)) {\n      transforms.push('rotate(' + rotate + 'deg)');\n    }\n\n    return transforms.length ? transforms.join(' ') : 'none';\n  }\n\n  function getRotatedSizes(data, reversed) {\n    var deg = abs(data.degree) % 180;\n    var arc = (deg > 90 ? 180 - deg : deg) * PI / 180;\n    var sinArc = sin(arc);\n    var cosArc = cos(arc);\n    var width = data.width;\n    var height = data.height;\n    var aspectRatio = data.aspectRatio;\n    var newWidth;\n    var newHeight;\n\n    if (!reversed) {\n      newWidth = width * cosArc + height * sinArc;\n      newHeight = width * sinArc + height * cosArc;\n    } else {\n      newWidth = width / (cosArc + sinArc / aspectRatio);\n      newHeight = newWidth / aspectRatio;\n    }\n\n    return {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n\n  function getSourceCanvas(image, data) {\n    var canvas = createElement('canvas');\n    var context = canvas.getContext('2d');\n    var dstX = 0;\n    var dstY = 0;\n    var dstWidth = data.naturalWidth;\n    var dstHeight = data.naturalHeight;\n    var rotate = data.rotate;\n    var scaleX = data.scaleX;\n    var scaleY = data.scaleY;\n    var scalable = isNumber(scaleX) && isNumber(scaleY) && (scaleX !== 1 || scaleY !== 1);\n    var rotatable = isNumber(rotate) && rotate !== 0;\n    var advanced = rotatable || scalable;\n    var canvasWidth = dstWidth * abs(scaleX || 1);\n    var canvasHeight = dstHeight * abs(scaleY || 1);\n    var translateX;\n    var translateY;\n    var rotated;\n\n    if (scalable) {\n      translateX = canvasWidth / 2;\n      translateY = canvasHeight / 2;\n    }\n\n    if (rotatable) {\n      rotated = getRotatedSizes({\n        width: canvasWidth,\n        height: canvasHeight,\n        degree: rotate\n      });\n      canvasWidth = rotated.width;\n      canvasHeight = rotated.height;\n      translateX = canvasWidth / 2;\n      translateY = canvasHeight / 2;\n    }\n\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    if (advanced) {\n      dstX = -dstWidth / 2;\n      dstY = -dstHeight / 2;\n      context.save();\n      context.translate(translateX, translateY);\n    } // Scale should come first before rotate as in the \"getTransform\" function\n\n\n    if (scalable) {\n      context.scale(scaleX, scaleY);\n    }\n\n    if (rotatable) {\n      context.rotate(rotate * PI / 180);\n    }\n\n    context.drawImage(image, floor(dstX), floor(dstY), floor(dstWidth), floor(dstHeight));\n\n    if (advanced) {\n      context.restore();\n    }\n\n    return canvas;\n  }\n\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    var i = start;\n\n    for (length += start; i < length; i++) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n\n    return str;\n  }\n\n  function getOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var length = dataView.byteLength;\n    var orientation;\n    var exifIDCode;\n    var tiffOffset;\n    var firstIFDOffset;\n    var littleEndian;\n    var endianness;\n    var app1Start;\n    var ifdStart;\n    var offset;\n    var i; // Only handle JPEG image (start by 0xFFD8)\n\n    if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n      offset = 2;\n\n      while (offset < length) {\n        if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n          app1Start = offset;\n          break;\n        }\n\n        offset++;\n      }\n    }\n\n    if (app1Start) {\n      exifIDCode = app1Start + 4;\n      tiffOffset = app1Start + 10;\n\n      if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n        endianness = dataView.getUint16(tiffOffset);\n        littleEndian = endianness === 0x4949;\n\n        if (littleEndian || endianness === 0x4D4D\n        /* bigEndian */\n        ) {\n            if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n              firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n              if (firstIFDOffset >= 0x00000008) {\n                ifdStart = tiffOffset + firstIFDOffset;\n              }\n            }\n          }\n      }\n    }\n\n    if (ifdStart) {\n      length = dataView.getUint16(ifdStart, littleEndian);\n\n      for (i = 0; i < length; i++) {\n        offset = ifdStart + i * 12 + 2;\n\n        if (dataView.getUint16(offset, littleEndian) === 0x0112\n        /* Orientation */\n        ) {\n            // 8 is the offset of the current tag's value\n            offset += 8; // Get the original orientation value\n\n            orientation = dataView.getUint16(offset, littleEndian); // Override the orientation with its default value for Safari\n\n            if (IS_SAFARI_OR_UIWEBVIEW) {\n              dataView.setUint16(offset, 1, littleEndian);\n            }\n\n            break;\n          }\n      }\n    }\n\n    return orientation;\n  }\n\n  function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n    var binary = atob(base64);\n    var length = binary.length;\n    var arrayBuffer = new ArrayBuffer(length);\n    var dataView = new Uint8Array(arrayBuffer);\n    var i;\n\n    for (i = 0; i < length; i++) {\n      dataView[i] = binary.charCodeAt(i);\n    }\n\n    return arrayBuffer;\n  } // Only available for JPEG image\n\n\n  function arrayBufferToDataURL(arrayBuffer) {\n    var dataView = new Uint8Array(arrayBuffer);\n    var length = dataView.length;\n    var base64 = '';\n    var i;\n\n    for (i = 0; i < length; i++) {\n      base64 += fromCharCode(dataView[i]);\n    }\n\n    return 'data:image/jpeg;base64,' + btoa(base64);\n  }\n\n  function Cropper(element, options) {\n    var _this = this;\n\n    _this.element = element;\n    _this.options = extend({}, Cropper.DEFAULTS, isPlainObject(options) && options);\n    _this.ready = false;\n    _this.built = false;\n    _this.complete = false;\n    _this.rotated = false;\n    _this.cropped = false;\n    _this.disabled = false;\n    _this.replaced = false;\n    _this.limited = false;\n    _this.wheeling = false;\n    _this.isImg = false;\n    _this.originalUrl = '';\n    _this.canvasData = null;\n    _this.cropBoxData = null;\n    _this.previews = null;\n\n    _this.init();\n  }\n\n  Cropper.prototype = {\n    constructor: Cropper,\n    init: function init() {\n      var _this = this;\n\n      var element = _this.element;\n      var tagName = element.tagName.toLowerCase();\n      var url;\n\n      if (getData(element, NAMESPACE)) {\n        return;\n      }\n\n      setData(element, NAMESPACE, _this);\n\n      if (tagName === 'img') {\n        _this.isImg = true; // e.g.: \"img/picture.jpg\"\n\n        _this.originalUrl = url = element.getAttribute('src'); // Stop when it's a blank image\n\n        if (!url) {\n          return;\n        } // e.g.: \"http://example.com/img/picture.jpg\"\n\n\n        url = element.src;\n      } else if (tagName === 'canvas' && SUPPORT_CANVAS) {\n        url = element.toDataURL();\n      }\n\n      _this.load(url);\n    },\n    load: function load(url) {\n      var _this = this;\n\n      var options = _this.options;\n      var element = _this.element;\n      var xhr;\n\n      if (!url) {\n        return;\n      }\n\n      if (isFunction(options.build)) {\n        addListener(element, EVENT_BUILD, options.build, true);\n      }\n\n      if (dispatchEvent(element, EVENT_BUILD) === false) {\n        return;\n      }\n\n      _this.url = url;\n      _this.imageData = {};\n\n      if (!options.checkOrientation || !ArrayBuffer) {\n        return _this.clone();\n      } // XMLHttpRequest disallows to open a Data URL in some browsers like IE11 and Safari\n\n\n      if (REGEXP_DATA_URL.test(url)) {\n        return REGEXP_DATA_URL_JPEG.test(url) ? _this.read(dataURLToArrayBuffer(url)) : _this.clone();\n      }\n\n      xhr = new XMLHttpRequest();\n\n      xhr.onerror = xhr.onabort = function () {\n        _this.clone();\n      };\n\n      xhr.onload = function () {\n        _this.read(this.response);\n      };\n\n      if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\n        url = addTimestamp(url);\n      }\n\n      xhr.open('get', url);\n      xhr.responseType = 'arraybuffer';\n      xhr.send();\n    },\n    read: function read(arrayBuffer) {\n      var _this = this;\n\n      var options = _this.options;\n      var orientation = getOrientation(arrayBuffer);\n      var imageData = _this.imageData;\n      var rotate;\n      var scaleX;\n      var scaleY;\n\n      if (orientation > 1) {\n        _this.url = arrayBufferToDataURL(arrayBuffer);\n\n        switch (orientation) {\n          // flip horizontal\n          case 2:\n            scaleX = -1;\n            break;\n          // rotate left 180°\n\n          case 3:\n            rotate = -180;\n            break;\n          // flip vertical\n\n          case 4:\n            scaleY = -1;\n            break;\n          // flip vertical + rotate right 90°\n\n          case 5:\n            rotate = 90;\n            scaleY = -1;\n            break;\n          // rotate right 90°\n\n          case 6:\n            rotate = 90;\n            break;\n          // flip horizontal + rotate right 90°\n\n          case 7:\n            rotate = 90;\n            scaleX = -1;\n            break;\n          // rotate left 90°\n\n          case 8:\n            rotate = -90;\n            break;\n        }\n      }\n\n      if (options.rotatable) {\n        imageData.rotate = rotate;\n      }\n\n      if (options.scalable) {\n        imageData.scaleX = scaleX;\n        imageData.scaleY = scaleY;\n      }\n\n      _this.clone();\n    },\n    clone: function clone() {\n      var _this = this;\n\n      var element = _this.element;\n      var url = _this.url;\n      var crossOrigin;\n      var crossOriginUrl;\n      var image;\n      var start;\n      var stop;\n\n      if (_this.options.checkCrossOrigin && isCrossOriginURL(url)) {\n        crossOrigin = element.crossOrigin;\n\n        if (crossOrigin) {\n          crossOriginUrl = url;\n        } else {\n          crossOrigin = 'anonymous'; // Bust cache when there is not a \"crossOrigin\" property\n\n          crossOriginUrl = addTimestamp(url);\n        }\n      }\n\n      _this.crossOrigin = crossOrigin;\n      _this.crossOriginUrl = crossOriginUrl;\n      image = createElement('img');\n\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n\n      image.src = crossOriginUrl || url;\n      _this.image = image;\n      _this._start = start = proxy(_this.start, _this);\n      _this._stop = stop = proxy(_this.stop, _this);\n\n      if (_this.isImg) {\n        if (element.complete) {\n          _this.start();\n        } else {\n          addListener(element, EVENT_LOAD, start);\n        }\n      } else {\n        addListener(image, EVENT_LOAD, start);\n        addListener(image, EVENT_ERROR, stop);\n        addClass(image, CLASS_HIDE);\n        element.parentNode.insertBefore(image, element.nextSibling);\n      }\n    },\n    start: function start(event) {\n      var _this = this;\n\n      var image = _this.isImg ? _this.element : _this.image;\n\n      if (event) {\n        removeListener(image, EVENT_LOAD, _this._start);\n        removeListener(image, EVENT_ERROR, _this._stop);\n      }\n\n      getImageSize(image, function (naturalWidth, naturalHeight) {\n        extend(_this.imageData, {\n          naturalWidth: naturalWidth,\n          naturalHeight: naturalHeight,\n          aspectRatio: naturalWidth / naturalHeight\n        });\n        _this.ready = true;\n\n        _this.build();\n      });\n    },\n    stop: function stop() {\n      var _this = this;\n\n      var image = _this.image;\n      removeListener(image, EVENT_LOAD, _this._start);\n      removeListener(image, EVENT_ERROR, _this._stop);\n      removeChild(image);\n      _this.image = null;\n    },\n    build: function build() {\n      var _this = this;\n\n      var options = _this.options;\n      var element = _this.element;\n      var image = _this.image;\n      var container;\n      var template;\n      var cropper;\n      var canvas;\n      var dragBox;\n      var cropBox;\n      var face;\n\n      if (!_this.ready) {\n        return;\n      } // Unbuild first when replace\n\n\n      if (_this.built) {\n        _this.unbuild();\n      }\n\n      template = createElement('div');\n      template.innerHTML = Cropper.TEMPLATE; // Create cropper elements\n\n      _this.container = container = element.parentNode;\n      _this.cropper = cropper = getByClass(template, 'cropper-container')[0];\n      _this.canvas = canvas = getByClass(cropper, 'cropper-canvas')[0];\n      _this.dragBox = dragBox = getByClass(cropper, 'cropper-drag-box')[0];\n      _this.cropBox = cropBox = getByClass(cropper, 'cropper-crop-box')[0];\n      _this.viewBox = getByClass(cropper, 'cropper-view-box')[0];\n      _this.face = face = getByClass(cropBox, 'cropper-face')[0];\n      appendChild(canvas, image); // Hide the original image\n\n      addClass(element, CLASS_HIDDEN); // Inserts the cropper after to the current image\n\n      container.insertBefore(cropper, element.nextSibling); // Show the image if is hidden\n\n      if (!_this.isImg) {\n        removeClass(image, CLASS_HIDE);\n      }\n\n      _this.initPreview();\n\n      _this.bind();\n\n      options.aspectRatio = max(0, options.aspectRatio) || NaN;\n      options.viewMode = max(0, min(3, round(options.viewMode))) || 0;\n\n      if (options.autoCrop) {\n        _this.cropped = true;\n\n        if (options.modal) {\n          addClass(dragBox, CLASS_MODAL);\n        }\n      } else {\n        addClass(cropBox, CLASS_HIDDEN);\n      }\n\n      if (!options.guides) {\n        addClass(getByClass(cropBox, 'cropper-dashed'), CLASS_HIDDEN);\n      }\n\n      if (!options.center) {\n        addClass(getByClass(cropBox, 'cropper-center'), CLASS_HIDDEN);\n      }\n\n      if (options.background) {\n        addClass(cropper, CLASS_BG);\n      }\n\n      if (!options.highlight) {\n        addClass(face, CLASS_INVISIBLE);\n      }\n\n      if (options.cropBoxMovable) {\n        addClass(face, CLASS_MOVE);\n        setData(face, DATA_ACTION, ACTION_ALL);\n      }\n\n      if (!options.cropBoxResizable) {\n        addClass(getByClass(cropBox, 'cropper-line'), CLASS_HIDDEN);\n        addClass(getByClass(cropBox, 'cropper-point'), CLASS_HIDDEN);\n      }\n\n      _this.setDragMode(options.dragMode);\n\n      _this.render();\n\n      _this.built = true;\n\n      _this.setData(options.data); // Call the built asynchronously to keep \"image.cropper\" is defined\n\n\n      setTimeout(function () {\n        if (isFunction(options.built)) {\n          addListener(element, EVENT_BUILT, options.built, true);\n        }\n\n        dispatchEvent(element, EVENT_BUILT);\n        dispatchEvent(element, EVENT_CROP, _this.getData());\n        _this.complete = true;\n      }, 0);\n    },\n    unbuild: function unbuild() {\n      var _this = this;\n\n      if (!_this.built) {\n        return;\n      }\n\n      _this.built = false;\n      _this.complete = false;\n      _this.initialImageData = null; // Clear `initialCanvasData` is necessary when replace\n\n      _this.initialCanvasData = null;\n      _this.initialCropBoxData = null;\n      _this.containerData = null;\n      _this.canvasData = null; // Clear `cropBoxData` is necessary when replace\n\n      _this.cropBoxData = null;\n\n      _this.unbind();\n\n      _this.resetPreview();\n\n      _this.previews = null;\n      _this.viewBox = null;\n      _this.cropBox = null;\n      _this.dragBox = null;\n      _this.canvas = null;\n      _this.container = null;\n      removeChild(_this.cropper);\n      _this.cropper = null;\n    },\n    render: function render() {\n      var _this = this;\n\n      _this.initContainer();\n\n      _this.initCanvas();\n\n      _this.initCropBox();\n\n      _this.renderCanvas();\n\n      if (_this.cropped) {\n        _this.renderCropBox();\n      }\n    },\n    initContainer: function initContainer() {\n      var _this = this;\n\n      var options = _this.options;\n      var element = _this.element;\n      var container = _this.container;\n      var cropper = _this.cropper;\n      var containerData;\n      addClass(cropper, CLASS_HIDDEN);\n      removeClass(element, CLASS_HIDDEN);\n      _this.containerData = containerData = {\n        width: max(container.offsetWidth, Number(options.minContainerWidth) || 200),\n        height: max(container.offsetHeight, Number(options.minContainerHeight) || 100)\n      };\n      setStyle(cropper, {\n        width: containerData.width,\n        height: containerData.height\n      });\n      addClass(element, CLASS_HIDDEN);\n      removeClass(cropper, CLASS_HIDDEN);\n    },\n    // Canvas (image wrapper)\n    initCanvas: function initCanvas() {\n      var _this = this;\n\n      var viewMode = _this.options.viewMode;\n      var containerData = _this.containerData;\n      var imageData = _this.imageData;\n      var rotated = abs(imageData.rotate) === 90;\n      var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n      var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n      var aspectRatio = naturalWidth / naturalHeight;\n      var canvasWidth = containerData.width;\n      var canvasHeight = containerData.height;\n      var canvasData;\n\n      if (containerData.height * aspectRatio > containerData.width) {\n        if (viewMode === 3) {\n          canvasWidth = containerData.height * aspectRatio;\n        } else {\n          canvasHeight = containerData.width / aspectRatio;\n        }\n      } else {\n        if (viewMode === 3) {\n          canvasHeight = containerData.width / aspectRatio;\n        } else {\n          canvasWidth = containerData.height * aspectRatio;\n        }\n      }\n\n      canvasData = {\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        aspectRatio: aspectRatio,\n        width: canvasWidth,\n        height: canvasHeight\n      };\n      canvasData.oldLeft = canvasData.left = (containerData.width - canvasWidth) / 2;\n      canvasData.oldTop = canvasData.top = (containerData.height - canvasHeight) / 2;\n      _this.canvasData = canvasData;\n      _this.limited = viewMode === 1 || viewMode === 2;\n\n      _this.limitCanvas(true, true);\n\n      _this.initialImageData = extend({}, imageData);\n      _this.initialCanvasData = extend({}, canvasData);\n    },\n    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\n      var _this = this;\n\n      var options = _this.options;\n      var viewMode = options.viewMode;\n      var containerData = _this.containerData;\n      var canvasData = _this.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n      var cropBoxData = _this.cropBoxData;\n      var cropped = _this.cropped && cropBoxData;\n      var minCanvasWidth;\n      var minCanvasHeight;\n      var newCanvasLeft;\n      var newCanvasTop;\n\n      if (sizeLimited) {\n        minCanvasWidth = Number(options.minCanvasWidth) || 0;\n        minCanvasHeight = Number(options.minCanvasHeight) || 0;\n\n        if (viewMode > 1) {\n          minCanvasWidth = max(minCanvasWidth, containerData.width);\n          minCanvasHeight = max(minCanvasHeight, containerData.height);\n\n          if (viewMode === 3) {\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        } else if (viewMode > 0) {\n          if (minCanvasWidth) {\n            minCanvasWidth = max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n          } else if (minCanvasHeight) {\n            minCanvasHeight = max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n          } else if (cropped) {\n            minCanvasWidth = cropBoxData.width;\n            minCanvasHeight = cropBoxData.height;\n\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        }\n\n        if (minCanvasWidth && minCanvasHeight) {\n          if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n            minCanvasHeight = minCanvasWidth / aspectRatio;\n          } else {\n            minCanvasWidth = minCanvasHeight * aspectRatio;\n          }\n        } else if (minCanvasWidth) {\n          minCanvasHeight = minCanvasWidth / aspectRatio;\n        } else if (minCanvasHeight) {\n          minCanvasWidth = minCanvasHeight * aspectRatio;\n        }\n\n        canvasData.minWidth = minCanvasWidth;\n        canvasData.minHeight = minCanvasHeight;\n        canvasData.maxWidth = Infinity;\n        canvasData.maxHeight = Infinity;\n      }\n\n      if (positionLimited) {\n        if (viewMode) {\n          newCanvasLeft = containerData.width - canvasData.width;\n          newCanvasTop = containerData.height - canvasData.height;\n          canvasData.minLeft = min(0, newCanvasLeft);\n          canvasData.minTop = min(0, newCanvasTop);\n          canvasData.maxLeft = max(0, newCanvasLeft);\n          canvasData.maxTop = max(0, newCanvasTop);\n\n          if (cropped && _this.limited) {\n            canvasData.minLeft = min(cropBoxData.left, cropBoxData.left + cropBoxData.width - canvasData.width);\n            canvasData.minTop = min(cropBoxData.top, cropBoxData.top + cropBoxData.height - canvasData.height);\n            canvasData.maxLeft = cropBoxData.left;\n            canvasData.maxTop = cropBoxData.top;\n\n            if (viewMode === 2) {\n              if (canvasData.width >= containerData.width) {\n                canvasData.minLeft = min(0, newCanvasLeft);\n                canvasData.maxLeft = max(0, newCanvasLeft);\n              }\n\n              if (canvasData.height >= containerData.height) {\n                canvasData.minTop = min(0, newCanvasTop);\n                canvasData.maxTop = max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvasData.minLeft = -canvasData.width;\n          canvasData.minTop = -canvasData.height;\n          canvasData.maxLeft = containerData.width;\n          canvasData.maxTop = containerData.height;\n        }\n      }\n    },\n    renderCanvas: function renderCanvas(changed) {\n      var _this = this;\n\n      var canvasData = _this.canvasData;\n      var imageData = _this.imageData;\n      var rotate = imageData.rotate;\n      var aspectRatio;\n      var rotatedData;\n\n      if (_this.rotated) {\n        _this.rotated = false; // Computes rotated sizes with image sizes\n\n        rotatedData = getRotatedSizes({\n          width: imageData.width,\n          height: imageData.height,\n          degree: rotate\n        });\n        aspectRatio = rotatedData.width / rotatedData.height;\n\n        if (aspectRatio !== canvasData.aspectRatio) {\n          canvasData.left -= (rotatedData.width - canvasData.width) / 2;\n          canvasData.top -= (rotatedData.height - canvasData.height) / 2;\n          canvasData.width = rotatedData.width;\n          canvasData.height = rotatedData.height;\n          canvasData.aspectRatio = aspectRatio;\n          canvasData.naturalWidth = imageData.naturalWidth;\n          canvasData.naturalHeight = imageData.naturalHeight; // Computes rotated sizes with natural image sizes\n\n          if (rotate % 180) {\n            rotatedData = getRotatedSizes({\n              width: imageData.naturalWidth,\n              height: imageData.naturalHeight,\n              degree: rotate\n            });\n            canvasData.naturalWidth = rotatedData.width;\n            canvasData.naturalHeight = rotatedData.height;\n          }\n\n          _this.limitCanvas(true, false);\n        }\n      }\n\n      if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n        canvasData.left = canvasData.oldLeft;\n      }\n\n      if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n        canvasData.top = canvasData.oldTop;\n      }\n\n      canvasData.width = min(max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n      canvasData.height = min(max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n\n      _this.limitCanvas(false, true);\n\n      canvasData.oldLeft = canvasData.left = min(max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n      canvasData.oldTop = canvasData.top = min(max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n      setStyle(_this.canvas, {\n        width: canvasData.width,\n        height: canvasData.height,\n        left: canvasData.left,\n        top: canvasData.top\n      });\n\n      _this.renderImage();\n\n      if (_this.cropped && _this.limited) {\n        _this.limitCropBox(true, true);\n      }\n\n      if (changed) {\n        _this.output();\n      }\n    },\n    renderImage: function renderImage(changed) {\n      var _this = this;\n\n      var canvasData = _this.canvasData;\n      var imageData = _this.imageData;\n      var newImageData;\n      var reversedData;\n      var reversedWidth;\n      var reversedHeight;\n      var transform;\n\n      if (imageData.rotate) {\n        reversedData = getRotatedSizes({\n          width: canvasData.width,\n          height: canvasData.height,\n          degree: imageData.rotate,\n          aspectRatio: imageData.aspectRatio\n        }, true);\n        reversedWidth = reversedData.width;\n        reversedHeight = reversedData.height;\n        newImageData = {\n          width: reversedWidth,\n          height: reversedHeight,\n          left: (canvasData.width - reversedWidth) / 2,\n          top: (canvasData.height - reversedHeight) / 2\n        };\n      }\n\n      extend(imageData, newImageData || {\n        width: canvasData.width,\n        height: canvasData.height,\n        left: 0,\n        top: 0\n      });\n      transform = getTransform(imageData);\n      setStyle(_this.image, {\n        width: imageData.width,\n        height: imageData.height,\n        marginLeft: imageData.left,\n        marginTop: imageData.top,\n        WebkitTransform: transform,\n        msTransform: transform,\n        transform: transform\n      });\n\n      if (changed) {\n        _this.output();\n      }\n    },\n    initCropBox: function initCropBox() {\n      var _this = this;\n\n      var options = _this.options;\n      var aspectRatio = options.aspectRatio;\n      var autoCropArea = Number(options.autoCropArea) || 0.8;\n      var canvasData = _this.canvasData;\n      var cropBoxData = {\n        width: canvasData.width,\n        height: canvasData.height\n      };\n\n      if (aspectRatio) {\n        if (canvasData.height * aspectRatio > canvasData.width) {\n          cropBoxData.height = cropBoxData.width / aspectRatio;\n        } else {\n          cropBoxData.width = cropBoxData.height * aspectRatio;\n        }\n      }\n\n      _this.cropBoxData = cropBoxData;\n\n      _this.limitCropBox(true, true); // Initialize auto crop area\n\n\n      cropBoxData.width = min(max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = min(max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight); // The width/height of auto crop area must large than \"minWidth/Height\"\n\n      cropBoxData.width = max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n      cropBoxData.height = max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n      cropBoxData.oldLeft = cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n      cropBoxData.oldTop = cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n      _this.initialCropBoxData = extend({}, cropBoxData);\n    },\n    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\n      var _this = this;\n\n      var options = _this.options;\n      var aspectRatio = options.aspectRatio;\n      var containerData = _this.containerData;\n      var canvasData = _this.canvasData;\n      var cropBoxData = _this.cropBoxData;\n      var limited = _this.limited;\n      var minCropBoxWidth;\n      var minCropBoxHeight;\n      var maxCropBoxWidth;\n      var maxCropBoxHeight;\n\n      if (sizeLimited) {\n        minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n        minCropBoxHeight = Number(options.minCropBoxHeight) || 0; // The min/maxCropBoxWidth/Height must be less than containerWidth/Height\n\n        minCropBoxWidth = min(minCropBoxWidth, containerData.width);\n        minCropBoxHeight = min(minCropBoxHeight, containerData.height);\n        maxCropBoxWidth = min(containerData.width, limited ? canvasData.width : containerData.width);\n        maxCropBoxHeight = min(containerData.height, limited ? canvasData.height : containerData.height);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        } // The minWidth/Height must be less than maxWidth/Height\n\n\n        cropBoxData.minWidth = min(minCropBoxWidth, maxCropBoxWidth);\n        cropBoxData.minHeight = min(minCropBoxHeight, maxCropBoxHeight);\n        cropBoxData.maxWidth = maxCropBoxWidth;\n        cropBoxData.maxHeight = maxCropBoxHeight;\n      }\n\n      if (positionLimited) {\n        if (limited) {\n          cropBoxData.minLeft = max(0, canvasData.left);\n          cropBoxData.minTop = max(0, canvasData.top);\n          cropBoxData.maxLeft = min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n          cropBoxData.maxTop = min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n        } else {\n          cropBoxData.minLeft = 0;\n          cropBoxData.minTop = 0;\n          cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n          cropBoxData.maxTop = containerData.height - cropBoxData.height;\n        }\n      }\n    },\n    renderCropBox: function renderCropBox() {\n      var _this = this;\n\n      var options = _this.options;\n      var containerData = _this.containerData;\n      var cropBoxData = _this.cropBoxData;\n\n      if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n        cropBoxData.left = cropBoxData.oldLeft;\n      }\n\n      if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n        cropBoxData.top = cropBoxData.oldTop;\n      }\n\n      cropBoxData.width = min(max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = min(max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n\n      _this.limitCropBox(false, true);\n\n      cropBoxData.oldLeft = cropBoxData.left = min(max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n      cropBoxData.oldTop = cropBoxData.top = min(max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n\n      if (options.movable && options.cropBoxMovable) {\n        // Turn to move the canvas when the crop box is equal to the container\n        setData(_this.face, DATA_ACTION, cropBoxData.width === containerData.width && cropBoxData.height === containerData.height ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      setStyle(_this.cropBox, {\n        width: cropBoxData.width,\n        height: cropBoxData.height,\n        left: cropBoxData.left,\n        top: cropBoxData.top\n      });\n\n      if (_this.cropped && _this.limited) {\n        _this.limitCanvas(true, true);\n      }\n\n      if (!_this.disabled) {\n        _this.output();\n      }\n    },\n    output: function output() {\n      var _this = this;\n\n      _this.preview();\n\n      if (_this.complete) {\n        dispatchEvent(_this.element, EVENT_CROP, _this.getData());\n      }\n    },\n    initPreview: function initPreview() {\n      var _this = this;\n\n      var preview = _this.options.preview;\n      var image = createElement('img');\n      var crossOrigin = _this.crossOrigin;\n      var url = crossOrigin ? _this.crossOriginUrl : _this.url;\n      var previews;\n\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n\n      image.src = url;\n      appendChild(_this.viewBox, image);\n      _this.image2 = image;\n\n      if (!preview) {\n        return;\n      }\n\n      _this.previews = previews = document.querySelectorAll(preview);\n      each(previews, function (element) {\n        var image = createElement('img'); // Save the original size for recover\n\n        setData(element, DATA_PREVIEW, {\n          width: element.offsetWidth,\n          height: element.offsetHeight,\n          html: element.innerHTML\n        });\n\n        if (crossOrigin) {\n          image.crossOrigin = crossOrigin;\n        }\n\n        image.src = url;\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * Add `height:auto` to override `height` attribute on IE8\n         * (Occur only when margin-top <= -height)\n         */\n\n        image.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n        empty(element);\n        appendChild(element, image);\n      });\n    },\n    resetPreview: function resetPreview() {\n      each(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        setStyle(element, {\n          width: data.width,\n          height: data.height\n        });\n        element.innerHTML = data.html;\n        removeData(element, DATA_PREVIEW);\n      });\n    },\n    preview: function preview() {\n      var _this = this;\n\n      var imageData = _this.imageData;\n      var canvasData = _this.canvasData;\n      var cropBoxData = _this.cropBoxData;\n      var cropBoxWidth = cropBoxData.width;\n      var cropBoxHeight = cropBoxData.height;\n      var width = imageData.width;\n      var height = imageData.height;\n      var left = cropBoxData.left - canvasData.left - imageData.left;\n      var top = cropBoxData.top - canvasData.top - imageData.top;\n      var transform = getTransform(imageData);\n      var transforms = {\n        WebkitTransform: transform,\n        msTransform: transform,\n        transform: transform\n      };\n\n      if (!_this.cropped || _this.disabled) {\n        return;\n      }\n\n      setStyle(_this.image2, extend({\n        width: width,\n        height: height,\n        marginLeft: -left,\n        marginTop: -top\n      }, transforms));\n      each(_this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        setStyle(element, {\n          width: newWidth,\n          height: newHeight\n        });\n        setStyle(getByTag(element, 'img')[0], extend({\n          width: width * ratio,\n          height: height * ratio,\n          marginLeft: -left * ratio,\n          marginTop: -top * ratio\n        }, transforms));\n      });\n    },\n    bind: function bind() {\n      var _this = this;\n\n      var options = _this.options;\n      var element = _this.element;\n      var cropper = _this.cropper;\n\n      if (isFunction(options.cropstart)) {\n        addListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        addListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        addListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        addListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        addListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      addListener(cropper, EVENT_MOUSE_DOWN, _this._cropStart = proxy(_this.cropStart, _this));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        addListener(cropper, EVENT_WHEEL, _this._wheel = proxy(_this.wheel, _this));\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        addListener(cropper, EVENT_DBLCLICK, _this._dblclick = proxy(_this.dblclick, _this));\n      }\n\n      addListener(document, EVENT_MOUSE_MOVE, _this._cropMove = proxy(_this.cropMove, _this));\n      addListener(document, EVENT_MOUSE_UP, _this._cropEnd = proxy(_this.cropEnd, _this));\n\n      if (options.responsive) {\n        addListener(window, EVENT_RESIZE, _this._resize = proxy(_this.resize, _this));\n      }\n    },\n    unbind: function unbind() {\n      var _this = this;\n\n      var options = _this.options;\n      var element = _this.element;\n      var cropper = _this.cropper;\n\n      if (isFunction(options.cropstart)) {\n        removeListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        removeListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        removeListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        removeListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        removeListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      removeListener(cropper, EVENT_MOUSE_DOWN, _this._cropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        removeListener(cropper, EVENT_WHEEL, _this._wheel);\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        removeListener(cropper, EVENT_DBLCLICK, _this._dblclick);\n      }\n\n      removeListener(document, EVENT_MOUSE_MOVE, _this._cropMove);\n      removeListener(document, EVENT_MOUSE_UP, _this._cropEnd);\n\n      if (options.responsive) {\n        removeListener(window, EVENT_RESIZE, _this._resize);\n      }\n    },\n    resize: function resize() {\n      var _this = this;\n\n      var restore = _this.options.restore;\n      var container = _this.container;\n      var containerData = _this.containerData;\n      var canvasData;\n      var cropBoxData;\n      var ratio; // Check `container` is necessary for IE8\n\n      if (_this.disabled || !containerData) {\n        return;\n      }\n\n      ratio = container.offsetWidth / containerData.width; // Resize when width changed or height changed\n\n      if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n        if (restore) {\n          canvasData = _this.getCanvasData();\n          cropBoxData = _this.getCropBoxData();\n        }\n\n        _this.render();\n\n        if (restore) {\n          _this.setCanvasData(each(canvasData, function (n, i) {\n            canvasData[i] = n * ratio;\n          }));\n\n          _this.setCropBoxData(each(cropBoxData, function (n, i) {\n            cropBoxData[i] = n * ratio;\n          }));\n        }\n      }\n    },\n    dblclick: function dblclick() {\n      var _this = this;\n\n      if (_this.disabled) {\n        return;\n      }\n\n      _this.setDragMode(hasClass(_this.dragBox, CLASS_CROP) ? ACTION_MOVE : ACTION_CROP);\n    },\n    wheel: function wheel(event) {\n      var _this = this;\n\n      var e = getEvent(event);\n      var ratio = Number(_this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (_this.disabled) {\n        return;\n      }\n\n      preventDefault(e); // Limit wheel speed to prevent zoom too fast (#21)\n\n      if (_this.wheeling) {\n        return;\n      }\n\n      _this.wheeling = true;\n      setTimeout(function () {\n        _this.wheeling = false;\n      }, 50);\n\n      if (e.deltaY) {\n        delta = e.deltaY > 0 ? 1 : -1;\n      } else if (e.wheelDelta) {\n        delta = -e.wheelDelta / 120;\n      } else if (e.detail) {\n        delta = e.detail > 0 ? 1 : -1;\n      }\n\n      _this.zoom(-delta * ratio, e);\n    },\n    cropStart: function cropStart(event) {\n      var _this = this;\n\n      var options = _this.options;\n      var e = getEvent(event);\n      var touches = e.touches;\n      var touchesLength;\n      var touch;\n      var action;\n\n      if (_this.disabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {\n            touch = touches[1];\n            _this.startX2 = touch.pageX;\n            _this.startY2 = touch.pageY;\n            action = ACTION_ZOOM;\n          } else {\n            return;\n          }\n        }\n\n        touch = touches[0];\n      }\n\n      action = action || getData(e.target, DATA_ACTION);\n\n      if (REGEXP_ACTIONS.test(action)) {\n        if (dispatchEvent(_this.element, EVENT_CROP_START, {\n          originalEvent: e,\n          action: action\n        }) === false) {\n          return;\n        }\n\n        preventDefault(e);\n        _this.action = action;\n        _this.cropping = false;\n        _this.startX = touch ? touch.pageX : e.pageX;\n        _this.startY = touch ? touch.pageY : e.pageY;\n\n        if (action === ACTION_CROP) {\n          _this.cropping = true;\n          addClass(_this.dragBox, CLASS_MODAL);\n        }\n      }\n    },\n    cropMove: function cropMove(event) {\n      var _this = this;\n\n      var options = _this.options;\n      var e = getEvent(event);\n      var touches = e.touches;\n      var action = _this.action;\n      var touchesLength;\n      var touch;\n\n      if (_this.disabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {\n            touch = touches[1];\n            _this.endX2 = touch.pageX;\n            _this.endY2 = touch.pageY;\n          } else {\n            return;\n          }\n        }\n\n        touch = touches[0];\n      }\n\n      if (action) {\n        if (dispatchEvent(_this.element, EVENT_CROP_MOVE, {\n          originalEvent: e,\n          action: action\n        }) === false) {\n          return;\n        }\n\n        preventDefault(e);\n        _this.endX = touch ? touch.pageX : e.pageX;\n        _this.endY = touch ? touch.pageY : e.pageY;\n\n        _this.change(e.shiftKey, action === ACTION_ZOOM ? e : null);\n      }\n    },\n    cropEnd: function cropEnd(event) {\n      var _this = this;\n\n      var options = _this.options;\n      var e = getEvent(event);\n      var action = _this.action;\n\n      if (_this.disabled) {\n        return;\n      }\n\n      if (action) {\n        preventDefault(e);\n\n        if (_this.cropping) {\n          _this.cropping = false;\n          toggleClass(_this.dragBox, CLASS_MODAL, _this.cropped && options.modal);\n        }\n\n        _this.action = '';\n        dispatchEvent(_this.element, EVENT_CROP_END, {\n          originalEvent: e,\n          action: action\n        });\n      }\n    },\n    change: function change(shiftKey, originalEvent) {\n      var _this = this;\n\n      var options = _this.options;\n      var aspectRatio = options.aspectRatio;\n      var action = _this.action;\n      var containerData = _this.containerData;\n      var canvasData = _this.canvasData;\n      var cropBoxData = _this.cropBoxData;\n      var width = cropBoxData.width;\n      var height = cropBoxData.height;\n      var left = cropBoxData.left;\n      var top = cropBoxData.top;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = containerData.width;\n      var maxHeight = containerData.height;\n      var renderable = true;\n      var offset;\n      var range; // Locking aspect ratio in \"free mode\" by holding shift key\n\n      if (!aspectRatio && shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (_this.limited) {\n        minLeft = cropBoxData.minLeft;\n        minTop = cropBoxData.minTop;\n        maxWidth = minLeft + min(containerData.width, canvasData.left + canvasData.width);\n        maxHeight = minTop + min(containerData.height, canvasData.top + canvasData.height);\n      }\n\n      range = {\n        x: _this.endX - _this.startX,\n        y: _this.endY - _this.startY\n      };\n\n      if (aspectRatio) {\n        range.X = range.y * aspectRatio;\n        range.Y = range.x / aspectRatio;\n      }\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n        // Resize crop box\n\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          width += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top -= range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          height -= range.y;\n          top += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          width -= range.x;\n          left += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          height += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left -= range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += range.X;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n          }\n\n          break;\n        // Move canvas\n\n        case ACTION_MOVE:\n          _this.move(range.x, range.y);\n\n          renderable = false;\n          break;\n        // Zoom canvas\n\n        case ACTION_ZOOM:\n          _this.zoom(function (x1, y1, x2, y2) {\n            var z1 = sqrt(x1 * x1 + y1 * y1);\n            var z2 = sqrt(x2 * x2 + y2 * y2);\n            return (z2 - z1) / z1;\n          }(abs(_this.startX - _this.startX2), abs(_this.startY - _this.startY2), abs(_this.endX - _this.endX2), abs(_this.endY - _this.endY2)), originalEvent);\n\n          _this.startX2 = _this.endX2;\n          _this.startY2 = _this.endY2;\n          renderable = false;\n          break;\n        // Create crop box\n\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = getOffset(_this.cropper);\n          left = _this.startX - offset.left;\n          top = _this.startY - offset.top;\n          width = cropBoxData.minWidth;\n          height = cropBoxData.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          } // Show the crop box if is hidden\n\n\n          if (!_this.cropped) {\n            removeClass(_this.cropBox, CLASS_HIDDEN);\n            _this.cropped = true;\n\n            if (_this.limited) {\n              _this.limitCropBox(true, true);\n            }\n          }\n\n          break;\n        // No default\n      }\n\n      if (renderable) {\n        cropBoxData.width = width;\n        cropBoxData.height = height;\n        cropBoxData.left = left;\n        cropBoxData.top = top;\n        _this.action = action;\n\n        _this.renderCropBox();\n      } // Override\n\n\n      _this.startX = _this.endX;\n      _this.startY = _this.endY;\n    },\n    // Show the crop box manually\n    crop: function crop() {\n      var _this = this;\n\n      if (_this.built && !_this.disabled) {\n        if (!_this.cropped) {\n          _this.cropped = true;\n\n          _this.limitCropBox(true, true);\n\n          if (_this.options.modal) {\n            addClass(_this.dragBox, CLASS_MODAL);\n          }\n\n          removeClass(_this.cropBox, CLASS_HIDDEN);\n        }\n\n        _this.setCropBoxData(_this.initialCropBoxData);\n      }\n\n      return _this;\n    },\n    // Reset the image and crop box to their initial states\n    reset: function reset() {\n      var _this = this;\n\n      if (_this.built && !_this.disabled) {\n        _this.imageData = extend({}, _this.initialImageData);\n        _this.canvasData = extend({}, _this.initialCanvasData);\n        _this.cropBoxData = extend({}, _this.initialCropBoxData);\n\n        _this.renderCanvas();\n\n        if (_this.cropped) {\n          _this.renderCropBox();\n        }\n      }\n\n      return _this;\n    },\n    // Clear the crop box\n    clear: function clear() {\n      var _this = this;\n\n      if (_this.cropped && !_this.disabled) {\n        extend(_this.cropBoxData, {\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0\n        });\n        _this.cropped = false;\n\n        _this.renderCropBox();\n\n        _this.limitCanvas(); // Render canvas after crop box rendered\n\n\n        _this.renderCanvas();\n\n        removeClass(_this.dragBox, CLASS_MODAL);\n        addClass(_this.cropBox, CLASS_HIDDEN);\n      }\n\n      return _this;\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     *\n     * @param {String} url\n     * @param {Boolean} onlyColorChanged (optional)\n     */\n    replace: function replace(url, onlyColorChanged) {\n      var _this = this;\n\n      if (!_this.disabled && url) {\n        if (_this.isImg) {\n          _this.element.src = url;\n        }\n\n        if (onlyColorChanged) {\n          _this.url = url;\n          _this.image.src = url;\n\n          if (_this.built) {\n            _this.image2.src = url;\n            each(_this.previews, function (element) {\n              getByTag(element, 'img')[0].src = url;\n            });\n          }\n        } else {\n          if (_this.isImg) {\n            _this.replaced = true;\n          } // Clear previous data\n\n\n          _this.options.data = null;\n\n          _this.load(url);\n        }\n      }\n\n      return _this;\n    },\n    // Enable (unfreeze) the cropper\n    enable: function enable() {\n      var _this = this;\n\n      if (_this.built) {\n        _this.disabled = false;\n        removeClass(_this.cropper, CLASS_DISABLED);\n      }\n\n      return _this;\n    },\n    // Disable (freeze) the cropper\n    disable: function disable() {\n      var _this = this;\n\n      if (_this.built) {\n        _this.disabled = true;\n        addClass(_this.cropper, CLASS_DISABLED);\n      }\n\n      return _this;\n    },\n    // Destroy the cropper and remove the instance from the image\n    destroy: function destroy() {\n      var _this = this;\n\n      var element = _this.element;\n      var image = _this.image;\n\n      if (_this.ready) {\n        if (_this.isImg && _this.replaced) {\n          element.src = _this.originalUrl;\n        }\n\n        _this.unbuild();\n\n        removeClass(element, CLASS_HIDDEN);\n      } else {\n        if (_this.isImg) {\n          removeListener(element, EVENT_LOAD, _this.start);\n        } else if (image) {\n          removeChild(image);\n        }\n      }\n\n      removeData(element, NAMESPACE);\n      return _this;\n    },\n\n    /**\n     * Move the canvas with relative offsets\n     *\n     * @param {Number} offsetX\n     * @param {Number} offsetY (optional)\n     */\n    move: function move(offsetX, offsetY) {\n      var _this = this;\n\n      var canvasData = _this.canvasData;\n      return _this.moveTo(isUndefined(offsetX) ? offsetX : canvasData.left + Number(offsetX), isUndefined(offsetY) ? offsetY : canvasData.top + Number(offsetY));\n    },\n\n    /**\n     * Move the canvas to an absolute point\n     *\n     * @param {Number} x\n     * @param {Number} y (optional)\n     */\n    moveTo: function moveTo(x, y) {\n      var _this = this;\n\n      var canvasData = _this.canvasData;\n      var changed = false; // If \"y\" is not present, its default value is \"x\"\n\n      if (isUndefined(y)) {\n        y = x;\n      }\n\n      x = Number(x);\n      y = Number(y);\n\n      if (_this.built && !_this.disabled && _this.options.movable) {\n        if (isNumber(x)) {\n          canvasData.left = x;\n          changed = true;\n        }\n\n        if (isNumber(y)) {\n          canvasData.top = y;\n          changed = true;\n        }\n\n        if (changed) {\n          _this.renderCanvas(true);\n        }\n      }\n\n      return _this;\n    },\n\n    /**\n     * Zoom the canvas with a relative ratio\n     *\n     * @param {Number} ratio\n     * @param {Event} _originalEvent (private)\n     */\n    zoom: function zoom(ratio, _originalEvent) {\n      var _this = this;\n\n      var canvasData = _this.canvasData;\n      ratio = Number(ratio);\n\n      if (ratio < 0) {\n        ratio = 1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      return _this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, _originalEvent);\n    },\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     *\n     * @param {Number} ratio\n     * @param {Event} _originalEvent (private)\n     */\n    zoomTo: function zoomTo(ratio, _originalEvent) {\n      var _this = this;\n\n      var options = _this.options;\n      var canvasData = _this.canvasData;\n      var width = canvasData.width;\n      var height = canvasData.height;\n      var naturalWidth = canvasData.naturalWidth;\n      var naturalHeight = canvasData.naturalHeight;\n      var newWidth;\n      var newHeight;\n      var offset;\n      var center;\n      ratio = Number(ratio);\n\n      if (ratio >= 0 && _this.built && !_this.disabled && options.zoomable) {\n        newWidth = naturalWidth * ratio;\n        newHeight = naturalHeight * ratio;\n\n        if (dispatchEvent(_this.element, EVENT_ZOOM, {\n          originalEvent: _originalEvent,\n          oldRatio: width / naturalWidth,\n          ratio: newWidth / naturalWidth\n        }) === false) {\n          return _this;\n        }\n\n        if (_originalEvent) {\n          offset = getOffset(_this.cropper);\n          center = _originalEvent.touches ? getTouchesCenter(_originalEvent.touches) : {\n            pageX: _originalEvent.pageX,\n            pageY: _originalEvent.pageY\n          }; // Zoom from the triggering point of the event\n\n          canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n        } else {\n          // Zoom from the center of the canvas\n          canvasData.left -= (newWidth - width) / 2;\n          canvasData.top -= (newHeight - height) / 2;\n        }\n\n        canvasData.width = newWidth;\n        canvasData.height = newHeight;\n\n        _this.renderCanvas(true);\n      }\n\n      return _this;\n    },\n\n    /**\n     * Rotate the canvas with a relative degree\n     *\n     * @param {Number} degree\n     */\n    rotate: function rotate(degree) {\n      var _this = this;\n\n      return _this.rotateTo((_this.imageData.rotate || 0) + Number(degree));\n    },\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()\n     *\n     * @param {Number} degree\n     */\n    rotateTo: function rotateTo(degree) {\n      var _this = this;\n\n      degree = Number(degree);\n\n      if (isNumber(degree) && _this.built && !_this.disabled && _this.options.rotatable) {\n        _this.imageData.rotate = degree % 360;\n        _this.rotated = true;\n\n        _this.renderCanvas(true);\n      }\n\n      return _this;\n    },\n\n    /**\n     * Scale the image\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()\n     *\n     * @param {Number} scaleX\n     * @param {Number} scaleY (optional)\n     */\n    scale: function scale(scaleX, scaleY) {\n      var _this = this;\n\n      var imageData = _this.imageData;\n      var changed = false; // If \"scaleY\" is not present, its default value is \"scaleX\"\n\n      if (isUndefined(scaleY)) {\n        scaleY = scaleX;\n      }\n\n      scaleX = Number(scaleX);\n      scaleY = Number(scaleY);\n\n      if (_this.built && !_this.disabled && _this.options.scalable) {\n        if (isNumber(scaleX)) {\n          imageData.scaleX = scaleX;\n          changed = true;\n        }\n\n        if (isNumber(scaleY)) {\n          imageData.scaleY = scaleY;\n          changed = true;\n        }\n\n        if (changed) {\n          _this.renderImage(true);\n        }\n      }\n\n      return _this;\n    },\n\n    /**\n     * Scale the abscissa of the image\n     *\n     * @param {Number} scaleX\n     */\n    scaleX: function scaleX(_scaleX) {\n      var _this = this;\n\n      var scaleY = _this.imageData.scaleY;\n      return _this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n    /**\n     * Scale the ordinate of the image\n     *\n     * @param {Number} scaleY\n     */\n    scaleY: function scaleY(_scaleY) {\n      var _this = this;\n\n      var scaleX = _this.imageData.scaleX;\n      return _this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     *\n     * @param {Boolean} rounded (optional)\n     * @return {Object} data\n     */\n    getData: function getData(rounded) {\n      var _this = this;\n\n      var options = _this.options;\n      var imageData = _this.imageData;\n      var canvasData = _this.canvasData;\n      var cropBoxData = _this.cropBoxData;\n      var ratio;\n      var data;\n\n      if (_this.built && _this.cropped) {\n        data = {\n          x: cropBoxData.left - canvasData.left,\n          y: cropBoxData.top - canvasData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n        ratio = imageData.width / imageData.naturalWidth;\n        each(data, function (n, i) {\n          n = n / ratio;\n          data[i] = rounded ? round(n) : n;\n        });\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = imageData.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = imageData.scaleX || 1;\n        data.scaleY = imageData.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     *\n     * @param {Object} data\n     */\n    setData: function setData(data) {\n      var _this = this;\n\n      var options = _this.options;\n      var imageData = _this.imageData;\n      var canvasData = _this.canvasData;\n      var cropBoxData = {};\n      var rotated;\n      var scaled;\n      var ratio;\n\n      if (isFunction(data)) {\n        data = data.call(_this.element);\n      }\n\n      if (_this.built && !_this.disabled && isPlainObject(data)) {\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n            imageData.rotate = data.rotate;\n            _this.rotated = rotated = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n            imageData.scaleX = data.scaleX;\n            scaled = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n            imageData.scaleY = data.scaleY;\n            scaled = true;\n          }\n        }\n\n        if (rotated) {\n          _this.renderCanvas();\n        } else if (scaled) {\n          _this.renderImage();\n        }\n\n        ratio = imageData.width / imageData.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvasData.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvasData.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        _this.setCropBoxData(cropBoxData);\n      }\n\n      return _this;\n    },\n\n    /**\n     * Get the container size data\n     *\n     * @return {Object} data\n     */\n    getContainerData: function getContainerData() {\n      var _this = this;\n\n      return _this.built ? _this.containerData : {};\n    },\n\n    /**\n     * Get the image position and size data\n     *\n     * @return {Object} data\n     */\n    getImageData: function getImageData() {\n      var _this = this;\n\n      return _this.ready ? _this.imageData : {};\n    },\n\n    /**\n     * Get the canvas position and size data\n     *\n     * @return {Object} data\n     */\n    getCanvasData: function getCanvasData() {\n      var _this = this;\n\n      var canvasData = _this.canvasData;\n      var data = {};\n\n      if (_this.built) {\n        each(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {\n          data[n] = canvasData[n];\n        });\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the canvas position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCanvasData: function setCanvasData(data) {\n      var _this = this;\n\n      var canvasData = _this.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n\n      if (isFunction(data)) {\n        data = data.call(_this.element);\n      }\n\n      if (_this.built && !_this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvasData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvasData.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvasData.width = data.width;\n          canvasData.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvasData.height = data.height;\n          canvasData.width = data.height * aspectRatio;\n        }\n\n        _this.renderCanvas(true);\n      }\n\n      return _this;\n    },\n\n    /**\n     * Get the crop box position and size data\n     *\n     * @return {Object} data\n     */\n    getCropBoxData: function getCropBoxData() {\n      var _this = this;\n\n      var cropBoxData = _this.cropBoxData;\n      var data;\n\n      if (_this.built && _this.cropped) {\n        data = {\n          left: cropBoxData.left,\n          top: cropBoxData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCropBoxData: function setCropBoxData(data) {\n      var _this = this;\n\n      var cropBoxData = _this.cropBoxData;\n      var aspectRatio = _this.options.aspectRatio;\n      var widthChanged;\n      var heightChanged;\n\n      if (isFunction(data)) {\n        data = data.call(_this.element);\n      }\n\n      if (_this.built && _this.cropped && !_this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          cropBoxData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBoxData.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          widthChanged = true;\n          cropBoxData.width = data.width;\n        }\n\n        if (isNumber(data.height)) {\n          heightChanged = true;\n          cropBoxData.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (widthChanged) {\n            cropBoxData.height = cropBoxData.width / aspectRatio;\n          } else if (heightChanged) {\n            cropBoxData.width = cropBoxData.height * aspectRatio;\n          }\n        }\n\n        _this.renderCropBox();\n      }\n\n      return _this;\n    },\n\n    /**\n     * Get a canvas drawn the cropped image\n     *\n     * @param {Object} options (optional)\n     * @return {HTMLCanvasElement} canvas\n     */\n    getCroppedCanvas: function getCroppedCanvas(options) {\n      var _this = this;\n\n      var originalWidth;\n      var originalHeight;\n      var canvasWidth;\n      var canvasHeight;\n      var scaledWidth;\n      var scaledHeight;\n      var scaledRatio;\n      var aspectRatio;\n      var canvas;\n      var context;\n      var data;\n\n      if (!_this.built || !SUPPORT_CANVAS) {\n        return;\n      } // Return the whole canvas if not cropped\n\n\n      if (!_this.cropped) {\n        return getSourceCanvas(_this.image, _this.imageData);\n      }\n\n      if (!isPlainObject(options)) {\n        options = {};\n      }\n\n      data = _this.getData();\n      originalWidth = data.width;\n      originalHeight = data.height;\n      aspectRatio = originalWidth / originalHeight;\n\n      if (isPlainObject(options)) {\n        scaledWidth = options.width;\n        scaledHeight = options.height;\n\n        if (scaledWidth) {\n          scaledHeight = scaledWidth / aspectRatio;\n          scaledRatio = scaledWidth / originalWidth;\n        } else if (scaledHeight) {\n          scaledWidth = scaledHeight * aspectRatio;\n          scaledRatio = scaledHeight / originalHeight;\n        }\n      } // The canvas element will use `Math.floor` on a float number, so floor first\n\n\n      canvasWidth = floor(scaledWidth || originalWidth);\n      canvasHeight = floor(scaledHeight || originalHeight);\n      canvas = createElement('canvas');\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n      context = canvas.getContext('2d');\n\n      if (options.fillColor) {\n        context.fillStyle = options.fillColor;\n        context.fillRect(0, 0, canvasWidth, canvasHeight);\n      } // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n\n\n      context.drawImage.apply(context, function () {\n        var source = getSourceCanvas(_this.image, _this.imageData);\n        var sourceWidth = source.width;\n        var sourceHeight = source.height;\n        var canvasData = _this.canvasData;\n        var params = [source]; // Source canvas\n\n        var srcX = data.x + canvasData.naturalWidth * (abs(data.scaleX || 1) - 1) / 2;\n        var srcY = data.y + canvasData.naturalHeight * (abs(data.scaleY || 1) - 1) / 2;\n        var srcWidth;\n        var srcHeight; // Destination canvas\n\n        var dstX;\n        var dstY;\n        var dstWidth;\n        var dstHeight;\n\n        if (srcX <= -originalWidth || srcX > sourceWidth) {\n          srcX = srcWidth = dstX = dstWidth = 0;\n        } else if (srcX <= 0) {\n          dstX = -srcX;\n          srcX = 0;\n          srcWidth = dstWidth = min(sourceWidth, originalWidth + srcX);\n        } else if (srcX <= sourceWidth) {\n          dstX = 0;\n          srcWidth = dstWidth = min(originalWidth, sourceWidth - srcX);\n        }\n\n        if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {\n          srcY = srcHeight = dstY = dstHeight = 0;\n        } else if (srcY <= 0) {\n          dstY = -srcY;\n          srcY = 0;\n          srcHeight = dstHeight = min(sourceHeight, originalHeight + srcY);\n        } else if (srcY <= sourceHeight) {\n          dstY = 0;\n          srcHeight = dstHeight = min(originalHeight, sourceHeight - srcY);\n        }\n\n        params.push(floor(srcX), floor(srcY), floor(srcWidth), floor(srcHeight)); // Scale destination sizes\n\n        if (scaledRatio) {\n          dstX *= scaledRatio;\n          dstY *= scaledRatio;\n          dstWidth *= scaledRatio;\n          dstHeight *= scaledRatio;\n        } // Avoid \"IndexSizeError\" in IE and Firefox\n\n\n        if (dstWidth > 0 && dstHeight > 0) {\n          params.push(floor(dstX), floor(dstY), floor(dstWidth), floor(dstHeight));\n        }\n\n        return params;\n      }.call(_this));\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box\n     *\n     * @param {Number} aspectRatio\n     */\n    setAspectRatio: function setAspectRatio(aspectRatio) {\n      var _this = this;\n\n      var options = _this.options;\n\n      if (!_this.disabled && !isUndefined(aspectRatio)) {\n        // 0 -> NaN\n        options.aspectRatio = max(0, aspectRatio) || NaN;\n\n        if (_this.built) {\n          _this.initCropBox();\n\n          if (_this.cropped) {\n            _this.renderCropBox();\n          }\n        }\n      }\n\n      return _this;\n    },\n\n    /**\n     * Change the drag mode\n     *\n     * @param {String} mode (optional)\n     */\n    setDragMode: function setDragMode(mode) {\n      var _this = this;\n\n      var options = _this.options;\n      var dragBox = _this.dragBox;\n      var face = _this.face;\n      var croppable;\n      var movable;\n\n      if (_this.ready && !_this.disabled) {\n        croppable = mode === ACTION_CROP;\n        movable = options.movable && mode === ACTION_MOVE;\n        mode = croppable || movable ? mode : ACTION_NONE;\n        setData(dragBox, DATA_ACTION, mode);\n        toggleClass(dragBox, CLASS_CROP, croppable);\n        toggleClass(dragBox, CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n          // Sync drag mode to crop box when it is not movable\n          setData(face, DATA_ACTION, mode);\n          toggleClass(face, CLASS_CROP, croppable);\n          toggleClass(face, CLASS_MOVE, movable);\n        }\n      }\n\n      return _this;\n    }\n  };\n  Cropper.DEFAULTS = {\n    // Define the view mode of the cropper\n    viewMode: 0,\n    // 0, 1, 2, 3\n    // Define the dragging mode of the cropper\n    dragMode: 'crop',\n    // 'crop', 'move' or 'none'\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n    // An object with the previous cropping result data\n    data: null,\n    // A selector for adding extra containers to preview\n    preview: '',\n    // Re-render the cropper when resize the window\n    responsive: true,\n    // Restore the cropped area after resize the window\n    restore: true,\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n    // Show the black modal\n    modal: true,\n    // Show the dashed lines for guiding\n    guides: true,\n    // Show the center indicator for guiding\n    center: true,\n    // Show the white modal to highlight the crop box\n    highlight: true,\n    // Show the grid background\n    background: true,\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n    // Enable to move the image\n    movable: true,\n    // Enable to rotate the image\n    rotatable: true,\n    // Enable to scale the image\n    scalable: true,\n    // Enable to zoom the image\n    zoomable: true,\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n    // Enable to move the crop box\n    cropBoxMovable: true,\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n    // Shortcuts of events\n    build: null,\n    built: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n\n  Cropper.TEMPLATE = function (source, words) {\n    words = words.split(',');\n    return source.replace(/\\d+/g, function (i) {\n      return words[i];\n    });\n  }('<0 6=\"5-container\"><0 6=\"5-wrap-9\"><0 6=\"5-canvas\"></0></0><0 6=\"5-drag-9\"></0><0 6=\"5-crop-9\"><1 6=\"5-view-9\"></1><1 6=\"5-8 8-h\"></1><1 6=\"5-8 8-v\"></1><1 6=\"5-center\"></1><1 6=\"5-face\"></1><1 6=\"5-7 7-e\" 3-2=\"e\"></1><1 6=\"5-7 7-n\" 3-2=\"n\"></1><1 6=\"5-7 7-w\" 3-2=\"w\"></1><1 6=\"5-7 7-s\" 3-2=\"s\"></1><1 6=\"5-4 4-e\" 3-2=\"e\"></1><1 6=\"5-4 4-n\" 3-2=\"n\"></1><1 6=\"5-4 4-w\" 3-2=\"w\"></1><1 6=\"5-4 4-s\" 3-2=\"s\"></1><1 6=\"5-4 4-ne\" 3-2=\"ne\"></1><1 6=\"5-4 4-nw\" 3-2=\"nw\"></1><1 6=\"5-4 4-sw\" 3-2=\"sw\"></1><1 6=\"5-4 4-se\" 3-2=\"se\"></1></0></0>', 'div,span,action,data,point,cropper,class,line,dashed,box');\n  /*Cropper.TEMPLATE = (\n    '<div class=\"cropper-container\">' +\n      '<div class=\"cropper-wrap-box\">' +\n        '<div class=\"cropper-canvas\"></div>' +\n      '</div>' +\n      '<div class=\"cropper-drag-box\"></div>' +\n      '<div class=\"cropper-crop-box\">' +\n        '<span class=\"cropper-view-box\"></span>' +\n        '<span class=\"cropper-dashed dashed-h\"></span>' +\n        '<span class=\"cropper-dashed dashed-v\"></span>' +\n        '<span class=\"cropper-center\"></span>' +\n        '<span class=\"cropper-face\"></span>' +\n        '<span class=\"cropper-line line-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-line line-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-line line-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-line line-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-point point-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-point point-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-point point-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-ne\" data-action=\"ne\"></span>' +\n        '<span class=\"cropper-point point-nw\" data-action=\"nw\"></span>' +\n        '<span class=\"cropper-point point-sw\" data-action=\"sw\"></span>' +\n        '<span class=\"cropper-point point-se\" data-action=\"se\"></span>' +\n      '</div>' +\n    '</div>'\n  );*/\n\n\n  var _Cropper = window.Cropper;\n\n  Cropper.noConflict = function () {\n    window.Cropper = _Cropper;\n    return Cropper;\n  };\n\n  Cropper.setDefaults = function (options) {\n    extend(Cropper.DEFAULTS, options);\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define('cropper', [], function () {\n      return Cropper;\n    });\n  }\n\n  if (!noGlobal) {\n    window.Cropper = Cropper;\n  }\n\n  return Cropper;\n});","map":null,"metadata":{},"sourceType":"script"}