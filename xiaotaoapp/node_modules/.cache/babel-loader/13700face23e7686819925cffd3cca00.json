{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nvar _nextButton = require('../../next-button/lib/index.js');\n\nvar _nextButton2 = _interopRequireDefault(_nextButton);\n\nvar _nextUtil = require('../../next-util/lib/index.js');\n\nvar _nextLocaleProvider = require('../../next-locale-provider/lib/index.js');\n\nvar _nextLocaleProvider2 = _interopRequireDefault(_nextLocaleProvider);\n\nvar _upload = require('./upload.js');\n\nvar _upload2 = _interopRequireDefault(_upload);\n\nvar _uploadList = require('./upload-list.js');\n\nvar _uploadList2 = _interopRequireDefault(_uploadList);\n\nvar _getFileItem = require('./get-file-item.js');\n\nvar _getFileItem2 = _interopRequireDefault(_getFileItem);\n\nvar _normalizeFileItem = require('./normalize-file-item.js');\n\nvar _normalizeFileItem2 = _interopRequireDefault(_normalizeFileItem);\n\nvar _fileserverUrl = require('./util/fileserver-url.js');\n\nvar Fileserver = _interopRequireWildcard(_fileserverUrl);\n\nvar _fileFilter = require('./file-filter.js');\n\nvar _fileFilter2 = _interopRequireDefault(_fileFilter);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar empty = function empty() {};\n\nvar errorMap = {\n  1: 'IO_ERROR_SERVER',\n  2: 'FORMAT_ERROR',\n  3: 'FILE_SIZE_ERROR_SERVER',\n  4: 'FILE_TYPE_ERROR_SERVER'\n};\n/**\n * Upload\n */\n\nvar FileUpload = (_temp = _class = function (_Component) {\n  _inherits(FileUpload, _Component);\n\n  function FileUpload(props, context) {\n    _classCallCheck(this, FileUpload);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    var fileList = props.fileList || props.defaultFileList || [];\n    _this.state = {\n      fileList: fileList.map(function (f) {\n        return (0, _normalizeFileItem2['default'])(f);\n      }),\n      dragState: 'drop'\n    };\n    /* eslint-disable */\n\n    ['onFileDrop', 'onStart', 'onSuccess', 'onProgress', 'onError', 'removeFile', 'cancelFile'].map(function (fn) {\n      _this[fn] = _this[fn].bind(_this);\n    });\n    /* eslint-enable */\n\n    return _this;\n  }\n\n  FileUpload.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('fileList' in nextProps) {\n      var fileList = nextProps.fileList;\n\n      if (fileList === undefined) {\n        fileList = [];\n      }\n\n      this.setState({\n        fileList: fileList.map(function (f) {\n          return (0, _normalizeFileItem2['default'])(f);\n        })\n      });\n    }\n  };\n  /**\n    * 文件拖拽处理函数\n    * @param  {Event} e - 拖拽事件\n    * @return {void}\n  */\n\n\n  FileUpload.prototype.onFileDrop = function onFileDrop(e) {\n    if (!this.props.dragable) {\n      return false;\n    }\n\n    this.setState({\n      dragState: e.type\n    });\n  };\n  /**\n    * 上传开始\n    * @param {FileList} files - 文件列表\n    * @return {void}\n  */\n\n\n  FileUpload.prototype.onStart = function onStart(files) {\n    var fileObject = (0, _normalizeFileItem2['default'])(files[0]);\n    fileObject.status = 'uploading';\n    var newFileList = this.state.fileList;\n    newFileList.push(fileObject);\n    this.onChange({\n      file: fileObject,\n      fileList: newFileList\n    });\n  };\n  /**\n   * 上传成功回调\n   * @param  {Object} response - 服务器响应\n   * @param  {File} file - 文件对象\n   * @return {void}\n   */\n\n\n  FileUpload.prototype.onSuccess = function onSuccess(response, file) {\n    var locale = this.props.locale;\n    var fileList = this.state.fileList;\n    /* eslint-disable */\n\n    var targetItem = (0, _getFileItem2['default'])(file, fileList);\n    /* eslint-disable */\n\n    var _props = this.props,\n        fileSite = _props.fileSite,\n        previewImgSize = _props.previewImgSize,\n        formatter = _props.formatter,\n        maxSize = _props.maxSize,\n        multipart = _props.multipart,\n        checkMaxSizeBeforeUpload = _props.checkMaxSizeBeforeUpload;\n\n    if (!checkMaxSizeBeforeUpload && file.size > maxSize) {\n      return this.onError(new Error(locale.error.maxSize), response, file);\n    }\n\n    var data = this.props.data || multipart; // 为了兼容自定义服务器返回的数据格式\n    // 向外提供一个自定义格式化数据的 API\n\n    if (formatter) {\n      response = formatter(response);\n    }\n\n    if (typeof data === 'function') {\n      data = data(file);\n    }\n\n    try {\n      if (typeof response === 'string') {\n        response = JSON.parse(response);\n      }\n    } catch (e) {\n      this.onError(new Error(locale.error.parseJson), response, file);\n      return;\n    }\n\n    if (!response || response.code != '0') {\n      this.onError(new Error(errorMap[response && response.code || '1']), response, file);\n      return;\n    }\n\n    var imgURL = response.imgUrl || response.imgURL;\n    var downloadURL = response.downloadUrl || response.downloadURL; // 如果是走默认的 fileserver 上传\n\n    if (data && data.scene) {\n      imgURL = imgURL || Fileserver.buildUrl({\n        site: fileSite,\n        fileName: response.fs_url,\n        resize: previewImgSize,\n        // 预览图片大小设置为200x200\n        fileProtocol: 'empty',\n        asAttachment: null\n      }); // 下载图片地址\n\n      downloadURL = downloadURL || Fileserver.buildUrl({\n        site: fileSite,\n        fileName: response.fs_url,\n        asAttachment: file.name,\n        fileProtocol: 'empty',\n        resize: null\n      }); // 图片在 `onStart` 已经加入到 `fileList` 中，\n      // 这里需要在成功后用服务器返回的数据改变图片的信息，\n      // 所以需要判断是否已经存在图片元素\n\n      if (targetItem) {\n        (0, _objectAssign2['default'])(targetItem, {\n          fileSavePath: response.fs_url,\n          fileURL: response.url,\n          downloadURL: downloadURL,\n          // 下载地址\n          imgURL: imgURL,\n          // 缩略图地址\n          size: response.size,\n          fileHeight: response.height,\n          fileWidth: response.width,\n          fileMd5: response.hash,\n          status: 'done',\n          response: response\n        });\n        this.onChange({\n          file: targetItem,\n          fileList: fileList\n        });\n      }\n    } else if (targetItem) {\n      // 走自定义服务器上传\n      (0, _objectAssign2['default'])(targetItem, {\n        imgURL: imgURL,\n        // 缩略图地址\n        downloadURL: downloadURL,\n        // 下载地址(可选)\n        size: response.size,\n        // (可选)\n        fileHeight: response.height,\n        // (可选)\n        fileWidth: response.width,\n        // (可选)\n        fileMd5: response.hash,\n        // (可选)\n        status: 'done',\n        response: response\n      });\n      this.onChange({\n        file: targetItem,\n        fileList: fileList\n      });\n    } // 向外暴露的成功回调函数\n\n\n    this.props.onSuccess(response, targetItem);\n  };\n\n  FileUpload.prototype.onProgress = function onProgress(e, file) {\n    var fileList = this.state.fileList;\n    var targetItem = (0, _getFileItem2['default'])(file, fileList);\n\n    if (!targetItem) {\n      return;\n    }\n\n    targetItem.percent = e.percent;\n    this.onChange({\n      event: e,\n      file: targetItem,\n      fileList: fileList\n    });\n  };\n\n  FileUpload.prototype.onError = function onError(error, response, file) {\n    if (!file) {\n      return;\n    }\n\n    var fileList = this.state.fileList;\n    var targetItem = (0, _getFileItem2['default'])(file, fileList);\n\n    if (!targetItem) {\n      // 上传前校验的时候\n      targetItem = (0, _normalizeFileItem2['default'])(file);\n      fileList.push(targetItem);\n    }\n\n    (0, _objectAssign2['default'])(targetItem, {\n      error: error,\n      status: 'error',\n      response: response\n    });\n    this.props.onError(targetItem);\n    this.onChange({\n      file: targetItem,\n      fileList: fileList\n    });\n  };\n\n  FileUpload.prototype.onChange = function onChange(info) {\n    this.setState({\n      fileList: info.fileList\n    }); // 在执行回调时不把 `status = error` 的文件输出\n\n    var infoTemp = (0, _objectAssign2['default'])({}, _extends({}, info, {\n      fileList: (0, _fileFilter2['default'])(info.fileList)\n    }));\n    this.props.onChange(infoTemp); // 通知拖拽组件把dataTransfer清理掉\n\n    this.props.dropEnd(); // 通知拖拽组件最新的图片列表\n\n    this.props.onListChange(info.fileList);\n  };\n  /**\n   * 删除文件\n   * @param {File} file\n   * @return {void}\n   */\n\n\n  FileUpload.prototype.removeFile = function removeFile(file) {\n    file.status = 'removed';\n    this.refs.inner.abort(file); // 删除组件时调用组件的 `abort` 方法中断上传\n\n    var fileList = this.state.fileList;\n    var targetItem = (0, _getFileItem2['default'])(file, fileList);\n    var index = fileList.indexOf(targetItem);\n\n    if (index !== -1) {\n      fileList.splice(index, 1);\n      this.onChange({\n        file: targetItem,\n        fileList: fileList\n      });\n      this.props.onRemove(file, fileList);\n    }\n  };\n  /**\n   * 取消上传\n   * @param {File} file\n   * @return {void}\n   */\n\n\n  FileUpload.prototype.cancelFile = function cancelFile(file) {\n    this.refs.inner.abort(file); // 取消上传时调用组件的 `abort` 方法中断上传\n\n    var fileList = this.state.fileList;\n    var targetItem = (0, _getFileItem2['default'])(file, fileList);\n    var index = fileList.indexOf(targetItem);\n\n    if (index !== -1) {\n      fileList.splice(index, 1);\n      this.onChange({\n        file: targetItem,\n        fileList: fileList\n      });\n    }\n  };\n\n  FileUpload.prototype.render = function render() {\n    var _classNames, _classNames2;\n\n    var _props2 = this.props,\n        listType = _props2.listType,\n        className = _props2.className,\n        locale = _props2.locale,\n        children = _props2.children,\n        style = _props2.style,\n        onChange = _props2.onChange,\n        showUploadList = _props2.showUploadList,\n        checkMaxSizeBeforeUpload = _props2.checkMaxSizeBeforeUpload,\n        others = _objectWithoutProperties(_props2, ['listType', 'className', 'locale', 'children', 'style', 'onChange', 'showUploadList', 'checkMaxSizeBeforeUpload']);\n\n    var cleanOthers = (0, _nextUtil.pickAttrs)(others);\n    var prefix = this.context.prefix || this.props.prefix;\n    var prefixCls = prefix + 'upload';\n    var classnames = (0, _classnames2['default'])((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, className, !!className), _classNames)); // 是否达到最大文件上传数\n\n    var isExceedLimit = this.state.fileList.length >= this.props.limit;\n    var uploadButtonCls = (0, _classnames2['default'])((_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-select', true), _defineProperty(_classNames2, prefixCls + '-drop', true), _defineProperty(_classNames2, prefixCls + '-drop-hover', this.state.dragState === 'dragover'), _defineProperty(_classNames2, prefixCls + '-select-' + listType, true), _defineProperty(_classNames2, prefixCls + '-select-' + listType + '-hovered', !!this.props.triggerHovered), _defineProperty(_classNames2, prefixCls + '-select-' + listType + '-disable', !!this.props.disabled), _defineProperty(_classNames2, prefixCls + '-select-hide', isExceedLimit), _classNames2)); // API `resize` 废弃提醒\n\n    this.props.resize && _nextUtil.log.warning('`resize` is deprecated, don\\'t use it anymore.');\n    this.props.multipart && _nextUtil.log.deprecated('multipart', 'data', 'Upload');\n\n    if (this.props.id) {\n      cleanOthers.id = 'upload_' + this.props.id;\n    }\n\n    var trigger = _react2['default'].createElement('div', {\n      onDrop: this.onFileDrop,\n      onDragOver: this.onFileDrop,\n      onDragLeave: this.onFileDrop,\n      className: uploadButtonCls\n    }, _react2['default'].createElement(_upload2['default'], _extends({}, others, {\n      disabled: isExceedLimit,\n      className: prefixCls + '-select-inner',\n      fileList: this.state.fileList,\n      onStart: this.onStart,\n      onSuccess: this.onSuccess,\n      onProgress: this.onProgress,\n      onError: this.onError,\n      locale: locale,\n      checkMaxSizeBeforeUpload: checkMaxSizeBeforeUpload,\n      ref: 'inner'\n    }), children ? children : _react2['default'].createElement(_nextButton2['default'], {\n      type: 'normal',\n      disabled: isExceedLimit || this.props.disabled\n    }, locale.file.addPhoto)));\n\n    if (listType === 'picture-card') {\n      return _react2['default'].createElement('div', _extends({}, cleanOthers, {\n        className: classnames,\n        style: style\n      }), showUploadList ? _react2['default'].createElement(_uploadList2['default'], {\n        prefix: prefix,\n        locale: locale,\n        listType: listType,\n        fileList: this.state.fileList,\n        onRemove: this.removeFile,\n        onCancel: this.cancelFile,\n        closable: !this.props.disabled\n      }, trigger) : trigger);\n    }\n\n    return _react2['default'].createElement('div', _extends({}, cleanOthers, {\n      className: classnames,\n      style: style\n    }), trigger, showUploadList ? _react2['default'].createElement(_uploadList2['default'], {\n      prefix: prefix,\n      locale: locale,\n      listType: listType,\n      fileList: this.state.fileList,\n      closable: !this.props.disabled,\n      onRemove: this.removeFile,\n      onCancel: this.cancelFile\n    }) : null);\n  };\n\n  return FileUpload;\n}(_react.Component), _class.propTypes = {\n  /**\n   * 样式前缀\n   */\n  prefix: _propTypes2['default'].string.isRequired,\n\n  /**\n   * 必选参数，上传的地址\n   */\n  action: _propTypes2['default'].string,\n\n  /**\n   * 上传文件列表，数据格式请参考\n   */\n  fileList: _propTypes2['default'].array,\n\n  /**\n   * 默认上传文件列表，数据格式请参考\n   */\n  defaultFileList: _propTypes2['default'].array,\n\n  /**\n   * 上传列表的样式\n   * @enumdesc 文字, 图文, 卡片\n   */\n  listType: _propTypes2['default'].oneOf(['text', 'text-image', 'picture-card']),\n\n  /**\n   * 上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }）\n   */\n  data: _propTypes2['default'].oneOfType([_propTypes2['default'].object, _propTypes2['default'].func]),\n  multipart: _propTypes2['default'].oneOfType([_propTypes2['default'].object, _propTypes2['default'].func]),\n\n  /**\n   * 数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)\n   */\n  formatter: _propTypes2['default'].func,\n\n  /**\n   * 选择上传的文件的最大尺寸（单位：Byte）\n   */\n  maxSize: _propTypes2['default'].number,\n\n  /**\n   * 是否在上传前校验maxsize\n   */\n  checkMaxSizeBeforeUpload: _propTypes2['default'].bool,\n\n  /**\n   * 语言种类，支持 `en-us`、`zh-cn`、`zh-tw`\n   */\n  language: _propTypes2['default'].string,\n\n  /**\n   * 自定义语言包，会与默认提供的语言包做合并操作，[详细参考](http://gitlab.alibaba-inc.com/next/upload/blob/master/src/locale/index.js)\n   */\n  locale: _propTypes2['default'].object,\n\n  /**\n   * 最大文件上传个数\n   */\n  limit: _propTypes2['default'].number,\n\n  /**\n   * 可选参数，是否支持拖拽上传，`ie10+` 支持。\n   */\n  dragable: _propTypes2['default'].bool,\n\n  /**\n   * 可选参数，是否禁用上传功能\n   */\n  disabled: _propTypes2['default'].bool,\n\n  /**\n   * 是否显示上传列表\n   */\n  showUploadList: _propTypes2['default'].bool,\n\n  /**\n   * 上传文件改变时的状态\n   * @param {Object} info 文件事件对象\n   */\n  onChange: _propTypes2['default'].func,\n\n  /**\n   * 可选参数，上传成功回调函数，参数为请求下响应信息以及文件\n   */\n  onSuccess: _propTypes2['default'].func,\n\n  /**\n   * 移除文件回调函数，详见 [onRemove](#onRemove)\n   */\n  onRemove: _propTypes2['default'].func,\n\n  /**\n   * 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件\n   */\n  onError: _propTypes2['default'].func,\n  dropEnd: _propTypes2['default'].func,\n  onListChange: _propTypes2['default'].func,\n  triggerHovered: _propTypes2['default'].bool,\n  fileSite: _propTypes2['default'].oneOf(['alibaba', 'alibaba_v2', 'aliexpress', 'itao', 'taobao']),\n  previewImgSize: _propTypes2['default'].string,\n\n  /**\n   * 自定义class\n   */\n  className: _propTypes2['default'].string,\n\n  /**\n   * 自定义内联样式\n   */\n  style: _propTypes2['default'].object,\n\n  /**\n   * 子元素\n   */\n  children: _propTypes2['default'].node,\n  //======= 以下props完全透传 =====//\n\n  /**\n   * 可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept)\n   */\n  accept: _propTypes2['default'].string,\n\n  /**\n   * 可选参数，设置上传的请求头部\n   */\n  headers: _propTypes2['default'].object,\n\n  /**\n   * 传递给服务器的文件参数\n   */\n  name: _propTypes2['default'].string,\n\n  /**\n   * 可选参数，是否允许请求携带 cookie\n   */\n  withCredentials: _propTypes2['default'].bool,\n\n  /**\n   * 可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传\n   */\n  beforeUpload: _propTypes2['default'].func\n}, _class.defaultProps = {\n  prefix: 'next-',\n  action: '//kfupload.alibaba.com/mupload',\n  listType: 'text',\n  fileSite: 'alibaba_v2',\n  previewImgSize: '_200x200',\n  dragable: true,\n  maxSize: Infinity,\n  checkMaxSizeBeforeUpload: false,\n  showUploadList: true,\n  defaultFileList: [],\n  onChange: empty,\n  onSuccess: empty,\n  onRemove: empty,\n  onError: empty,\n  dropEnd: empty,\n  onListChange: empty\n}, _class.contextTypes = {\n  prefix: _propTypes2['default'].string\n}, _temp);\nFileUpload.displayName = 'FileUpload';\nexports['default'] = (0, _nextLocaleProvider2['default'])(FileUpload);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}