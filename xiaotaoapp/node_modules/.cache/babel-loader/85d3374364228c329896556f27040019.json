{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _reactDom = require('react-dom');\n\nvar _trackHelper = require('./trackHelper.js');\n\nvar EventHandlers = {\n  // Event handler for previous and next\n  changeSlide: function changeSlide(options) {\n    var previousInt = void 0,\n        slideOffset = void 0,\n        targetSlide = void 0;\n    var unevenOffset = this.state.slideCount % this.props.slidesToScroll !== 0;\n    var indexOffset = unevenOffset ? 0 : (this.state.slideCount - this.state.currentSlide) % this.props.slidesToScroll;\n\n    if (options.message === 'previous') {\n      slideOffset = indexOffset === 0 ? this.props.slidesToScroll : this.props.slidesToShow - indexOffset;\n      targetSlide = this.state.currentSlide - slideOffset;\n\n      if (this.props.lazyLoad) {\n        previousInt = targetSlide;\n        targetSlide = previousInt === -1 ? this.state.slideCount - 1 : previousInt;\n      }\n    } else if (options.message === 'next') {\n      slideOffset = indexOffset === 0 ? this.props.slidesToScroll : indexOffset;\n      targetSlide = this.state.currentSlide + slideOffset;\n\n      if (this.props.lazyLoad) {\n        targetSlide = (this.state.currentSlide + this.props.slidesToScroll) % this.state.slideCount + indexOffset;\n      }\n    } else if (options.message === 'dots' || options.message === 'children') {\n      // Click on dots\n      targetSlide = options.index * options.slidesToScroll;\n\n      if (targetSlide === options.currentSlide) {\n        return;\n      }\n    } else if (options.message === 'index') {\n      targetSlide = options.index;\n\n      if (targetSlide === options.currentSlide) {\n        return;\n      }\n    }\n\n    this.slideHandler(targetSlide);\n  },\n  // Accessiblity handler for previous and next\n  keyHandler: function keyHandler(e) {\n    //Dont slide if the cursor is inside the form fields and arrow keys are pressed\n    if (!e.target.tagName.match('TEXTAREA|INPUT|SELECT')) {\n      if (e.keyCode === 37 && this.props.accessibility === true) {\n        this.changeSlide({\n          message: this.props.rtl === true ? 'next' : 'previous'\n        });\n      } else if (e.keyCode === 39 && this.props.accessibility === true) {\n        this.changeSlide({\n          message: this.props.rtl === true ? 'previous' : 'next'\n        });\n      }\n    }\n  },\n  // Focus on selecting a slide (click handler on track)\n  selectHandler: function selectHandler(options) {\n    this.changeSlide(options);\n  },\n  swipeStart: function swipeStart(e) {\n    if (this.props.swipe === false || 'ontouchend' in document && this.props.swipe === false) {\n      return;\n    } else if (this.props.draggable === false && e.type.indexOf('mouse') !== -1) {\n      return;\n    }\n\n    var posX = e.touches !== undefined ? e.touches[0].pageX : e.clientX;\n    var posY = e.touches !== undefined ? e.touches[0].pageY : e.clientY;\n    this.setState({\n      dragging: true,\n      touchObject: {\n        startX: posX,\n        startY: posY,\n        curX: posX,\n        curY: posY\n      }\n    });\n  },\n  swipeMove: function swipeMove(e) {\n    if (!this.state.dragging) {\n      return;\n    }\n\n    if (this.state.animating) {\n      return;\n    }\n\n    var touchObject = this.state.touchObject;\n    var curLeft = (0, _trackHelper.getTrackLeft)(_extends({\n      slideIndex: this.state.currentSlide,\n      trackRef: this.refs.track\n    }, this.props, this.state));\n    touchObject.curX = e.touches ? e.touches[0].pageX : e.clientX;\n    touchObject.curY = e.touches ? e.touches[0].pageY : e.clientY;\n    touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));\n    var positionOffset = (this.props.rtl === false ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);\n    var currentSlide = this.state.currentSlide;\n    var dotCount = Math.ceil(this.state.slideCount / this.props.slidesToScroll);\n    var swipeDirection = this.swipeDirection(this.state.touchObject);\n    var touchSwipeLength = touchObject.swipeLength;\n\n    if (this.props.infinite === false) {\n      if (currentSlide === 0 && swipeDirection === 'right' || currentSlide + 1 >= dotCount && swipeDirection === 'left') {\n        touchSwipeLength = touchObject.swipeLength * this.props.edgeFriction;\n\n        if (this.state.edgeDragged === false && this.props.edgeEvent) {\n          this.props.edgeEvent(swipeDirection);\n          this.setState({\n            edgeDragged: true\n          });\n        }\n      }\n    }\n\n    if (this.state.swiped === false && this.props.swipeEvent) {\n      this.props.swipeEvent(swipeDirection);\n      this.setState({\n        swiped: true\n      });\n    }\n\n    var swipeLeft = curLeft + touchSwipeLength * positionOffset;\n    this.setState({\n      touchObject: touchObject,\n      swipeLeft: swipeLeft,\n      trackStyle: (0, _trackHelper.getTrackCSS)(_extends({\n        left: swipeLeft\n      }, this.props, this.state))\n    });\n\n    if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * 0.8) {\n      return;\n    }\n\n    if (touchObject.swipeLength > 4) {\n      e.preventDefault();\n    }\n  },\n  getNavigableIndexes: function getNavigableIndexes() {\n    var max = void 0;\n    var breakPoint = 0;\n    var counter = 0;\n    var indexes = [];\n\n    if (!this.props.infinite) {\n      max = this.state.slideCount;\n    } else {\n      breakPoint = this.props.slidesToShow * -1;\n      counter = this.props.slidesToShow * -1;\n      max = this.state.slideCount * 2;\n    }\n\n    while (breakPoint < max) {\n      indexes.push(breakPoint);\n      breakPoint = counter + this.props.slidesToScroll;\n      counter += this.props.slidesToScroll <= this.props.slidesToShow ? this.props.slidesToScroll : this.props.slidesToShow;\n    }\n\n    return indexes;\n  },\n  checkNavigable: function checkNavigable(index) {\n    var navigables = this.getNavigableIndexes();\n    var prevNavigable = 0;\n\n    if (index > navigables[navigables.length - 1]) {\n      index = navigables[navigables.length - 1];\n    } else {\n      for (var n in navigables) {\n        if (index < navigables[n]) {\n          index = prevNavigable;\n          break;\n        }\n\n        prevNavigable = navigables[n];\n      }\n    }\n\n    return index;\n  },\n  getSlideCount: function getSlideCount() {\n    var _this = this;\n\n    var centerOffset = this.props.centerMode ? this.state.slideWidth * Math.floor(this.props.slidesToShow / 2) : 0;\n\n    if (this.props.swipeToSlide) {\n      var swipedSlide = void 0;\n      var slickList = (0, _reactDom.findDOMNode)(this.list);\n      var slides = slickList.querySelectorAll(this.props.prefix + 'slick-slide');\n      Array.from(slides).every(function (slide) {\n        if (!_this.props.vertical) {\n          if (slide.offsetLeft - centerOffset + _this.getWidth(slide) / 2 > _this.state.swipeLeft * -1) {\n            swipedSlide = slide;\n            return false;\n          }\n        } else if (slide.offsetTop + _this.getHeight(slide) / 2 > _this.state.swipeLeft * -1) {\n          swipedSlide = slide;\n          return false;\n        }\n\n        return true;\n      });\n      var slidesTraversed = Math.abs(swipedSlide.dataset.index - this.state.currentSlide) || 1;\n      return slidesTraversed;\n    } else {\n      return this.props.slidesToScroll;\n    }\n  },\n  swipeEnd: function swipeEnd(e) {\n    if (!this.state.dragging) {\n      if (this.props.swipe) {\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    var touchObject = this.state.touchObject;\n    var minSwipe = this.state.listWidth / this.props.touchThreshold;\n    var swipeDirection = this.swipeDirection(touchObject);\n\n    if (this.props.verticalSwiping) {\n      minSwipe = this.state.listHeight / this.props.touchThreshold;\n    } // reset the state of touch related state variables.\n\n\n    this.setState({\n      dragging: false,\n      edgeDragged: false,\n      swiped: false,\n      swipeLeft: null,\n      touchObject: {}\n    });\n\n    if (!touchObject.swipeLength) {\n      return;\n    }\n\n    if (touchObject.swipeLength > minSwipe) {\n      e.preventDefault();\n      var slideCount = void 0;\n      var newSlide = void 0;\n\n      switch (swipeDirection) {\n        case 'left':\n        case 'down':\n          newSlide = this.state.currentSlide + this.getSlideCount();\n          slideCount = this.props.swipeToSlide ? this.checkNavigable(newSlide) : newSlide;\n          this.setState({\n            currentDirection: 0\n          });\n          break;\n\n        case 'right':\n        case 'up':\n          newSlide = this.state.currentSlide - this.getSlideCount();\n          slideCount = this.props.swipeToSlide ? this.checkNavigable(newSlide) : newSlide;\n          this.setState({\n            currentDirection: 1\n          });\n          break;\n\n        default:\n          slideCount = this.state.currentSlide;\n      }\n\n      this.slideHandler(slideCount);\n    } else {\n      // Adjust the track back to it's original position.\n      var currentLeft = (0, _trackHelper.getTrackLeft)(_extends({\n        slideIndex: this.state.currentSlide,\n        trackRef: this.track\n      }, this.props, this.state));\n      this.setState({\n        trackStyle: (0, _trackHelper.getTrackAnimateCSS)(_extends({\n          left: currentLeft\n        }, this.props, this.state))\n      });\n    }\n  },\n  onInnerSliderEnter: function onInnerSliderEnter() {\n    if (this.props.autoplay && this.props.pauseOnHover) {\n      this.pause();\n    }\n  },\n  onInnerSliderLeave: function onInnerSliderLeave() {\n    if (this.props.autoplay && this.props.pauseOnHover) {\n      this.autoPlay();\n    }\n  }\n};\nexports['default'] = EventHandlers;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}