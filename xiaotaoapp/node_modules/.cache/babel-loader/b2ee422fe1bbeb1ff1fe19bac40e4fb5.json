{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = undefined;\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _helper = require('../util/helper.js');\n\nvar _helper2 = _interopRequireDefault(_helper);\n\nvar _index = require('../group/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar Navigation = (_temp = _class = function (_React$Component) {\n  _inherits(Navigation, _React$Component);\n\n  Navigation.prototype.getChildContext = function getChildContext() {\n    var props = this.props,\n        context = this.context;\n    return {\n      // 最顶层navigation对象\n      rootNavigation: context.rootNavigation || this,\n      // 顶层已经初始化\n      rootMount: context.rootMount || true,\n      // 最近navigation对象\n      navigation: this,\n      // Tree分支缩进\n      branchPadding: context.branchPadding || props.branchPadding,\n      // 类名前缀\n      prefix: context.prefix || props.prefix,\n      // navigation 类型\n      type: context.type || props.type,\n      // Tree 分支图标\n      leaf: context.leaf || props.leaf,\n      // 是否显示分支图标\n      hasLeaf: context.hasLeaf || props.hasLeaf,\n      // 是否暴露选择样式\n      selectedStyle: context.selectedStyle || props.selectedStyle,\n      // 激活条位置\n      activeDirection: context.activeDirection || props.activeDirection,\n      // navigation失去焦点收起菜单\n      isBlurDispear: context.isBlurDispear || props.isBlurDispear || props.blurHide,\n      // 子组件是否阻止事件冒泡\n      isStopPropagation: context.isStopPropagation || props.isStopPropagation,\n      // 子组件内容排版\n      contentAlign: context.contentAlign || props.contentAlign || props.menuAlign,\n      // navigation 标题\n      title: context.title || props.title,\n      // 触发类型\n      trigger: context.trigger || props.trigger,\n      // 点击处理函数\n      onItemClick: context.onItemClick || this.onItemClick,\n      // 鼠标进入处理函数\n      onItemMouseEnter: context.onItemMouseEnter || this.onItemMouseEnter,\n      // 鼠标移动处理函数\n      onItemMouseMove: context.onItemMouseMove || this.onItemMouseMove,\n      // 鼠标离开处理函数\n      onItemMouseLeave: context.onItemMouseLeave || this.onItemMouseLeave,\n      // Item选中处理函数\n      onItemSelect: context.onItemSelect || this.onItemSelect,\n      // Tree折叠处理函数\n      onItemFold: context.onItemFold || this.onItemFold,\n      // Tree展开处理函数\n      onItemUnFold: context.onItemUnFold || this.onItemUnFold,\n      // 或者、设置顶级state函数\n      getRootState: context.getRootState || this.keepState,\n      // 默认选中\n      selectedKey: context.selectedKey || this.props.selectedKey,\n      // 默认打开\n      openedKeys: context.openedKeys || this.props.openedKeys,\n      // 手风琴展开\n      accordion: context.accordion || this.props.accordion || false,\n      // 嵌套层级\n      branchLevel: context.branchLevel || this.props.branchLevel || 1,\n      // 更多菜单\n      morePositionKey: context.morePositionKey || this.props.morePositionKey || null,\n      // 更多\n      moreText: context.moreText || this.props.moreText\n    };\n  };\n\n  function Navigation(props, context) {\n    _classCallCheck(this, Navigation);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    var prefix = context.prefix,\n        type = context.type;\n    prefix = (prefix || props.prefix) + 'navigation';\n    type = type || props.type;\n    _this.navigationClassName = prefix;\n    _this.directionClassName = prefix + '-' + _this.getDirectionClassName();\n    _this.typeClassName = prefix + '-' + type;\n    _this.rootClassName = prefix + '-root';\n    _this.subClassName = prefix + '-sub';\n    _this.state = {\n      selectedKey: _this.props.selectedKey || null\n    };\n    _this.getRootState = _this.getRootState.bind(_this);\n    return _this;\n  }\n\n  Navigation.prototype.componentDidMount = function componentDidMount() {\n    this.isMount = true;\n  };\n\n  Navigation.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var state = {};\n\n    if (nextProps.selectedKey) {\n      state.selectedKey = nextProps.selectedKey;\n    }\n\n    this.setState(state);\n  };\n  /**\n   * 判断DOM对象是否在navigation内\n   * @method inNavigation\n   * @return {Boolean}       返回true 或者 false\n   */\n\n\n  Navigation.prototype.inNavigation = function inNavigation(dom) {\n    var content = this.refs.navigation,\n        hasCmp = content.compareDocumentPosition,\n        contain = content[hasCmp ? 'compareDocumentPosition' : 'contains'],\n        value = hasCmp ? 20 : true;\n    return dom === content || contain.call(content, dom) === value;\n  };\n  /**\n   * 判断DOM对象是否在navigation内\n   * @method keepState\n   * @return {*}\n   * 1、当value === undefined，如果有key，则返回key状态；如果没有则返回state对象\n   * 2、如果value !== undefined，则设置值\n   */\n\n\n  Navigation.prototype.getRootState = function getRootState() {\n    return this.state;\n  };\n  /**\n   * 获取组件direction值，根据type修正direction值\n   * @method getDirectionClassName\n   * @return {String}\n   */\n\n\n  Navigation.prototype.getDirectionClassName = function getDirectionClassName() {\n    var _props = this.props,\n        direction = _props.direction,\n        type = _props.type;\n    type = this.context.type || this.props.type;\n\n    if (direction) {\n      return direction === 'hoz' ? 'horizontal' : 'vertical';\n    }\n\n    if (type === 'text' || type === 'line' || type === 'filling' || type === undefined) {\n      return 'horizontal';\n    }\n\n    return 'vertical';\n  };\n  /**\n   * 处理Item点击事件\n   * @method onItemClick\n   */\n\n\n  Navigation.prototype.onItemClick = function onItemClick() {\n    var argv = [].slice.call(arguments);\n    argv.splice(2, 0, this);\n    this.props.onClick.apply(this, argv);\n  };\n  /**\n   * 调用属性传递的onSelect事件\n   * @method onItemSelect\n   */\n\n\n  Navigation.prototype.onItemSelect = function onItemSelect() {\n    var argv = [].slice.call(arguments);\n    argv.splice(2, 0, this);\n    this.props.onSelect.apply(this, argv);\n  };\n  /**\n   * 调用属性传递的onMouseEnter事件\n   * @method onItemMouseEnter\n   */\n\n\n  Navigation.prototype.onItemMouseEnter = function onItemMouseEnter() {\n    var argv = [].slice.call(arguments);\n    argv.splice(2, 0, this);\n    this.props.onMouseEnter.apply(this, argv);\n  };\n  /**\n   * 调用属性传递的onMouseLeave事件\n   * @method onItemMouseLeave\n   */\n\n\n  Navigation.prototype.onItemMouseLeave = function onItemMouseLeave() {\n    var argv = [].slice.call(arguments);\n    argv.splice(2, 0, this);\n    this.props.onMouseLeave.apply(this, argv);\n  };\n  /**\n   * 调用属性传递的onMouseMove事件\n   * @method onItemMouseMove\n   */\n\n\n  Navigation.prototype.onItemMouseMove = function onItemMouseMove() {\n    var argv = [].slice.call(arguments);\n    argv.splice(2, 0, this);\n    this.props.onMouseMove.apply(this, argv);\n  };\n  /**\n   * 克隆子组件函数;过滤掉undefined，null情况\n   * @method cloneChildElement\n   * @return {Array}\n   */\n\n\n  Navigation.prototype.cloneChildElement = function cloneChildElement(groupChildren) {\n    var _this2 = this;\n\n    var children = this.props.children;\n    return _react2['default'].Children.map(groupChildren || children, function (child, index) {\n      var key = void 0,\n          type = void 0,\n          props = void 0;\n\n      if (child === undefined || child === null) {\n        return child;\n      }\n\n      key = child.props.itemid || child.key || index;\n      type = child.type;\n\n      if (type === _index2['default']) {\n        return _react2['default'].createElement(_index2['default'], child.props, _this2.cloneChildElement(child.props.children));\n      }\n\n      props = type.componentMark ? _this2.cloneChildProperty(child, key) : child.props;\n      return _react2['default'].cloneElement(child, props);\n    });\n  };\n  /**\n   * 克隆item属性数据;根据状态处理props对应的值\n   * @method cloneChildProperty\n   * @return {Object}\n   */\n\n\n  Navigation.prototype.cloneChildProperty = function cloneChildProperty(child, key) {\n    var state = void 0,\n        context = this.context,\n        isMount = this.isMount,\n        navigation = context.rootNavigation || this,\n        hasChildren = !!child.props.children,\n        hasSelectedKey = context.selectedKey || this.props.selectedKey,\n        selected = void 0;\n    state = navigation.getRootState ? navigation.getRootState() : this.state;\n\n    if (!isMount) {\n      if (!hasSelectedKey) {\n        if (typeof child.props.selected === 'string') {\n          if (child.props.selected === 'true') {\n            state.selectedKey = key;\n          }\n        } else {\n          if (child.props.selected) {\n            state.selectedKey = key;\n          }\n        }\n      }\n    }\n\n    if (state.selectedKey === key) {\n      selected = true;\n    }\n\n    return {\n      key: key,\n      itemid: key,\n      selected: selected,\n      hasChildren: hasChildren ? this.context.type || this.props.type : undefined,\n      hasLeaf: hasChildren\n    };\n  };\n  /**\n   * navigation传递title;自动嵌套<Group />\n   * @method renderGroup\n   * @return {Object}\n   */\n\n\n  Navigation.prototype.renderGroup = function renderGroup() {\n    var title = this.props.title;\n    var children = this.cloneChildElement();\n\n    if (title) {\n      return _react2['default'].createElement(_index2['default'], {\n        title: title\n      }, children);\n    }\n\n    return children;\n  };\n\n  Navigation.prototype.render = function render() {\n    var _classNames;\n\n    var _props2 = this.props,\n        className = _props2.className,\n        style = _props2.style;\n    var rootNavigation = this.context.rootNavigation;\n    var classes = (0, _classnames2['default'])((_classNames = {}, _defineProperty(_classNames, this.navigationClassName, true), _defineProperty(_classNames, this.directionClassName, true), _defineProperty(_classNames, this.typeClassName, true), _defineProperty(_classNames, undefined === rootNavigation ? this.rootClassName : this.subClassName, true), _defineProperty(_classNames, className, !!className), _classNames));\n    return _react2['default'].createElement('ul', {\n      style: style,\n      className: classes,\n      ref: 'navigation'\n    }, this.renderGroup());\n  };\n\n  return Navigation;\n}(_react2['default'].Component), _class.childContextTypes = _helper2['default'].propTypes, _class.contextTypes = _helper2['default'].propTypes, _class.propTypes = _helper2['default'].propTypes, _class.componentMark = 'navigation', _temp);\nNavigation.displayName = 'Navigation';\nNavigation.defaultProps = {\n  prefix: 'next-',\n  type: 'text',\n  leaf: 'arrow-down',\n  contentAlign: 'center',\n  trigger: 'hover',\n  title: null,\n  activeDirection: null,\n  selectedStyle: true,\n  hasLeaf: true,\n  isStopPropagation: true,\n  isBlurDispear: true,\n  branchPadding: 20,\n  branchLevel: 0,\n  morePositionKey: null,\n  moreText: '更多'\n};\n['onClick', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onSelect', 'onFold', 'onUnFold'].forEach(function (name) {\n  return Navigation.defaultProps[name] = _helper2['default'].empty;\n});\nexports['default'] = Navigation;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}