{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = undefined;\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar Container = (_temp = _class = function (_React$Component) {\n  _inherits(Container, _React$Component);\n\n  function Container() {\n    _classCallCheck(this, Container);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Container.prototype.getPrefix = function getPrefix() {\n    return this.context.prefix || this.props.prefix;\n  };\n  /**\n   * 获取当前组件的父节点的实例\n   */\n\n\n  Container.prototype.getParent = function getParent() {\n    return this.props.parent;\n  };\n  /**\n   * 获取当前组件的根节点\n   */\n\n\n  Container.prototype.getRoot = function getRoot() {\n    var instance = this.props.parent;\n\n    while (instance.props.parent) {\n      instance = instance.props.parent;\n    }\n\n    return instance;\n  };\n  /**\n   * 为child建立和当前实例的父子级关系\n   * @param child {ReactElement}\n   */\n\n\n  Container.prototype.addRelation = function addRelation(child) {\n    return _react2['default'].cloneElement(child, {\n      parent: this\n    });\n  };\n  /**\n   * 根据type获取父级的实例\n   * @param type {Class}\n   */\n\n\n  Container.prototype.getParentBy = function getParentBy(func) {\n    var instance = this.props.parent,\n        result = func(instance) ? [instance] : [];\n\n    while (instance.props.parent) {\n      instance = instance.props.parent;\n\n      if (func(instance)) {\n        result.push(instance);\n      }\n    }\n\n    return result;\n  };\n\n  Container.prototype.getParentByFlag = function getParentByFlag(flag) {\n    return this.getParentBy(function (inc) {\n      return inc.constructor[flag];\n    });\n  };\n\n  Container.prototype.getParentByType = function getParentByType(type) {\n    return this.getParentBy(function (inc) {\n      return inc instanceof type;\n    });\n  };\n  /**\n   * 获取当前组件的孩子节点的实例\n   */\n\n\n  Container.prototype.getChildrenInc = function getChildrenInc() {\n    var _this2 = this;\n\n    return Object.keys(this.refs).map(function (key) {\n      return _this2.refs[key];\n    });\n  };\n  /**\n   * 根据类型获取当前组件的孩子节点的实例\n   * @param type {Class}\n   */\n\n\n  Container.prototype.getChildrenIncByType = function getChildrenIncByType(type) {\n    return this.getChildrenIncBy(function (child) {\n      return child instanceof type;\n    });\n  };\n\n  Container.prototype.getChildrenIncByFlag = function getChildrenIncByFlag(flag) {\n    return this.getChildrenIncBy(function (child) {\n      return child.constructor[flag];\n    });\n  };\n\n  Container.prototype.getChildrenIncBy = function getChildrenIncBy(func) {\n    var result = [],\n        loop = function loop(children) {\n      children.forEach(function (child) {\n        if (child.getChildrenInc) {\n          loop(child.getChildrenInc());\n        }\n\n        result.push(child);\n      });\n    };\n\n    loop(this.getChildrenInc());\n    return result.filter(func);\n  };\n  /**\n   * 获取当前组件的孩子节点\n   * @return {Array<ReactElement>}\n   */\n\n\n  Container.prototype.getChildren = function getChildren() {\n    return this.props.children;\n  };\n  /**\n   * 根据类型获取当前组件的孩子节点\n   * @param type {Class}\n   * @return {Array<ReactElement>}\n   */\n\n\n  Container.prototype.getChildrenByType = function getChildrenByType(type) {\n    return this.getChildrenBy(function (child) {\n      return child.type === type;\n    });\n  };\n\n  Container.prototype.getChildrenByFlag = function getChildrenByFlag(flag) {\n    return this.getChildrenBy(function (child) {\n      return child.type && child.type[flag];\n    });\n  };\n\n  Container.prototype.getChildrenBy = function getChildrenBy(func) {\n    var result = [],\n        loop = function loop(children) {\n      _react.Children.forEach(children, function (child) {\n        if (child.props && child.props.children) {\n          loop(child.props.children);\n        }\n\n        result.push(child);\n      });\n    };\n\n    loop(this.props.children);\n    return result.filter(func);\n  };\n\n  return Container;\n}(_react2['default'].Component), _class.propTypes = {\n  prefix: _propTypes2['default'].string,\n  parent: _propTypes2['default'].any,\n  children: _propTypes2['default'].any\n}, _temp);\nContainer.displayName = 'Container';\nexports['default'] = Container;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}