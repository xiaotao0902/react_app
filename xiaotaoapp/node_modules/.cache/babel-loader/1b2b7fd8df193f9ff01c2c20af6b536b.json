{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _item = require('./item.js');\n\nvar _item2 = _interopRequireDefault(_item);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar Tree = function (_Item) {\n  _inherits(Tree, _Item);\n\n  function Tree(props, context) {\n    _classCallCheck(this, Tree);\n\n    var _this = _possibleConstructorReturn(this, _Item.call(this, props, context));\n\n    var prefix = context.prefix + 'navigation';\n    _this.openedClassName = prefix + '-item-opened';\n    _this.leafAtFrontClassName = prefix + '-item-front';\n    _this.treeTitleClassName = prefix + '-item-tree-title';\n    _this.activeDirectionClassName = prefix + '-item-selected';\n    _this.state = {\n      opened: _this.props.opened\n    };\n    return _this;\n  }\n\n  Tree.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('opened' in nextProps) {\n      this.setState({\n        opened: nextProps.opened\n      });\n    }\n  }; // 处理tree触发click事件函数\n  // 根据是否有hasChildren属性判断是select事件还是fold/unfold事件\n\n\n  Tree.prototype.onClick = function onClick(e) {\n    var _props = this.props,\n        hasChildren = _props.hasChildren,\n        onClick = _props.onClick,\n        onSelect = _props.onSelect,\n        onFold = _props.onFold,\n        onUnFold = _props.onUnFold,\n        selected = _props.selected,\n        selectedStyle = _props.selectedStyle,\n        itemid = _props.itemid;\n    var context = this.context,\n        prefix = context.prefix,\n        navigation = context.navigation,\n        rootNavigation = context.rootNavigation,\n        accordion = context.accordion,\n        argv = [itemid, this].concat([].slice.call(arguments)),\n        index = void 0,\n        cls = e.target.className;\n\n    if (typeof cls === 'string') {\n      if (cls.indexOf(prefix + 'navigation-item-leaf-icon') === -1) {\n        onClick.apply(this, argv);\n        context.onItemClick.apply(context.rootNavigation, argv);\n      }\n    }\n\n    if (hasChildren === 'tree') {\n      this.setState({\n        opened: !this.state.opened\n      });\n\n      if (this.state.opened) {\n        onFold.apply(this, argv);\n        context.onItemFold.apply(context.rootNavigation, argv); // 手风琴逻辑\n\n        if (accordion) {\n          if (navigation) {\n            if (navigation.state.openedKey === itemid) {\n              navigation.state.openedKey = null;\n            }\n          }\n        }\n      } else {\n        // 手风琴逻辑\n        if (accordion) {\n          if (navigation) {\n            if (navigation.state.openedKey === itemid) {\n              navigation.state.openedKey = null;\n            } else {\n              if (navigation.state.openedKey) {\n                index = rootNavigation.state.openedKeys.indexOf(navigation.state.openedKey);\n\n                if (index > -1) {\n                  rootNavigation.state.openedKeys.splice(index, 1);\n                  navigation.state.openedKey = itemid;\n                }\n              } else {\n                navigation.state.openedKey = itemid;\n              }\n            }\n          }\n        }\n\n        onUnFold.apply(this, argv);\n        context.onItemUnFold.apply(context.rootNavigation, argv);\n      }\n    } else {\n      if (!selected) {\n        onSelect.apply(this, argv);\n\n        if (selectedStyle) {\n          context.onItemSelect.apply(context.rootNavigation, argv);\n        }\n      }\n    }\n\n    e.stopPropagation();\n  }; // 渲染子组件图标函数\n\n\n  Tree.prototype.renderLeafIcon = function renderLeafIcon() {\n    var hasChildren = this.props.hasChildren;\n    var cmp = void 0;\n\n    if (hasChildren) {\n      cmp = _Item.prototype.renderLeafIcon.call(this);\n\n      if (cmp) {\n        return _react2['default'].cloneElement(cmp, {\n          onClick: function onClick(e) {\n            e.preventDefault();\n          }\n        });\n      }\n    }\n  };\n\n  Tree.prototype.render = function render() {\n    var _classNames;\n\n    var _props2 = this.props,\n        leafAtFront = _props2.leafAtFront,\n        selected = _props2.selected,\n        hasChildren = _props2.hasChildren;\n    var activeDirection = this.props.activeDirection;\n    var context = this.context,\n        activeClassName = void 0;\n    activeDirection = activeDirection || context.activeDirection;\n    activeClassName = this.activeDirectionClassName + '-' + activeDirection;\n    var name = (0, _classnames2['default'])((_classNames = {}, _defineProperty(_classNames, this.selectedClassName, selected), _defineProperty(_classNames, this.openedClassName, this.state.opened), _defineProperty(_classNames, activeClassName, activeDirection && selected), _defineProperty(_classNames, this.leafAtFrontClassName, leafAtFront), _defineProperty(_classNames, this.treeTitleClassName, hasChildren), _classNames));\n    return _Item.prototype.render.call(this, name);\n  };\n\n  return Tree;\n}(_item2['default']);\n\nexports['default'] = Tree;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}