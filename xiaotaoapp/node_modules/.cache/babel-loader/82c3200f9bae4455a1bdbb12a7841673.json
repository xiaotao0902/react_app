{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _nextMoment = require('../../../next-moment/lib/index.js');\n\nvar _nextMoment2 = _interopRequireDefault(_nextMoment);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n/*eslint-disable no-useless-escape */\n\n\nvar extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\nvar basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\nfunction isFunction(obj) {\n  return !!(obj && obj.constructor && obj.call && obj.apply);\n}\n\nfunction isString(str) {\n  return typeof str === 'string';\n}\n\nfunction isISODate(str) {\n  if (isString(str)) {\n    var match = extendedIsoRegex.exec(str) || basicIsoRegex.exec(str); // 这里检测强制规范\n\n    if (match && match.length && match[2] === 'T' && match[4] === 'Z') {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * 格式化日期值为目标格式的字符串\n * @param {Object} dateObject 日期对象\n * @param {String|Function} format 格式字符串或格式函数\n */\n\n\nfunction formatDate(dateObject, format) {\n  if (isFunction(format)) {\n    return format(dateObject);\n  }\n\n  return (0, _nextMoment2['default'])(dateObject).format(format);\n}\n/**\n * 构造自定义 CalendarDate 对象\n * @param {Object} value 被 moment 格式化后的日期值 { _d, _isUTC, _isValid, _locale, ... }\n * @return {Object} 格式化后的 Calendar 日期对象\n */\n\n\nfunction getCalendarDate(value) {\n  if (!value.isValid()) {\n    return {};\n  }\n\n  return {\n    timestamp: value.valueOf(),\n    year: value.year(),\n    month: value.month(),\n    date: value.date(),\n    week: value.isoWeekday(),\n    valueOf: function valueOf() {\n      return value.valueOf();\n    }\n  };\n}\n\nvar utils = {\n  isFunction: isFunction,\n  // mixin object props to target\n  mixin: function mixin(target, object) {\n    for (var key in object) {\n      if (Object.prototype.hasOwnProperty.call(object, key)) {\n        target[key] = object[key];\n      }\n    }\n\n    return target;\n  },\n  filterObject: function filterObject(obj) {\n    for (var key in obj) {\n      if (obj[key] === undefined) {\n        delete obj[key];\n      }\n    }\n\n    return obj;\n  },\n  getCalendarDate: getCalendarDate,\n\n  /**\n   * 判断输入值是否是有效的 CalendarDate 对象\n   * @param {Object} calendarDate  输入日期对象\n   * @param {Function} disabledDateFn 判断日期是否是禁用日期的函数\n   */\n  isValidCalendarDate: function isValidCalendarDate(calendarDate, disabledDateFn) {\n    if (isFunction(disabledDateFn)) {\n      return !disabledDateFn(calendarDate);\n    }\n\n    return true;\n  },\n\n  /**\n   * 获取模糊匹配和精确匹配日期的正则表达式\n   * @param {Array|String} formater format 数组\n   * @return {Object} { fuzzy, exact }\n   */\n  getStrRegExp: function getStrRegExp(formater) {\n    var exactRegExp = [];\n    var fuzzyRegExp = [];\n\n    for (var i = 0; i < formater.length; i++) {\n      if (/[a-zA-Z]/.test(formater[i])) {\n        exactRegExp.push('[0-9]');\n      } else {\n        exactRegExp.push(formater[i]);\n\n        if (fuzzyRegExp.indexOf(formater[i]) === -1) {\n          fuzzyRegExp.push(formater[i]);\n        }\n      }\n    }\n\n    return {\n      fuzzy: new RegExp('^[0-9' + fuzzyRegExp.join('') + ']{0,' + exactRegExp.length + '}$'),\n      exact: new RegExp('^' + exactRegExp.join('') + '$')\n    };\n  },\n  getFormat: function getFormat(formater, format) {\n    var hasTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (format) {\n      return {\n        dateFormat: hasTime ? 'YYYY-MM-DD' : format,\n        timeFormat: 'HH:mm:ss',\n        dateTimeFormat: format\n      };\n    }\n\n    var dateFormat = formater[0];\n    var timeFormat = formater[1] || 'HH:mm:ss';\n    var dateTimeFormat = !hasTime ? dateFormat : [dateFormat, timeFormat];\n    return {\n      dateFormat: dateFormat,\n      timeFormat: timeFormat,\n      dateTimeFormat: dateTimeFormat\n    };\n  },\n  toMoment: function toMoment(value, format) {\n    var disabledDateCallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {\n      return false;\n    };\n\n    if (!value) {\n      return null;\n    }\n\n    var val = void 0;\n\n    if (_nextMoment2['default'].isMoment(value) && value.isValid()) {\n      val = value;\n    } else if (isISODate(value)) {\n      val = (0, _nextMoment2['default'])(value);\n    } else if (isString(value) && isString(format)) {\n      val = (0, _nextMoment2['default'])(value, format);\n    }\n\n    if (isString(value) && Array.isArray(format)) {\n      if (format.length === 1 && isString(format[0])) {\n        val = (0, _nextMoment2['default'])(value, format[0]);\n      } else if (format.length === 2 && isString(format[0]) && isString(format[1])) {\n        val = (0, _nextMoment2['default'])(value, format.join(' '));\n      } else {\n        val = (0, _nextMoment2['default'])(value);\n      }\n    } else {\n      val = (0, _nextMoment2['default'])(value);\n    }\n\n    if (val && val.isValid() && !disabledDateCallback(getCalendarDate(val))) {\n      return val;\n    }\n\n    return null;\n  },\n  // dateTimeFormat 可不传，如果传的话，就强制用 datTimeFormat 格式化\n  parseDateParts: function parseDateParts(momentObject, dateFormat, timeFormat, dateTimeFormat) {\n    if (!momentObject) {\n      return {\n        dateValue: null,\n        dateString: '',\n        timeString: '',\n        dateTimeString: ''\n      };\n    }\n\n    var dateValue = momentObject.toDate();\n    var dateString = formatDate(dateValue, dateFormat);\n    var timeString = formatDate(dateValue, timeFormat);\n    var dateTimeString = void 0;\n\n    if (Array.isArray(dateTimeFormat)) {\n      dateTimeString = formatDate(dateValue, dateTimeFormat[0]) + ' ' + formatDate(dateValue, dateTimeFormat[1]);\n    } else {\n      dateTimeString = formatDate(dateValue, dateTimeFormat);\n    }\n\n    return {\n      dateValue: dateValue,\n      dateString: dateString,\n      timeString: timeString,\n      dateTimeString: dateTimeString\n    };\n  }\n};\nexports['default'] = utils;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}