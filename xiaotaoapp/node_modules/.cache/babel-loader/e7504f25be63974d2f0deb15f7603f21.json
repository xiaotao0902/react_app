{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nfunction getPrototype(value) {\n  if (Object.getPrototypeOf) {\n    return Object.getPrototypeOf(value);\n  }\n\n  if (_typeof('test'.__proto__) === 'object') {\n    return value.__proto__;\n  }\n\n  return false;\n}\n\nvar toString = Object.prototype.toString;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction isPlainObject(o) {\n  if (!o || toString.call(o) !== '[object Object]' || o.nodeType || o === o.window) {\n    return false;\n  }\n\n  var proto = getPrototype(o),\n      funcToString = Function.prototype.toString,\n      objectCtorString = funcToString.call(Object),\n      constructor = void 0;\n\n  if (proto === null) {\n    return true;\n  }\n\n  var Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor === 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;\n}\n\nexports.isPlainObject = isPlainObject;\n\nfunction equal(objA, objB, compare, compareContext, deep) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n  var len = keysA.length;\n\n  if (len !== keysB.length) {\n    return false;\n  }\n\n  compareContext = compareContext || null; // Test for A's keys different from B.\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  for (var i = 0; i < len; i++) {\n    var key = keysA[i];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    var _ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (deep) {\n      if (_ret === false || _ret === void 0 && equal(valueA, valueB, compare, compareContext, deep)) {\n        return false;\n      }\n    } else {\n      if (_ret === false || _ret === void 0 && valueA !== valueB) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nexports.shallowEqual = function (objA, objB, compare, compareContext) {\n  return equal(objA, objB, compare, compareContext, false);\n};\n\nexports.deepEqual = function (objA, objB, compare, compareContext) {\n  return equal(objA, objB, compare, compareContext, true);\n};","map":null,"metadata":{},"sourceType":"script"}