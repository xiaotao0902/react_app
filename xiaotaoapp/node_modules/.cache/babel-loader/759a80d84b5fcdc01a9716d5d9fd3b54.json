{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _class, _temp;\n/* eslint-disable react/prop-types, no-unused-vars, eqeqeq, prefer-const */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _classnames2 = require('classnames');\n\nvar _classnames3 = _interopRequireDefault(_classnames2);\n\nvar _nextOverlay = require('../../next-overlay/lib/index.js');\n\nvar _nextOverlay2 = _interopRequireDefault(_nextOverlay);\n\nvar _nextIcon = require('../../next-icon/lib/index.js');\n\nvar _nextIcon2 = _interopRequireDefault(_nextIcon);\n\nvar _nextDom = require('../../next-dom/lib/index.js');\n\nvar _nextLocaleProvider = require('../../next-locale-provider/lib/index.js');\n\nvar _nextLocaleProvider2 = _interopRequireDefault(_nextLocaleProvider);\n\nvar _nextUtil = require('../../next-util/lib/index.js');\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar findDOMNode = _reactDom2['default'].findDOMNode,\n    noop = function noop() {};\n\nvar isObject = function isObject(object) {\n  return Object.prototype.toString.call(object).match(/^\\[object\\s(.*)\\]$/)[1] === 'Object';\n};\n/**\n * Select.Combobox\n */\n\n\nvar Combobox = (_temp = _class = function (_Base) {\n  _inherits(Combobox, _Base);\n\n  function Combobox(props, context) {\n    _classCallCheck(this, Combobox);\n\n    var _this = _possibleConstructorReturn(this, _Base.call(this, props, context));\n\n    _this.state = _this.state || {};\n    _this.state.inputValue = _this.props.multiple ? '' : _this.getInputValueFromValue(_this.state.value);\n    _this.state.placeholder = _this.getPlaceHolder();\n    ['onInputChange', 'onInputFocus', 'onInputBlur', 'onInputKeyDown', 'onSelectInnerClick', 'onArrowClick', 'onMouseDown', 'onMouseUp'].forEach(function (method) {\n      _this[method] = _this[method].bind(_this);\n    });\n    _this.isCombobox = true;\n    return _this;\n  }\n\n  Combobox.prototype.getPlaceHolder = function getPlaceHolder(props) {\n    props = props || this.props;\n    return props.placeholder || props.locale.comboboxPlaceHolder;\n  };\n\n  Combobox.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    _Base.prototype.componentWillReceiveProps.call(this, nextProps);\n\n    if ('value' in nextProps) {\n      var value = this.normalizeValue(nextProps.value);\n      this.cacheDataByValue(value, nextProps);\n\n      if (!nextProps.multiple) {\n        this.setState({\n          inputValue: this.getInputValueFromValue(nextProps.value)\n        });\n      } else if (!this.props.multiple && nextProps.multiple) {\n        this.setState({\n          inputValue: ''\n        });\n      }\n    }\n\n    if ('placeholder' in nextProps) {\n      this.setState({\n        placeholder: this.getPlaceHolder(nextProps)\n      });\n    }\n  };\n\n  Combobox.prototype.getInputValueFromValue = function getInputValueFromValue(value) {\n    var _props = this.props,\n        fillProps = _props.fillProps,\n        multiple = _props.multiple;\n\n    if (this._isUserInput && !isObject(value)) {\n      return value;\n    }\n\n    value = this.normalizeValue(value);\n\n    if (value.length && !multiple) {\n      value = this.getDataByValue(value);\n      return typeof value[0][fillProps] !== 'undefined' ? value[0][fillProps] : value[0];\n    } else {\n      return '';\n    }\n  };\n\n  Combobox.prototype.renderComboboxLabel = function renderComboboxLabel() {\n    var multiple = this.props.multiple,\n        _state = this.state,\n        value = _state.value,\n        placeholder = _state.placeholder,\n        inputValue = _state.inputValue,\n        records = this.getDataByValue(value),\n        label = this.getDisplayByValue(value, records),\n        placeHolderClassName = this.getPrefix() + 'select-placeholder';\n\n    if (multiple) {\n      return label.length || inputValue ? this.renderLabel(label, value) : this.state.focused ? null : _react2['default'].createElement('span', {\n        className: placeHolderClassName\n      }, placeholder);\n    } else {\n      return null;\n    }\n  };\n\n  Combobox.prototype.render = function render() {\n    var _classnames,\n        _this2 = this;\n\n    var _props2 = this.props,\n        overlay = _props2.overlay,\n        className = _props2.className,\n        disabled = _props2.disabled,\n        size = _props2.size,\n        multiple = _props2.multiple,\n        hasArrow = _props2.hasArrow,\n        animation = _props2.animation,\n        safeNode = _props2.safeNode,\n        container = _props2.container,\n        dataSource = _props2.dataSource,\n        onChange = _props2.onChange,\n        name = _props2.name,\n        popupClassName = _props2.popupClassName,\n        popupProps = _props2.popupProps,\n        showSearch = _props2.showSearch,\n        others = _objectWithoutProperties(_props2, ['overlay', 'className', 'disabled', 'size', 'multiple', 'hasArrow', 'animation', 'safeNode', 'container', 'dataSource', 'onChange', 'name', 'popupClassName', 'popupProps', 'showSearch']),\n        prefix = this.getPrefix(),\n        menu = overlay || _react2['default'].cloneElement(this.renderMenu(), {\n      onKeyNavNodeEnter: this.onNodeEnter.bind(this),\n      autoFocus: false\n    }),\n        visible = this.state.visible && (showSearch || !!_react2['default'].Children.toArray(menu.props.children).length || overlay),\n        _state2 = this.state,\n        value = _state2.value,\n        inputValue = _state2.inputValue,\n        focused = _state2.focused;\n\n    this.cacheDataByValue(value);\n    var cls = (0, _classnames3['default'])((_classnames = {}, _defineProperty(_classnames, prefix + 'select', true), _defineProperty(_classnames, prefix + 'comobobox', true), _defineProperty(_classnames, 'focused', focused), _defineProperty(_classnames, 'opened', visible), _defineProperty(_classnames, 'disabled', disabled), _defineProperty(_classnames, size, size), _defineProperty(_classnames, 'multiple', multiple), _defineProperty(_classnames, 'no-arrow', !hasArrow), _defineProperty(_classnames, 'has-clear', this.hasClear()), _defineProperty(_classnames, className, className), _classnames)),\n        arrowType = this.getArrowType(visible),\n        iconSize = this.getIconSize(),\n        arrowContent = hasArrow ? _react2['default'].createElement('span', {\n      className: prefix + 'comobobox-arrow-wrapper',\n      onClick: this.onArrowClick\n    }, _react2['default'].createElement(_nextIcon2['default'], {\n      type: arrowType,\n      size: iconSize,\n      className: prefix + 'select-arrow'\n    })) : null,\n        closeIcon = this.hasClear() ? _react2['default'].createElement(_nextIcon2['default'], {\n      type: 'delete-filling',\n      size: iconSize,\n      className: prefix + 'select-clear',\n      onClick: this.clear.bind(this)\n    }) : null;\n    others = (0, _nextUtil.pickAttrs)(others);\n    var id = others.id;\n    var focusNodeId = id ? 'focus-' + id : null;\n    return _react2['default'].createElement('span', _extends({}, others, {\n      className: cls,\n      onMouseDown: this.onMouseDown,\n      onMouseUp: this.onMouseUp\n    }), _react2['default'].createElement('div', {\n      className: prefix + 'select-inner-wrapper',\n      ref: 'innerWrapper'\n    }, _react2['default'].createElement('div', {\n      className: prefix + 'select-inner',\n      onClick: this.onSelectInnerClick\n    }, this.renderComboboxLabel(), _react2['default'].createElement('input', {\n      id: focusNodeId,\n      ref: 'target',\n      tabIndex: disabled ? null : 0,\n      value: inputValue,\n      size: size,\n      disabled: disabled,\n      onKeyDown: this.onInputKeyDown,\n      onChange: this.onInputChange,\n      onFocus: this.onInputFocus,\n      onBlur: this.onInputBlur,\n      name: name,\n      autoComplete: 'off',\n      placeholder: multiple ? null : this.getPlaceHolder()\n    }), closeIcon), arrowContent), _react2['default'].createElement(_nextOverlay2['default'], _extends({}, popupProps, {\n      visible: visible,\n      animation: animation,\n      className: popupClassName,\n      container: container,\n      safeNode: [function () {\n        return _this2.refs.innerWrapper;\n      }, safeNode],\n      autoFocus: false,\n      ref: 'overlay',\n      shouldUpdatePosition: true,\n      target: function target() {\n        return _this2;\n      },\n      onOpen: this.onOpen,\n      afterOpen: this.afterOpen,\n      onClose: this.props.onClose,\n      onRequestClose: this.onRequestClose.bind(this)\n    }), menu));\n  };\n\n  Combobox.prototype.onMouseDown = function onMouseDown(e) {\n    this.clickByUser = true;\n  };\n\n  Combobox.prototype.onMouseUp = function onMouseUp(e) {\n    this.clickByUser = false;\n  };\n\n  Combobox.prototype.onNodeEnter = function onNodeEnter(e, child) {\n    var _props3 = this.props,\n        multiple = _props3.multiple,\n        tags = _props3.tags,\n        selectedValue = [];\n\n    if (child) {\n      var value = (child.value || '').toString();\n\n      if (multiple) {\n        selectedValue = this.getMultipleStateValue(value);\n      } else {\n        selectedValue = [value];\n      }\n\n      this.onSelect(selectedValue, child);\n    } else if (multiple && tags) {\n      var _value = e.target.value;\n      selectedValue = this.getMultipleStateValue(_value, tags);\n      this.onSelect(selectedValue);\n    } else {\n      this.props.onInputEnter(e);\n    }\n\n    this.clearValue();\n  };\n\n  Combobox.prototype.getMultipleStateValue = function getMultipleStateValue(value, tags) {\n    var stateValue = this.state.value,\n        index = stateValue.indexOf(value);\n\n    if (index > -1) {\n      if (!tags) {\n        stateValue.splice(index, 1);\n      }\n    } else {\n      stateValue.push(value);\n    }\n\n    return stateValue;\n  };\n\n  Combobox.prototype.onInputChange = function onInputChange(e) {\n    var value = e.target.value;\n\n    if (this.filterValueFromLocal !== false) {\n      this.filterValue = value;\n    }\n\n    this._isUserInput = true;\n    var stateValue = this.normalizeValue(value);\n\n    if (!('value' in this.props) && !this.props.multiple) {\n      this.setState({\n        value: stateValue\n      });\n    }\n\n    var dataSource = this.getFilteredDataSource();\n    var flatternDataSource = this.getFlatternDataSource(dataSource);\n\n    if (flatternDataSource.length || !this.props.filterLocal) {\n      this.onVisibleChange(true);\n    }\n\n    this.setInputValue(value);\n    this.props.onInputUpdate(value);\n  };\n\n  Combobox.prototype.fakeInputWidth = function fakeInputWidth(value) {\n    if (!this._fakeInputElement) {\n      this._fakeInputElement = document.createElement('div');\n\n      _nextDom.style.set(this._fakeInputElement, {\n        position: 'absolute',\n        top: '-9999px',\n        left: 0,\n        visibility: 'hidden'\n      });\n\n      document.body.appendChild(this._fakeInputElement);\n    }\n\n    this._fakeInputElement.textContent = value;\n  };\n\n  Combobox.prototype.componentDidMount = function componentDidMount() {\n    this.setInputWidth();\n  };\n\n  Combobox.prototype.componentDidUpdate = function componentDidUpdate() {\n    _Base.prototype.componentDidUpdate.apply(this, arguments);\n\n    this.resizeInput();\n    this._isUserInput = false;\n  };\n\n  Combobox.prototype.setInputWidth = function setInputWidth() {\n    var input = findDOMNode(this.refs.target);\n    this._oldInputWidth = input.clientWidth;\n  };\n\n  Combobox.prototype.resizeInput = function resizeInput() {\n    var input = findDOMNode(this.refs.target),\n        multiple = this.props.multiple,\n        width = void 0;\n\n    if (multiple) {\n      if (!this._fakeInputElement) {\n        this.fakeInputWidth('');\n      }\n\n      width = this._fakeInputElement.clientWidth;\n\n      _nextDom.style.set(input, 'width', width + 10 + 'px');\n    } else {\n      _nextDom.style.set(input, 'width', this._oldInputWidth + 'px');\n    }\n  };\n\n  Combobox.prototype.onInputFocus = function onInputFocus(e) {\n    this.setState({\n      focused: true\n    });\n\n    if (this._blurTimeout) {\n      clearTimeout(this._blurTimeout);\n    }\n\n    if (this.state.placeholder !== '') {\n      this.setState({\n        placeholder: ''\n      });\n    }\n\n    this.props.onInputFocus(e, this.clickByUser);\n  };\n\n  Combobox.prototype.onInputBlur = function onInputBlur(e) {\n    var _this3 = this;\n\n    this.setState({\n      focused: false\n    });\n    this._blurTimeout = setTimeout(function () {\n      if (!_this3.state.value.length) {\n        _this3.setState({\n          placeholder: _this3.getPlaceHolder()\n        });\n      }\n\n      _this3.props.onInputBlur(e, _this3.state.inputValue);\n    }, 100);\n  };\n\n  Combobox.prototype.onInputKeyDown = function onInputKeyDown(e) {\n    if (this.refs.overlay.refs.menu && this.refs.overlay.refs.menu.onKeyNavNodeKeyDown) {\n      this.refs.overlay.refs.menu.onKeyNavNodeKeyDown(e);\n    } else if (e.keyCode === 13) {\n      this.onNodeEnter(e);\n    }\n\n    if (e.keyCode === 40 || e.keyCode === 38) {\n      e.preventDefault();\n    }\n  };\n\n  Combobox.prototype.onSelectInnerClick = function onSelectInnerClick() {\n    this.clickByUser = true;\n    this.focusInput();\n    this.clickByUser = false;\n  };\n\n  Combobox.prototype.focusInput = function focusInput() {\n    findDOMNode(this.refs.target).focus();\n  };\n\n  Combobox.prototype.setInputValue = function setInputValue(value) {\n    this.setState({\n      inputValue: value\n    });\n    this.fakeInputWidth(value);\n    this._inputValue = value;\n  };\n\n  Combobox.prototype.clearValue = function clearValue() {\n    if (this.props.multiple) {\n      this.setInputValue('');\n    }\n\n    this.focusInput();\n  };\n\n  Combobox.prototype.onRequestClose = function onRequestClose() {\n    this.onVisibleChange(false);\n  };\n\n  Combobox.prototype.onArrowClick = function onArrowClick() {\n    if (!this.props.disabled) {\n      this.onVisibleChange(!this.state.visible);\n      this.focusInput();\n    }\n  };\n\n  Combobox.prototype.onOpen = function onOpen() {\n    var menu = this.refs.overlay.refs.menu;\n\n    this._syncWidth(menu);\n\n    this.props.onOpen();\n  };\n\n  Combobox.prototype.afterOpen = function afterOpen() {\n    var menu = this.refs.overlay.refs.menu;\n\n    this._enableScroll(menu);\n\n    this.props.afterOpen();\n  };\n\n  Combobox.prototype.hasClear = function hasClear() {\n    return this.props.hasClear && this.state.inputValue && !this.props.multiple && !this.props.disabled;\n  };\n\n  return Combobox;\n}(_base2['default']), _class.propTypes = {\n  /**\n   * 样式类名的品牌前缀\n   */\n  prefix: _propTypes2['default'].string,\n\n  /**\n   * 自定义类名\n   */\n  className: _propTypes2['default'].string,\n\n  /**\n   * 自定义内联样式\n   */\n  style: _propTypes2['default'].object,\n\n  /**\n   *  弹层挂载容器节点\n   */\n  container: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].func]),\n\n  /**\n   * 选择器的尺寸\n   */\n  size: _propTypes2['default'].oneOf(['small', 'medium', 'large']),\n\n  /**\n   * 选择器的形状\n   */\n  shape: _propTypes2['default'].oneOf(['normal', 'arrow-only']),\n\n  /**\n   * 没有值的时候的占位符\n   */\n  placeholder: _propTypes2['default'].string,\n\n  /**\n   * 当前值\n   */\n  value: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].array, _propTypes2['default'].node, _propTypes2['default'].object]),\n\n  /**\n   * 初始默认值\n   */\n  defaultValue: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].array, _propTypes2['default'].node, _propTypes2['default'].object]),\n\n  /**\n   * 当前弹层是否显示\n   */\n  visible: _propTypes2['default'].bool,\n\n  /**\n   * 弹层初始是否显示\n   */\n  defaultVisible: _propTypes2['default'].bool,\n\n  /**\n   * 是否禁用\n   */\n  disabled: _propTypes2['default'].bool,\n\n  /**\n   * 传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用)\n   */\n  dataSource: _propTypes2['default'].array,\n\n  /**\n   * 是否是多选\n   */\n  multiple: _propTypes2['default'].bool,\n\n  /**\n   * 是否启用标签模式, 仅在多选时有效,效果是除了自动提示外的选项, 也可以使用输入的文字作为标签\n   */\n  tags: _propTypes2['default'].bool,\n  // TODO: Remove API at next version.\n\n  /**\n   * 填充到选择框里面的值\n   */\n  fillProps: _propTypes2['default'].string,\n\n  /**\n   * 是否显示顶部的搜索框\n   */\n  showSearch: _propTypes2['default'].bool,\n\n  /**\n   * 在输入的时候过滤的函数,仅在filterLocal为true时候有效\n   * @param {String} filterValue 筛选值\n   * @param {Object} option 选项\n   * @return {Boolean} 是否保留当前选项\n   */\n  filterBy: _propTypes2['default'].func,\n\n  /**\n   * 是否使用本地过滤,在数据源为远程的时候需要关闭此选项\n   */\n  filterLocal: _propTypes2['default'].bool,\n\n  /**\n   * 是否显示右侧的箭头\n   */\n  hasArrow: _propTypes2['default'].bool,\n\n  /**\n   * 下拉菜单是否与选择器对齐\n   */\n  autoWidth: _propTypes2['default'].bool,\n\n  /**\n   * 选择后是否立即隐藏菜单，单选是默认隐藏的，因此该选项只在多选的时候有效\n   */\n  hiddenSelected: _propTypes2['default'].bool,\n\n  /**\n   * Combobox在用户输入的时候触发的回调\n   * @param {String} value 输入值\n   */\n  onInputUpdate: _propTypes2['default'].func,\n\n  /**\n   * Combobox获取焦点的时候触发的回调\n   * @param {Event} e DOM事件对象\n   * @param {Boolean} clickByUser 是否用户点击\n   */\n  onInputFocus: _propTypes2['default'].func,\n\n  /**\n   * Combobox失去焦点的时候触发的回调\n   * @param {Event} e DOM事件对象\n   * @param {String} inputValue 输入值\n   */\n  onInputBlur: _propTypes2['default'].func,\n\n  /**\n   * Combobox回车的时候触发的回调\n   * @param {Event} e DOM事件对象\n   */\n  onInputEnter: _propTypes2['default'].func,\n\n  /**\n   * Combobox发生改变的时候触发的回调, 注意在输入的时候该事件不会被触发，如果需要监听输入的事件请使用onInputUpdate\n   * @param {String} value 数据\n   * @param {Object} option 选项\n   */\n  onChange: _propTypes2['default'].func,\n\n  /**\n   * 在搜索框中输入触发的事件，仅在showSearch为true时候有效\n   * @param {String} value 搜索值\n   */\n  onSearch: _propTypes2['default'].func,\n\n  /**\n   * 是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效\n   */\n  hasClear: _propTypes2['default'].bool,\n\n  /**\n   * 弹出层的样式类\n   */\n  popupClassName: _propTypes2['default'].string,\n\n  /**\n   * 弹出层的属性\n   */\n  popupProps: _propTypes2['default'].object,\n\n  /**\n   * 弹层显示或隐藏的时候触发的事件\n   * @param {Boolean} visible 弹层是否隐藏和显示\n   */\n  onVisibleChange: _propTypes2['default'].func,\n\n  /**\n   * 弹层显示时触发的事件\n   */\n  onOpen: _propTypes2['default'].func,\n\n  /**\n   * 弹层隐藏时触发的事件\n   */\n  onClose: _propTypes2['default'].func,\n\n  /**\n   * 自定义国际化文案对象\n   * @property {String} selectPlaceHolder 请选择的提示文案\n   * @property {String} comboboxPlaceHolder 请输入的提示文案\n   */\n  locale: _propTypes2['default'].object,\n\n  /**\n   * 自定义国际化语言\n   */\n  language: _propTypes2['default'].oneOf(['en-us', 'zh-cn', 'zh-tw']),\n  afterOpen: _propTypes2['default'].func\n}, _class.defaultProps = {\n  prefix: 'next-',\n  size: 'medium',\n  shape: 'normal',\n  placeholder: '',\n  disabled: false,\n  multiple: false,\n  showSearch: false,\n  hasArrow: true,\n  autoWidth: true,\n  onVisibleChange: noop,\n  onChange: noop,\n  fillProps: 'value',\n  filterLocal: true,\n  onMouseDown: noop,\n  onMouseUp: noop,\n  onSearch: noop,\n  onOpen: noop,\n  onClose: noop,\n  hasClear: false,\n  animation: {\n    'in': 'expandInDown',\n    out: 'expandOutUp'\n  },\n  onInputUpdate: noop,\n  onInputFocus: noop,\n  onInputBlur: noop,\n  onInputEnter: noop,\n  hiddenSelected: false,\n  labelInValue: false,\n  locale: {\n    selectPlaceHolder: '请选择',\n    comboboxPlaceHolder: '请输入'\n  },\n  afterOpen: noop\n}, _temp);\nCombobox.displayName = 'Combobox';\nexports['default'] = (0, _nextLocaleProvider2['default'])(Combobox);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}