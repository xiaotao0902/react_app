{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _class, _temp, _initialiseProps;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _nextUtil = require('../../../next-util/lib/index.js');\n\nvar _util = require('../util/index.js');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar INPUT_STYLE = {\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  fontSize: 9999,\n  zIndex: 9999,\n  opacity: 0,\n  outline: 'none',\n  cursor: 'pointer'\n};\n\nvar noop = function noop() {};\n\nvar IframeUploader = (_temp = _class = function (_Component) {\n  _inherits(IframeUploader, _Component);\n\n  function IframeUploader(props) {\n    _classCallCheck(this, IframeUploader);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.domain = typeof document !== 'undefined' && document.domain ? document.domain : '';\n    return _this;\n  }\n\n  IframeUploader.prototype.componentDidMount = function componentDidMount() {\n    this.updateInputWH();\n  };\n\n  IframeUploader.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.updateInputWH();\n  };\n\n  IframeUploader.prototype.endUpload = function endUpload() {\n    if (this.state.uploading) {\n      this.file = {}; // eslint-disable-next-line\n\n      this.state.uploading = false;\n      this.setState({\n        uploading: false\n      });\n    }\n  };\n\n  IframeUploader.prototype.startUpload = function startUpload() {\n    if (!this.state.uploading) {\n      // eslint-disable-next-line\n      this.state.uploading = true;\n      this.setState({\n        uploading: true\n      });\n    }\n  };\n\n  IframeUploader.prototype.updateInputWH = function updateInputWH() {\n    var rootNode = _reactDom2['default'].findDOMNode(this);\n\n    var inputNode = this.refs.input;\n    inputNode.style.height = rootNode.offsetHeight + 'px';\n    inputNode.style.width = rootNode.offsetWidth + 'px';\n  };\n\n  IframeUploader.prototype.abort = function abort(file) {\n    if (file) {\n      var _uid = file;\n\n      if (file && file.uid) {\n        _uid = file.uid;\n      }\n\n      if (_uid === this.file.uid) {\n        this.endUpload();\n      }\n    } else {\n      this.endUpload();\n    }\n  };\n\n  IframeUploader.prototype.post = function post(file) {\n    var formNode = this.refs.form;\n    var dataSpan = this.refs.data;\n    var data = this.props.data || this.props.multipart;\n\n    if (typeof data === 'function') {\n      data = data(file);\n    }\n\n    var inputs = document.createDocumentFragment();\n\n    for (var key in data) {\n      if (data.hasOwnProperty(key)) {\n        var input = document.createElement('input');\n        input.setAttribute('name', key);\n        input.value = data[key];\n        inputs.appendChild(input);\n      }\n    }\n\n    dataSpan.appendChild(inputs);\n    formNode.submit();\n    dataSpan.innerHTML = '';\n    this.props.onStart([file]);\n  };\n\n  IframeUploader.prototype.render = function render() {\n    var _props = this.props,\n        disabled = _props.disabled,\n        className = _props.className,\n        children = _props.children,\n        accept = _props.accept,\n        name = _props.name,\n        style = _props.style;\n    var iframeName = name + '-iframe';\n    return _react2['default'].createElement('span', {\n      className: className,\n      style: _extends({\n        position: 'relative',\n        zIndex: 0,\n        display: 'inline-block'\n      }, style)\n    }, !disabled ? _react2['default'].createElement('iframe', {\n      ref: 'iframe',\n      name: iframeName,\n      onLoad: this.onLoad,\n      style: {\n        display: 'none'\n      }\n    }) : null, _react2['default'].createElement('form', {\n      ref: 'form',\n      method: 'post',\n      action: this.props.action,\n      encType: 'multipart/form-data',\n      target: iframeName\n    }, _react2['default'].createElement('input', {\n      ref: 'input',\n      type: 'file',\n      accept: accept,\n      name: name,\n      onChange: this.onChange,\n      style: INPUT_STYLE\n    }), _react2['default'].createElement('input', {\n      name: '_documentDomain',\n      value: this.domain,\n      type: 'hidden'\n    }), _react2['default'].createElement('span', {\n      ref: 'data'\n    })), children);\n  };\n\n  return IframeUploader;\n}(_react.Component), _class.propTypes = {\n  style: _propTypes2['default'].object,\n  action: _propTypes2['default'].string.isRequired,\n  name: _propTypes2['default'].string.isRequired,\n  data: _propTypes2['default'].oneOfType([_propTypes2['default'].object, _propTypes2['default'].func]),\n  multipart: _propTypes2['default'].oneOfType([_propTypes2['default'].object, _propTypes2['default'].func]),\n  disabled: _propTypes2['default'].bool,\n  className: _propTypes2['default'].string,\n  children: _propTypes2['default'].node,\n  fileList: _propTypes2['default'].array,\n  headers: _propTypes2['default'].object,\n  beforeUpload: _propTypes2['default'].func,\n  onStart: _propTypes2['default'].func,\n  onSuccess: _propTypes2['default'].func,\n  onError: _propTypes2['default'].func,\n  accept: _propTypes2['default'].string\n}, _class.defaultProps = {\n  name: 'file',\n  beforeUpload: noop,\n  onStart: noop,\n  onSuccess: noop,\n  onError: noop,\n  onAbort: noop\n}, _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.state = {\n    uploading: false\n  };\n  this.file = {};\n\n  this.onLoad = function () {\n    if (!_this2.state.uploading) {\n      return;\n    }\n\n    var props = _this2.props,\n        file = _this2.file;\n    var response = void 0;\n\n    try {\n      var doc = _this2.refs.iframe.contentDocument;\n      var script = doc.getElementsByTagName('script')[0];\n\n      if (script && script.parentNode === doc.body) {\n        doc.body.removeChild(script);\n      }\n\n      response = doc.body.innerHTML;\n      props.onSuccess(response, file);\n    } catch (err) {\n      _nextUtil.log.warning('cross domain error for Upload. Maybe server should return document.domain script.');\n\n      response = 'cross-domain';\n      props.onError(err, null, file);\n    }\n\n    _this2.endUpload();\n  };\n\n  this.onChange = function (e) {\n    var file = _this2.file = {\n      uid: (0, _util.uid)(),\n      name: e.target.value\n    };\n\n    _this2.startUpload();\n\n    var props = _this2.props;\n\n    if (!props.beforeUpload) {\n      return _this2.post(file);\n    }\n\n    var before = props.beforeUpload(file);\n\n    if (before && before.then) {\n      before.then(function () {\n        _this2.post(file);\n      }, function () {\n        _this2.endUpload();\n      });\n    } else if (before !== false) {\n      _this2.post(file);\n    } else {\n      _this2.endUpload();\n    }\n  };\n}, _temp);\nIframeUploader.displayName = 'IframeUploader';\nexports['default'] = IframeUploader;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}