{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inRange = inRange;\nexports.getPercent = getPercent;\nexports.getPrecision = getPrecision;\n\nfunction inRange(value, range, min) {\n  if (!Array.isArray(range)) {\n    range = [min, range];\n  }\n\n  return value >= range[0] && value <= range[1];\n}\n\nfunction getPercent(min, max, value) {\n  return (value - min) * 100 / (max - min);\n}\n\nfunction getPrecision(step) {\n  var precision = 0;\n  var stepString = step.toString();\n\n  if (stepString.indexOf('.') !== -1) {\n    precision = stepString.length - stepString.indexOf('.') - 1;\n  }\n\n  return precision;\n} // export function debounce(func, wait, immediate) {\n//     let timeout;\n//     return function() {\n//         let context = this, args = arguments;\n//         let later = function() {\n//             timeout = null;\n//             if (!immediate) func.apply(context, args);\n//         };\n//         let callNow = immediate && !timeout;\n//         clearTimeout(timeout);\n//         timeout = setTimeout(later, wait);\n//         if (callNow) func.apply(context, args);\n//     };\n// }\n// export function throttle(func, wait, options) {\n//     /* options的默认值\n//      *  表示首次调用返回值方法时，会马上调用func；否则仅会记录当前时刻，当第二次调用的时间间隔超过wait时，才调用func。\n//      *  options.leading = true;\n//      * 表示当调用方法时，未到达wait指定的时间间隔，则启动计时器延迟调用func函数，若后续在既未达到wait指定的时间间隔和func函数又未被调用的情况下调用返回值方法，则被调用请求将被丢弃。\n//      *  options.trailing = true;\n//      * 注意：当options.trailing = false时，效果与上面的简单实现效果相同\n//      */\n//     let context, args, result;\n//     let timeout = null;\n//     let previous = 0;\n//     if (!options) options = {};\n//     let later = function() {\n//         previous = options.leading === false ? 0 : new Date().getTime();\n//         timeout = null;\n//         result = func.apply(context, args);\n//         if (!timeout) context = args = null;\n//     };\n//     return function() {\n//         let now = new Date().getTime();\n//         if (!previous && options.leading === false) previous = now;\n//         // 计算剩余时间\n//         let remaining = wait - (now - previous);\n//         context = this;\n//         args = arguments;\n//         // 当到达wait指定的时间间隔，则调用func函数\n//         // 精彩之处：按理来说remaining <= 0已经足够证明已经到达wait的时间间隔，但这里还考虑到假如客户端修改了系统时间则马上执行func函数。\n//         if (remaining <= 0 || remaining > wait) {\n//             // 由于setTimeout存在最小时间精度问题，因此会存在到达wait的时间间隔，但之前设置的setTimeout操作还没被执行，因此为保险起见，这里先清理setTimeout操作\n//             if (timeout) {\n//                 clearTimeout(timeout);\n//                 timeout = null;\n//             }\n//             previous = now;\n//             result = func.apply(context, args);\n//             if (!timeout) context = args = null;\n//         } else if (!timeout && options.trailing !== false) {\n//             // options.trailing=true时，延时执行func函数\n//             timeout = setTimeout(later, remaining);\n//         }\n//         return result;\n//     };\n// }","map":null,"metadata":{},"sourceType":"script"}