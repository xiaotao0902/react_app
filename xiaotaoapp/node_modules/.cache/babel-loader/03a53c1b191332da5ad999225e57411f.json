{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _class, _temp; // import { log } from '@alife/next-util';\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _nextButton = require('../../next-button/lib/index.js');\n\nvar _nextButton2 = _interopRequireDefault(_nextButton);\n\nvar _nextDialog = require('../../next-dialog/lib/index.js');\n\nvar _nextDialog2 = _interopRequireDefault(_nextDialog);\n\nvar _nextLocaleProvider = require('../../next-locale-provider/lib/index.js');\n\nvar _nextLocaleProvider2 = _interopRequireDefault(_nextLocaleProvider);\n\nvar _request = require('./runtime/request.js');\n\nvar _request2 = _interopRequireDefault(_request);\n\nvar _reactCropper = require('./components/react-cropper.js');\n\nvar _reactCropper2 = _interopRequireDefault(_reactCropper);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar noop = function noop() {}; // const errorMap = {\n//     1: 'IO_ERROR_SERVER',\n//     2: 'FORMAT_ERROR',\n//     3: 'FILE_SIZE_ERROR_SERVER',\n//     4: 'FILE_TYPE_ERROR_SERVER'\n// };\n\n/**\n * Upload.CropUpload\n * @order 3\n * @description IE10+ 支持\n */\n\n\nvar CropUpload = (_temp = _class = function (_React$Component) {\n  _inherits(CropUpload, _React$Component);\n\n  function CropUpload(props) {\n    _classCallCheck(this, CropUpload);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.state = {\n      src: '',\n      file: null,\n      showPopup: false\n    };\n    ['cropImage', 'onChange', 'onClick', 'onPopupClose'].forEach(function (fn) {\n      _this[fn] = _this[fn].bind(_this);\n    });\n    return _this;\n  }\n\n  CropUpload.prototype.onPopupClose = function onPopupClose() {\n    this.setState({\n      showPopup: false\n    });\n  };\n\n  CropUpload.prototype.cropImage = function cropImage() {\n    if (typeof this.refs.cropper.getCroppedCanvas() === 'undefined') {\n      return;\n    }\n\n    var imageType = /\\.png$/i.test(this.state.file.name) ? 'image/png' : 'image/jpeg';\n    var canvasOrigin = this.refs.cropper.getCroppedCanvas();\n    var _props = this.props,\n        size = _props.size,\n        cropSize = _props.cropSize;\n    var dataUrl = void 0; // 设置裁剪后图片的尺寸,`cropSize` 代替 `size`，这里为了向上兼容\n\n    var newSize = cropSize;\n\n    if (!newSize && typeof size === 'number') {\n      newSize = size;\n    }\n\n    if (newSize) {\n      var newWidth = 0;\n      var newHeight = 0;\n      var canvasResize = document.createElement('canvas');\n      canvasResize.style.display = 'none';\n      document.body.appendChild(canvasResize);\n\n      if (typeof newSize === 'number') {\n        newWidth = newSize;\n        newHeight = newSize;\n      } else if ((typeof newSize === 'undefined' ? 'undefined' : _typeof(newSize)) === 'object') {\n        newWidth = newSize.width;\n        newHeight = newSize.height;\n      }\n\n      canvasResize.width = newWidth;\n      canvasResize.height = newHeight;\n      var context2d = canvasResize.getContext('2d');\n      context2d.drawImage(canvasOrigin, 0, 0, newWidth, newHeight);\n      dataUrl = canvasResize.toDataURL(imageType);\n    } else {\n      dataUrl = canvasOrigin.toDataURL(imageType);\n    } // 触发裁剪回调函数\n\n\n    this.props.onCrop(dataUrl); // 图片上传\n\n    var decodeData = dataUrl.substring(dataUrl.indexOf('base64,') + 7);\n    decodeData = atob(decodeData);\n    this.upload(decodeData, dataUrl);\n  };\n  /**\n   * @param  {String} decodeData 解编码后，用于上传服务器的数据\n   * @param  {String} dataUrl    base64 用于预览图片的数据\n   */\n\n\n  CropUpload.prototype.upload = function upload(decodeData, dataUrl) {\n    var _this2 = this;\n\n    var beforeUpload = this.props.beforeUpload;\n\n    if (!beforeUpload) {\n      return this.post(decodeData, dataUrl);\n    }\n\n    var before = beforeUpload(this.state.file);\n\n    if (before && before.then) {\n      before.then(function (result) {\n        if (result !== false) {\n          _this2.post(decodeData, dataUrl);\n        }\n      })['catch'](function () {});\n    } else if (before !== false) {\n      this.post(decodeData, dataUrl);\n    }\n  };\n\n  CropUpload.prototype.post = function post(decodeData, dataUrl) {\n    var _this3 = this;\n\n    var _props2 = this.props,\n        action = _props2.action,\n        name = _props2.name,\n        headers = _props2.headers,\n        withCredentials = _props2.withCredentials,\n        multipart = _props2.multipart,\n        formatter = _props2.formatter,\n        _onProgress = _props2.onProgress,\n        _onSuccess = _props2.onSuccess,\n        _onError = _props2.onError;\n    var data = this.props.data || multipart;\n\n    if (typeof data === 'function') {\n      data = data(this.state.file);\n    }\n\n    (0, _request2['default'])({\n      action: action,\n      filename: name,\n      file: this.state.file,\n      bin: decodeData,\n      data: data,\n      headers: headers,\n      withCredentials: withCredentials,\n      onProgress: function onProgress(e) {\n        _onProgress(e, dataUrl);\n      },\n      onSuccess: function onSuccess(res) {\n        if (formatter) {\n          res = formatter(res);\n        } // 组件没有做 code 值判断，导致请求成功但是其实上传失败的情况也会通过，考虑会产生BR，留待 1.0 BR版本再放开下面的修复\n        // try {\n        //     if (typeof res === 'string') {\n        //         res = JSON.parse(res);\n        //     }\n        // } catch (e) {\n        //     onError(new Error('服务器需要返回标准 JSON 字符串'), res, this.state.file);\n        //     return;\n        // }\n        //\n        // /* eslint-disable */\n        // if (!res || res.code != '0') {\n        //     onError(new Error(errorMap[res && res.code || '1']), res, this.state.file);\n        //     return;\n        // }\n        // /* eslint-disable */\n\n\n        _onSuccess(res, dataUrl);\n\n        _this3.onPopupClose();\n      },\n      onError: function onError(err, res) {\n        _onError(err, res, dataUrl);\n      }\n    });\n  }; // TODO: 这里只是选择完文件，并没有真正的上传， 没有对结果产生影响。 1.x 需要考虑是否要等文件上传完成再调用\n\n\n  CropUpload.prototype.onChange = function onChange(e) {\n    var _this4 = this;\n\n    var beforeCrop = this.props.beforeCrop;\n\n    var callback = function callback(file) {\n      var reader = new FileReader();\n\n      reader.onload = function () {\n        _this4.setState({\n          src: reader.result,\n          file: file,\n          showPopup: true\n        });\n      };\n\n      reader.readAsDataURL(file);\n\n      _this4.props.onChange(file);\n    };\n\n    e.preventDefault();\n    var file = void 0;\n\n    if (e.dataTransfer) {\n      file = e.dataTransfer.files[0];\n    } else if (e.target) {\n      file = e.target.files[0];\n    }\n\n    if (!beforeCrop) {\n      callback(file);\n      return;\n    }\n\n    var before = beforeCrop(file);\n\n    if (before && before.then) {\n      before.then(function (result) {\n        if (result !== false) {\n          callback(file);\n        }\n      })['catch'](function () {// do nothing\n      });\n    } else if (before !== false) {\n      callback(file);\n    }\n  };\n\n  CropUpload.prototype.onClick = function onClick() {\n    var el = this.refs.file;\n\n    if (!el) {\n      return;\n    }\n\n    el.click();\n    el.value = '';\n  };\n\n  CropUpload.prototype.previewListValid = function previewListValid(list) {\n    var defaultList = [80, 60, 40];\n    list.forEach(function (item) {\n      if (defaultList.indexOf(item) === -1) {\n        return false;\n      }\n    });\n    return true;\n  };\n\n  CropUpload.prototype.previewArea = function previewArea(prefixCls) {\n    var _props3 = this.props,\n        preview = _props3.preview,\n        previewList = _props3.previewList;\n    var previewTpl = [];\n\n    if (!preview || !previewList || !previewList.length || !this.previewListValid(previewList)) {\n      return;\n    }\n\n    previewList.forEach(function (item, index) {\n      /* eslint-disable */\n      var styles = {\n        width: item + 'px',\n        height: item + 'px'\n      };\n      /* eslint-enable */\n\n      previewTpl.push(_react2['default'].createElement('div', {\n        key: index\n      }, _react2['default'].createElement('div', {\n        className: 'img-preview',\n        style: styles\n      }), _react2['default'].createElement('span', {\n        className: 'img-preview-size'\n      }, item, '*', item)));\n    });\n    return _react2['default'].createElement('div', {\n      className: prefixCls + '-inner-preview'\n    }, previewTpl);\n  };\n\n  CropUpload.prototype.cropperPopup = function cropperPopup(prefixCls) {\n    var _props4 = this.props,\n        locale = _props4.locale,\n        minCropBoxSize = _props4.minCropBoxSize,\n        popupClassName = _props4.popupClassName,\n        aspectRatio = _props4.aspectRatio,\n        _props4$viewMode = _props4.viewMode,\n        viewMode = _props4$viewMode === undefined ? 1 : _props4$viewMode,\n        _props4$autoCropArea = _props4.autoCropArea,\n        autoCropArea = _props4$autoCropArea === undefined ? 0.8 : _props4$autoCropArea,\n        _props4$zoomable = _props4.zoomable,\n        zoomable = _props4$zoomable === undefined ? true : _props4$zoomable;\n    var preview = aspectRatio && aspectRatio !== 1 ? null : this.previewArea(prefixCls); // 为了配置平台 start\n\n    /* eslint-disable */\n\n    if (this.props.demoDefault) {\n      return _react2['default'].createElement(_nextDialog2['default'].Inner, {\n        style: {\n          position: 'relative'\n        }\n      }, _react2['default'].createElement(_nextDialog2['default'].Header, null, locale.crop.title), _react2['default'].createElement(_nextDialog2['default'].Body, null, _react2['default'].createElement('div', {\n        className: (0, _classnames2['default'])(_defineProperty({}, '' + prefixCls, true))\n      }, _react2['default'].createElement('div', {\n        className: (0, _classnames2['default'])(_defineProperty({}, prefixCls + '-inner', true))\n      }, _react2['default'].createElement('div', null, _react2['default'].createElement('div', {\n        className: prefixCls + '-inner-cropper'\n      }, _react2['default'].createElement(_reactCropper2['default'], {\n        style: {\n          height: '100%',\n          width: '100%'\n        },\n        viewMode: 1,\n        aspectRatio: 1 / 1,\n        preview: '.img-preview',\n        guides: false,\n        center: false,\n        background: false,\n        ref: 'cropper',\n        src: this.props.defaultAvatar\n      })), preview, _react2['default'].createElement('div', {\n        style: {\n          clear: 'both'\n        }\n      })), _react2['default'].createElement('span', {\n        className: prefixCls + '-inner-reset',\n        onClick: this.onClick\n      }, '+ ', locale.crop.reset)))), _react2['default'].createElement(_nextDialog2['default'].Footer, {\n        style: {\n          textAlign: 'left'\n        }\n      }, _react2['default'].createElement(_nextButton2['default'], {\n        type: 'primary'\n      }, locale.crop.save)));\n    }\n    /* eslint-enable */\n    // 为了配置平台 end\n\n\n    return _react2['default'].createElement(_nextDialog2['default'], {\n      className: popupClassName,\n      animation: false,\n      visible: this.state.showPopup,\n      title: locale.crop.title,\n      onClose: this.onPopupClose,\n      footer: _react2['default'].createElement('span', {\n        onClick: this.cropImage\n      }, _react2['default'].createElement(_nextButton2['default'], {\n        type: 'primary'\n      }, locale.crop.save)),\n      footerAlign: 'left'\n    }, _react2['default'].createElement('div', {\n      className: (0, _classnames2['default'])(_defineProperty({}, '' + prefixCls, true))\n    }, _react2['default'].createElement('div', {\n      className: (0, _classnames2['default'])(_defineProperty({}, prefixCls + '-inner', true))\n    }, _react2['default'].createElement('div', null, _react2['default'].createElement('div', {\n      className: prefixCls + '-inner-cropper'\n    }, _react2['default'].createElement(_reactCropper2['default'], {\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      viewMode: viewMode,\n      autoCropArea: autoCropArea,\n      aspectRatio: aspectRatio || 1 / 1,\n      minCropBoxWidth: minCropBoxSize,\n      preview: '.img-preview',\n      guides: false,\n      center: false,\n      background: false,\n      zoomable: zoomable,\n      ref: 'cropper',\n      src: this.state.src\n    })), preview, _react2['default'].createElement('div', {\n      style: {\n        clear: 'both'\n      }\n    })), _react2['default'].createElement('span', {\n      className: prefixCls + '-inner-reset',\n      onClick: this.onClick\n    }, '+ ', locale.crop.reset))));\n  };\n\n  CropUpload.prototype.render = function render() {\n    var _props5 = this.props,\n        className = _props5.className,\n        style = _props5.style,\n        children = _props5.children,\n        id = _props5.id;\n    var prefix = this.context.prefix || this.props.prefix;\n    var prefixCls = prefix + 'upload-crop'; // API `size` -> `cropSize` 提醒\n    // size && log.deprecated('size', 'cropSize', 'CropUpload');\n\n    var popup = this.cropperPopup(prefixCls);\n    return _react2['default'].createElement('div', {\n      id: 'upload_' + id,\n      className: className,\n      style: style\n    }, _react2['default'].createElement('span', {\n      role: 'upload',\n      onClick: this.onClick\n    }, _react2['default'].createElement('input', {\n      id: id,\n      type: 'file',\n      ref: 'file',\n      accept: this.props.accept,\n      multiple: false,\n      style: {\n        display: 'none'\n      },\n      onChange: this.onChange\n    }), children), popup);\n  };\n\n  return CropUpload;\n}(_react2['default'].Component), _class.propTypes = {\n  /**\n   * 样式前缀\n   */\n  prefix: _propTypes2['default'].string,\n  id: _propTypes2['default'].string,\n\n  /**\n   * 必选参数，上传的地址。使用 fileserver，跨域解决方案参考 [fileserver 接入](#fileserver)，[`非 fileserver` 使用说明](#not-fileserver)\n   */\n  action: _propTypes2['default'].string,\n\n  /**\n   * 可选参数，传递给服务器的文件参数\n   */\n  name: _propTypes2['default'].string,\n\n  /**\n   * 可选参数，设置裁剪图片生成的尺寸，如设置 `100`，会生成 `100*100` 的图片\n   */\n  cropSize: _propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object]),\n  size: _propTypes2['default'].any,\n\n  /**\n   * 可选参数，设置裁剪框的最小尺寸\n   */\n  minCropBoxSize: _propTypes2['default'].number,\n\n  /**\n   * 自定义类名\n   */\n  className: _propTypes2['default'].string,\n\n  /**\n   * 自定义内联样式\n   */\n  style: _propTypes2['default'].object,\n\n  /**\n   * 可选参数，设置上传的请求头部\n   */\n  headers: _propTypes2['default'].object,\n  withCredentials: _propTypes2['default'].bool,\n\n  /**\n   * 可选参数，数据格式化函数，配合自定义 `action` 使用，参数为服务器的响应数据，详见 [formatter](#formatter)\n   */\n  formatter: _propTypes2['default'].func,\n\n  /**\n   * 上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }）\n   */\n  data: _propTypes2['default'].oneOfType([_propTypes2['default'].object, _propTypes2['default'].func]),\n  multipart: _propTypes2['default'].oneOfType([_propTypes2['default'].object, _propTypes2['default'].func]),\n  language: _propTypes2['default'].string,\n\n  /**\n   * 自定义语言包，会与默认提供的语言包做合并操作，请严格按照默认语言包的格式，参考 [demo](http://next.alibaba-inc.com/demo/pc/upload#react-Upload-2)\n   */\n  locale: _propTypes2['default'].object,\n\n  /**\n   * 是否使用预览功能\n   */\n  preview: _propTypes2['default'].bool,\n\n  /**\n   * 预览展示列表，用来配置预览元素。目前仅支持 `80`、`60`、`40` 三种，例如，配置 `[80, 40]`，会展示 `80*80` 以及 `40*40` 两种尺寸\n   */\n  previewList: _propTypes2['default'].array,\n\n  /**\n   * 裁剪弹层自定义类名\n   */\n  popupClassName: _propTypes2['default'].string,\n\n  /**\n   * 裁剪比例，例如 `1 / 2` 表示 `宽 / 高`。**注意：1、设置了裁剪比例，而且值不等于 `1` 时，不能使用预览功能；2、设置成 'auto' 可以支持任意裁剪比例**\n   */\n  aspectRatio: _propTypes2['default'].number,\n\n  /**\n   * 可选参数，[定义裁剪框的模式](https://github.com/fengyuanchen/cropperjs#viewmode)\n   */\n  viewMode: _propTypes2['default'].number,\n\n  /**\n   * 可选参数，[定义自动裁剪区域的尺寸（百分比）](https://github.com/fengyuanchen/cropperjs#autocroparea)，介于 `0` 与 `1` 之间的值\n   */\n  autoCropArea: _propTypes2['default'].number,\n\n  /**\n   * 图片是否可以伸缩\n   */\n  zoomable: _propTypes2['default'].bool,\n  children: _propTypes2['default'].node,\n\n  /**\n   * 可选参数，选择文件后、唤起裁剪框前的钩子，参数为上传的文件。若返回 `false`、`Promise.reject()` 或者 `Promise.resolve(false)` 都会阻断后续流程，不会唤起裁剪框及后续动作\n   */\n  beforeCrop: _propTypes2['default'].func,\n\n  /**\n   * 完成裁剪并上传的回调函数，参数为裁剪后的文件的base64字符串数据\n   */\n  onCrop: _propTypes2['default'].func,\n\n  /**\n   * 可选参数，裁剪文件改变时触发\n   */\n  onChange: _propTypes2['default'].func,\n\n  /**\n   * 可选参数，点击裁剪之后、上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传\n   */\n  beforeUpload: _propTypes2['default'].func,\n  onProgress: _propTypes2['default'].func,\n\n  /**\n   * 上传成功回调函数，`res` 为后台响应，`dataUrl` 为裁剪后的文件的base64字符串数据(注意与 `Upload` 的参数区别)\n   */\n  onSuccess: _propTypes2['default'].func,\n\n  /**\n   * 可选参数，上传失败回调函数，参数为上传失败的文件信息\n   */\n  onError: _propTypes2['default'].func,\n\n  /**\n   * 图片类型\n   */\n  accept: _propTypes2['default'].string\n}, _class.defaultProps = {\n  prefix: 'next-',\n  action: '//kfupload.alibaba.com/mupload',\n  withCredentials: false,\n  name: 'avatar',\n  onCrop: noop,\n  beforeUpload: noop,\n  onChange: noop,\n  onProgress: noop,\n  onSuccess: noop,\n  onError: noop,\n  accept: 'image/png,image/jpg,image/jpeg,image/bmp,image/gif'\n}, _class.contextTypes = {\n  prefix: _propTypes2['default'].string\n}, _temp);\nCropUpload.displayName = 'CropUpload';\nexports['default'] = (0, _nextLocaleProvider2['default'])(CropUpload);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}