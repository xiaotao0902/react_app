{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = undefined;\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _line = require('./line.js');\n\nvar _line2 = _interopRequireDefault(_line);\n\nvar _text = require('./text.js');\n\nvar _text2 = _interopRequireDefault(_text);\n\nvar _filling = require('./filling.js');\n\nvar _filling2 = _interopRequireDefault(_filling);\n\nvar _tree = require('./tree.js');\n\nvar _tree2 = _interopRequireDefault(_tree);\n\nvar _slip = require('./slip.js');\n\nvar _slip2 = _interopRequireDefault(_slip);\n\nvar _normal = require('./normal.js');\n\nvar _normal2 = _interopRequireDefault(_normal);\n\nvar _icononly = require('./icononly.js');\n\nvar _icononly2 = _interopRequireDefault(_icononly);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar NavigationMain = (_temp = _class = function (_React$Component) {\n  _inherits(NavigationMain, _React$Component);\n\n  function NavigationMain(props, context) {\n    _classCallCheck(this, NavigationMain);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    if (!context.main) {\n      _this.state = {\n        selectedKey: props.selectedKey,\n        openedKeys: props.openedKeys,\n        type: props.type,\n        nestingPath: []\n      };\n    }\n\n    return _this;\n  }\n\n  NavigationMain.prototype.getChildContext = function getChildContext() {\n    return {\n      main: this.context.main || this\n    };\n  };\n\n  NavigationMain.prototype.collectKey = function collectKey(children) {\n    var _this2 = this;\n\n    var openedKeys = void 0,\n        selectedKey = void 0,\n        _handle = void 0;\n\n    _handle = function handle(children) {\n      _react2['default'].Children.forEach(children, function (child, i) {\n        if (child === null || child === undefined) {\n          return _this2;\n        }\n\n        if (typeof child.type === 'function') {\n          if (child.type.componentMark === 'item-main') {\n            if (child.props.opened) {\n              openedKeys = openedKeys || [];\n              openedKeys.push(child.props.itemid || child.key);\n            }\n\n            if (child.props.selected) {\n              selectedKey = child.props.itemid || child.key;\n            }\n          }\n        }\n\n        if (child.props) {\n          if (child.props.children) {\n            return _handle(child.props.children);\n          }\n        }\n      });\n    };\n\n    _handle(children);\n\n    return {\n      selectedKey: selectedKey,\n      openedKeys: openedKeys\n    };\n  };\n\n  NavigationMain.prototype.componentWillMount = function componentWillMount() {\n    var key = void 0;\n\n    if (!this.context.main) {\n      key = this.collectKey(this.props.children);\n\n      if (!this.state.selectedKey) {\n        this.state.selectedKey = key.selectedKey;\n      }\n\n      if (!this.state.openedKeys) {\n        this.state.openedKeys = key.openedKeys;\n      }\n    }\n  };\n\n  NavigationMain.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var key = void 0,\n        state = {},\n        recently = void 0,\n        current = void 0;\n\n    if (!this.context.main) {\n      key = this.collectKey(nextProps.children);\n\n      if (nextProps.selectedKey) {\n        state.selectedKey = nextProps.selectedKey;\n      } else {\n        state.selectedKey = key.selectedKey;\n      }\n\n      if (nextProps.openedKeys) {\n        state.openedKeys = nextProps.openedKeys;\n      } else {\n        current = key.openedKeys;\n        recently = this.collectKey(this.props.children).openedKeys;\n\n        if (!(current === recently)) {\n          if (current === undefined || recently === undefined) {\n            state.openedKeys = current || [];\n          } else {\n            if (!(current.length === recently.length)) {\n              current = current.sort();\n              recently = recently.sort();\n\n              if (current.some(function (key, i) {\n                return !(key === recently[i]);\n              })) {\n                state.openedKeys = current;\n              }\n            }\n          }\n        }\n      }\n\n      if (nextProps.type) {\n        state.type = nextProps.type;\n      }\n\n      this.setState(state);\n\n      if (nextProps.type) {\n        if (!(this.state.type === nextProps.type)) {\n          this.onChangeType(this.state.type, nextProps.type);\n        }\n      }\n    }\n  };\n\n  NavigationMain.prototype.onChangeType = function onChangeType(type, nextType) {\n    var hasTree = type === 'tree' || nextType === 'tree',\n        toTree = hasTree ? nextType === 'tree' : false,\n        state = this.state,\n        length = state.nestingPath ? state.nestingPath.length : 0,\n        item = void 0;\n\n    if (hasTree) {\n      if (state.nestingPath) {\n        if (state.nestingPath.length > 0) {\n          if (toTree) {\n            item = state.nestingPath[length - 1];\n          } else {\n            item = state.nestingPath[0];\n          }\n\n          if (item.props.selectedStyle) {\n            if (length === 1) {\n              if (item.props.hasChildren) {\n                return this.setState({\n                  selectedKey: null\n                });\n              }\n            }\n\n            this.setState({\n              selectedKey: item.props.itemid\n            });\n          }\n        }\n      }\n    }\n  };\n\n  NavigationMain.prototype.cloneProperty = function cloneProperty() {\n    var props = this.props,\n        newProps = {},\n        empty = function empty() {},\n        onSelect = void 0,\n        onUnFold = void 0,\n        onFold = void 0;\n\n    Object.keys(props).forEach(function (key) {\n      newProps[key] = props[key];\n    });\n    onSelect = newProps['onSelect'] || empty;\n    onUnFold = newProps['onUnFold'] || empty;\n    onFold = newProps['onFold'] || empty;\n\n    newProps['onSelect'] = function (itemid, item) {\n      var selectedStyle = item.props.selectedStyle,\n          state = this.state;\n      state.nestingPath = item.nestingPath;\n\n      if (selectedStyle) {\n        state.selectedKey = itemid;\n      }\n\n      onSelect.apply(null, arguments);\n    }.bind(this);\n\n    newProps['onFold'] = function (itemid) {\n      if (!this.state.openedKeys) {\n        this.state.openedKeys = [];\n      }\n\n      var index = this.state.openedKeys.indexOf(itemid);\n\n      if (index > -1) {\n        this.state.openedKeys.splice(index, 1);\n        this.setState({\n          openedKeys: this.state.openedKeys\n        });\n      }\n\n      onFold.apply(null, arguments);\n    }.bind(this);\n\n    newProps['onUnFold'] = function (itemid) {\n      if (!this.state.openedKeys) {\n        this.state.openedKeys = [];\n      }\n\n      var hasThisKey = this.state.openedKeys.indexOf(itemid) > -1;\n\n      if (!hasThisKey) {\n        this.state.openedKeys.push(itemid);\n      }\n\n      this.setState({\n        openedKeys: this.state.openedKeys\n      });\n      onUnFold.apply(null, arguments);\n    }.bind(this);\n\n    newProps['selectedKey'] = this.state.selectedKey;\n    newProps['openedKeys'] = this.state.openedKeys;\n    newProps['type'] = this.state.type;\n    return newProps;\n  };\n\n  NavigationMain.prototype.render = function render() {\n    var context = this.context;\n    var type = context.type || this.props.type;\n    var component = void 0;\n    var props = context.main ? this.props : this.cloneProperty();\n    type = type.toLowerCase();\n    component = NavigationMain.typeMap[type];\n\n    if (component) {\n      return _react2['default'].createElement(component, props, this.props.children);\n    }\n  };\n\n  return NavigationMain;\n}(_react2['default'].Component), _class.componentMark = 'navigation-main', _class.typeMap = {\n  line: _line2['default'],\n  text: _text2['default'],\n  slip: _slip2['default'],\n  tree: _tree2['default'],\n  normal: _normal2['default'],\n  filling: _filling2['default'],\n  icononly: _icononly2['default']\n}, _temp);\nNavigationMain.displayName = 'NavigationMain';\nexports['default'] = NavigationMain;\nNavigationMain.propTypes = {\n  type: _propTypes2['default'].string,\n  children: _propTypes2['default'].any\n};\nNavigationMain.defaultProps = {\n  type: 'text'\n};\nNavigationMain.contextTypes = {\n  type: _propTypes2['default'].string,\n  main: _propTypes2['default'].any\n};\nNavigationMain.childContextTypes = {\n  main: _propTypes2['default'].any\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}