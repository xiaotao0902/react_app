{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _asyncValidator = require('async-validator');\n\nvar _asyncValidator2 = _interopRequireDefault(_asyncValidator);\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _nextUtil = require('../../next-util/lib/index.js');\n\nvar _utils = require('./utils.js');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction noop() {}\n\nvar initMeta = {\n  state: '',\n  valueName: 'value',\n  trigger: 'onChange'\n};\n\nvar Field = function () {\n  function Field(com, options) {\n    var _this = this;\n\n    _classCallCheck(this, Field);\n\n    this.com = com;\n    this.fieldsMeta = {};\n    this.cachedBind = {}; //解决每次函数新增的问题\n\n    this.onChange = noop;\n    this.parseName = false;\n    this.forceUpdate = false;\n    this.scrollToFirstError = false; //TODO: set true in 1.0 version\n\n    this.autoUnmount = false; //TODO: set true in 1.0 version\n\n    this.deepReset = false; //TODO: set true in 1.0 version\n\n    if (!this.com) {\n      _nextUtil.log.warning('`this` is missing in `Field`, you should use like `new Field(this)`');\n    }\n\n    if (options) {\n      if (options.onChange) {\n        this.onChange = options.onChange;\n      }\n\n      ['parseName', 'forceUpdate', 'scrollToFirstError', 'autoUnmount', 'deepReset'].forEach(function (m) {\n        if (m in options && options[m]) {\n          _this[m] = true;\n        }\n      });\n    }\n\n    ['init', 'getValue', 'getValues', 'setValue', 'setValues', 'getError', 'setError', 'setErrors', 'validate', 'getState', 'isValidating', 'reset', 'remove'].forEach(function (m) {\n      _this[m] = _this[m].bind(_this);\n    });\n  }\n\n  Field.prototype.init = function init(name) {\n    var _this2 = this;\n\n    var fieldOption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _fieldOption$valueNam = fieldOption.valueName,\n        valueName = _fieldOption$valueNam === undefined ? 'value' : _fieldOption$valueNam,\n        _fieldOption$trigger = fieldOption.trigger,\n        trigger = _fieldOption$trigger === undefined ? 'onChange' : _fieldOption$trigger,\n        _fieldOption$rules = fieldOption.rules,\n        rules = _fieldOption$rules === undefined ? null : _fieldOption$rules,\n        initValue = fieldOption.initValue,\n        _fieldOption$normaliz = fieldOption.normalize,\n        normalize = _fieldOption$normaliz === undefined ? null : _fieldOption$normaliz,\n        _fieldOption$getValue = fieldOption.getValueFromEvent,\n        getValueFromEvent = _fieldOption$getValue === undefined ? normalize : _fieldOption$getValue,\n        _fieldOption$props = fieldOption.props,\n        props = _fieldOption$props === undefined ? {} : _fieldOption$props;\n    var originalProps = (0, _objectAssign2['default'])({}, props);\n\n    if (!(name in this.fieldsMeta)) {\n      this.fieldsMeta[name] = _extends({}, initMeta, {\n        initValue: initValue\n      });\n    }\n\n    var fieldMeta = this.fieldsMeta[name];\n    normalize && _nextUtil.log.deprecated('normalize', 'getValueFromEvent', 'Field');\n    valueName in props && _nextUtil.log.warning('`init` will override `props.' + valueName + '`, don\\'t set it directly, and you can use `setValue` to change it');\n    var defaultValueName = 'default' + valueName[0].toUpperCase() + valueName.slice(1);\n    typeof initValue !== 'undefined' && defaultValueName in props && _nextUtil.log.warning('`option.initValue` will take place of `' + defaultValueName + ', they can\\'t be used toghter');\n    (0, _objectAssign2['default'])(fieldMeta, {\n      valueName: valueName,\n      getValueFromEvent: getValueFromEvent,\n      rules: rules,\n      rulesMap: rules ? this._getRulesMap(name, rules, trigger) : null //map the rules by the key of trigger\n\n    }); // 兼容defaultValue逻辑：存在defaultValue的时候，value不能赋值，否则defaultValue不生效\n\n    if (!('value' in fieldMeta)) {\n      if (typeof initValue !== 'undefined') {\n        fieldMeta.value = initValue;\n      } else if (defaultValueName in props) {\n        fieldMeta.value = props[defaultValueName];\n      }\n    }\n\n    var inputProps = {\n      'data-meta': 'Field',\n      id: name,\n      //TODO: will be remove at 1.0 version\n      ref: this.autoUnmount ? this._getCacheBind(name, name + '__ref', this._saveRef) : name //TODO: will be remove at 1.0 version\n\n    };\n\n    if ('value' in fieldMeta) {\n      inputProps[valueName] = fieldMeta.value;\n    }\n\n    if (rules) {\n      var _loop = function _loop(action) {\n        inputProps[action] = function () {\n          _this2._onChangeValidate(name, action);\n\n          action in props && typeof props[action] === 'function' && props[action].apply(props, arguments);\n\n          _this2._reRender();\n        };\n      };\n\n      for (var action in fieldMeta.rulesMap) {\n        _loop(action);\n      }\n    } // trigger here maybe replace action, but validator won't be lost, it will still be checked in _onChange\n\n\n    inputProps[trigger] = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this2._onChange.apply(_this2, [name, trigger].concat(args));\n\n      trigger in props && typeof props[trigger] === 'function' && props[trigger].apply(props, args);\n\n      _this2.onChange(name, fieldMeta.value);\n\n      _this2._reRender();\n    };\n\n    delete originalProps[defaultValueName];\n    delete originalProps[valueName];\n    return (0, _objectAssign2['default'])(originalProps, inputProps);\n  }; // 提取rule里面的trigger并且做映射\n\n\n  Field.prototype._getRulesMap = function _getRulesMap(name, rules, trigger) {\n    var rulesMap = {}; // 根据trigger做校验分组\n\n    if (rules.length) {\n      for (var i = 0; i < rules.length; i++) {\n        this._validateMap(rulesMap, rules[i], trigger);\n      }\n    } else if (!Array.isArray(rules)) {\n      this._validateMap(rulesMap, rules, trigger);\n    }\n\n    return rulesMap;\n  }; // 根据trigger做校验分组\n\n\n  Field.prototype._validateMap = function _validateMap(rulesMap, rule, defaultTrigger) {\n    if (!('trigger' in rule)) {\n      rule.trigger = [defaultTrigger];\n    }\n\n    if (typeof rule.trigger === 'string') {\n      rule.trigger = [rule.trigger];\n    }\n\n    for (var i = 0; i < rule.trigger.length; i++) {\n      var trigger = rule.trigger[i];\n\n      if (trigger in rulesMap) {\n        rulesMap[trigger].push(rule);\n      } else {\n        rulesMap[trigger] = [rule];\n      }\n    }\n\n    delete rule.trigger;\n  }; //手动修改触发\n\n\n  Field.prototype._onChange = function _onChange(name, action) {\n    for (var _len2 = arguments.length, others = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      others[_key2 - 2] = arguments[_key2];\n    }\n\n    var e = others[0];\n\n    var fieldMeta = this._get(name);\n\n    if (!fieldMeta) {\n      return;\n    }\n\n    fieldMeta.value = fieldMeta.getValueFromEvent ? fieldMeta.getValueFromEvent.apply(this, others) : (0, _utils.getValueFromEvent)(e);\n\n    this._resetError(name);\n\n    var rulesMap = fieldMeta.rulesMap;\n\n    if (rulesMap && action in rulesMap) {\n      this._validate(rulesMap[action], name, fieldMeta.value);\n    }\n  }; //校验事件触发\n\n\n  Field.prototype._onChangeValidate = function _onChangeValidate(name, action) {\n    var fieldMeta = this._get(name);\n\n    var rulesMap = fieldMeta.rulesMap;\n\n    if (action in rulesMap) {\n      this._validate(rulesMap[action], name, this.getValue(name));\n    }\n  };\n\n  Field.prototype._getCacheBind = function _getCacheBind(name, action, fn) {\n    var cache = this.cachedBind[name] = this.cachedBind[name] || {};\n\n    if (!cache[action]) {\n      cache[action] = fn.bind(this, name);\n    }\n\n    return cache[action];\n  };\n\n  Field.prototype._saveRef = function _saveRef(name, component) {\n    if (!component) {\n      // after destroy, delete data\n      delete this.fieldsMeta[name];\n      return;\n    }\n\n    var fieldMeta = this._get(name);\n\n    if (fieldMeta) {\n      fieldMeta.ref = component;\n    }\n  }; // 会做初始化value兼容检测\n\n\n  Field.prototype.getValue = function getValue(name) {\n    var field = this._get(name);\n\n    if (field) {\n      if ('value' in field) {\n        return field.value;\n      } else if (this.com && this.com.refs) {\n        //TODO: remove get defaultValue by ref in 1.0BR\n        var ref = this.com.refs[name] || field.ref; // 第一次ref很可能取不到\n\n        if (ref) {\n          var value = (0, _utils.getDefaultValue)(ref, field.valueName);\n          field.value = value;\n\n          if (typeof value !== 'undefined') {\n            field.initValue = value;\n          }\n\n          return field.value;\n        }\n      }\n    }\n\n    return undefined;\n  };\n\n  Field.prototype.getValues = function getValues(names) {\n    var _this3 = this;\n\n    var fields = names || this.getNames();\n    var allValues = {};\n    fields.forEach(function (f) {\n      if (!_this3.parseName) {\n        allValues[f] = _this3.getValue(f);\n      } else {\n        allValues = (0, _utils.setIn)(allValues, f, _this3.getValue(f));\n      }\n    });\n    return allValues;\n  };\n\n  Field.prototype.setValue = function setValue(name, value) {\n    var reRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (name in this.fieldsMeta) {\n      this.fieldsMeta[name].value = value; // this.onChange({[name]:value});     //人为set不应该属于onChange事件\n\n      reRender && this._reRender();\n    } else {\n      this.fieldsMeta[name] = {\n        value: value\n      };\n    }\n  };\n\n  Field.prototype.setValues = function setValues() {\n    var _this4 = this;\n\n    var fieldsValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!this.parseName) {\n      for (var name in fieldsValue) {\n        this.setValue(name, fieldsValue[name], false);\n      }\n    } else {\n      var fields = this.getNames();\n      fields.forEach(function (name) {\n        var value = (0, _utils.getIn)(fieldsValue, name);\n\n        if (value !== undefined) {\n          _this4.setValue(name, value, false);\n        }\n      });\n    }\n\n    this._reRender();\n  };\n\n  Field.prototype.setError = function setError(name, errors) {\n    var err = Array.isArray(errors) ? errors : errors ? [errors] : [];\n\n    if (name in this.fieldsMeta) {\n      this.fieldsMeta[name].errors = err;\n    } else {\n      this.fieldsMeta[name] = {\n        errors: err\n      };\n    }\n\n    if (this.fieldsMeta[name].errors && this.fieldsMeta[name].errors.length > 0) {\n      this.fieldsMeta[name].state = 'error';\n    } else {\n      this.fieldsMeta[name].state = '';\n    }\n\n    this._reRender();\n  };\n\n  Field.prototype.setErrors = function setErrors() {\n    var fieldsErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    for (var name in fieldsErrors) {\n      this.setError(name, fieldsErrors[name]);\n    }\n  };\n\n  Field.prototype.getError = function getError(name) {\n    var field = this._get(name);\n\n    if (field && field.errors && field.errors.length) {\n      return field.errors;\n    }\n\n    return null;\n  };\n\n  Field.prototype.getErrors = function getErrors(names) {\n    var _this5 = this;\n\n    var fields = names || this.getNames();\n    var allErrors = {};\n    fields.forEach(function (f) {\n      allErrors[f] = _this5.getError(f);\n    });\n    return allErrors;\n  };\n\n  Field.prototype.getState = function getState(name) {\n    var field = this._get(name);\n\n    if (field && field.state) {\n      return field.state;\n    }\n\n    return '';\n  }; //TODO: isValidating can be replace by getState, and will be removed at 1.0 version\n\n\n  Field.prototype.isValidating = function isValidating(name) {\n    var field = this._get(name);\n\n    return !!field && !!field.state === 'validating';\n  }; //手动触发校验\n\n\n  Field.prototype.validate = function validate(ns, opt, cb) {\n    var _this6 = this;\n\n    var _getParams = (0, _utils.getParams)(ns, opt, cb),\n        names = _getParams.names,\n        options = _getParams.options,\n        callback = _getParams.callback;\n\n    var fieldNames = names || this.getNames();\n    var descriptor = {};\n    var values = {};\n    var hasRule = false;\n\n    for (var i = 0; i < fieldNames.length; i++) {\n      var name = fieldNames[i];\n\n      var fieldMeta = this._get(name);\n\n      if (!fieldMeta) continue;\n\n      if (fieldMeta.rules && (Array.isArray(fieldMeta.rules) && fieldMeta.rules.length || Object.prototype.toString.call(fieldMeta.rules) === '[object Object]')) {\n        descriptor[name] = fieldMeta.rules;\n        values[name] = this.getValue(name);\n        hasRule = true; // 清空错误\n\n        fieldMeta.errors = [];\n        fieldMeta.state = '';\n      }\n    }\n\n    if (!hasRule) {\n      callback && callback(null, this.getValues(fieldNames));\n      return;\n    }\n\n    var validate = new _asyncValidator2['default'](descriptor);\n    validate.validate(values, options, function (errors) {\n      var errorsGroup = null;\n\n      if (errors && errors.length) {\n        errorsGroup = {};\n        errors.forEach(function (e) {\n          var fieldName = e.field;\n\n          if (!errorsGroup[fieldName]) {\n            errorsGroup[fieldName] = {\n              errors: []\n            };\n          }\n\n          var fieldErrors = errorsGroup[fieldName].errors;\n          fieldErrors.push(e.message);\n        });\n      }\n\n      if (errorsGroup) {\n        // 更新每个field里面error信息\n        for (var _i in errorsGroup) {\n          var field = _this6._get(_i);\n\n          field.errors = errorsGroup[_i].errors;\n          field.state = 'error';\n        }\n      } //没有错误的修改状态为成功\n\n\n      for (var _i2 = 0; _i2 < fieldNames.length; _i2++) {\n        var _name = fieldNames[_i2];\n\n        var _fieldMeta = _this6._get(_name);\n\n        if (_fieldMeta.rules && !(errorsGroup && _name in errorsGroup)) {\n          _fieldMeta.state = 'success';\n        }\n      }\n\n      callback && callback(errorsGroup, _this6.getValues(fieldNames));\n\n      _this6._reRender();\n\n      if (errorsGroup && _this6.scrollToFirstError) {\n        var firstNode = void 0;\n        var firstTop = void 0;\n\n        for (var _i3 in errorsGroup) {\n          var instance = _this6.com.refs[_i3] || _this6._get(_i3).ref;\n\n          var node = _reactDom2['default'].findDOMNode(instance);\n\n          if (!node) {\n            return;\n          }\n\n          var top = node.getBoundingClientRect().top;\n\n          if (firstTop === undefined || firstTop > top) {\n            firstTop = top;\n            firstNode = node;\n          }\n        }\n\n        if (firstNode && firstNode.scrollIntoView) {\n          firstNode.scrollIntoView();\n        }\n      }\n    });\n  };\n  /**\n   * clear form OR reset to default\n   * @param ns\n   * @param backToDefault\n   */\n\n\n  Field.prototype.reset = function reset(ns) {\n    var _this7 = this;\n\n    var backToDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var changed = false;\n\n    if (typeof ns === 'string') {\n      ns = [ns];\n    } else if (typeof ns === 'boolean') {\n      backToDefault = ns;\n      ns = null;\n    }\n\n    var names = ns || Object.keys(this.fieldsMeta);\n    names.forEach(function (name) {\n      var field = _this7._get(name);\n\n      _this7.getValue(name);\n\n      if (field) {\n        changed = true;\n\n        if (_this7.deepReset) {\n          //有默认值的情况\n          if (backToDefault && 'initValue' in field) {\n            field.value = field.initValue;\n          } else {\n            field.value = undefined;\n          }\n        } else {\n          /* eslint-disable no-lonely-if */\n          if ('initValue' in field) {\n            if (backToDefault === false) {\n              if (typeof field.value === 'string') {\n                field.value = '';\n              } else {\n                field.value = field.initValue;\n              }\n            } else {\n              field.value = field.initValue;\n            }\n          } else {\n            // 没有设置默认值的情况\n\n            /* eslint-disable no-lonely-if */\n            if (typeof field.value === 'boolean') {\n              field.value = false;\n            } else if (typeof field.value === 'string') {\n              field.value = '';\n            } else {\n              field.value = undefined;\n            }\n          }\n        }\n\n        field.state = ''; // delete field.value;\n\n        delete field.errors;\n        delete field.rules;\n        delete field.rulesMap;\n      }\n    });\n\n    if (changed) {\n      this._reRender();\n    }\n  }; //单个校验\n\n\n  Field.prototype._validate = function _validate(rule, name, value) {\n    var _this8 = this;\n\n    var field = this._get(name);\n\n    field.state = 'validating';\n    var validate = new _asyncValidator2['default'](_defineProperty({}, name, rule));\n    validate.validate(_defineProperty({}, name, value), function (errors) {\n      if (errors && errors.length) {\n        field.errors = (0, _utils.getErrorStrs)(errors);\n        field.state = 'error';\n      } else {\n        field.errors = []; //清空错误\n\n        field.state = 'success';\n      }\n\n      _this8._reRender();\n    });\n  };\n\n  Field.prototype._resetError = function _resetError(name) {\n    var field = this._get(name);\n\n    delete field.errors; //清空错误\n\n    field.state = '';\n  };\n\n  Field.prototype.getNames = function getNames() {\n    var fieldsMeta = this.fieldsMeta;\n    return fieldsMeta ? Object.keys(fieldsMeta).filter(function () {\n      return true;\n    }) : [];\n  }; //触发render重绘组件\n\n\n  Field.prototype._reRender = function _reRender() {\n    if (this.com) {\n      if (!this.forceUpdate && this.com.setState) {\n        this.com.setState({});\n      } else if (this.com.forceUpdate) {\n        this.com.forceUpdate(); //forceUpdate 对性能有较大的影响，成指数上升\n      }\n    }\n  };\n\n  Field.prototype._get = function _get(name) {\n    return name in this.fieldsMeta ? this.fieldsMeta[name] : null;\n  };\n\n  Field.prototype._getAll = function _getAll() {\n    return this.fieldsMeta;\n  };\n\n  Field.prototype.remove = function remove(ns) {\n    var _this9 = this;\n\n    if (typeof ns === 'string') {\n      ns = [ns];\n    }\n\n    var names = ns || Object.keys(this.fieldsMeta);\n    names.forEach(function (name) {\n      if (name in _this9.fieldsMeta) {\n        delete _this9.fieldsMeta[name];\n      }\n    });\n  };\n\n  return Field;\n}();\n\nexports['default'] = Field;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}