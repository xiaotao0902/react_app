{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/* eslint-disable */\n\n\nvar BinaryReader = function () {\n  function BinaryReader() {\n    _classCallCheck(this, BinaryReader);\n\n    this._II = false;\n    this._bin = null;\n  }\n\n  BinaryReader.prototype._read = function _read(idx, size) {\n    var mv = this._II ? 0 : -8 * (size - 1);\n    var sum = 0,\n        i = void 0;\n\n    for (i = 0; i < size; i++) {\n      sum |= this._bin.charCodeAt(idx + i) << Math.abs(mv + i * 8);\n    }\n\n    return sum;\n  };\n\n  BinaryReader.prototype._write = function _write(idx, num, size) {\n    var str = '';\n    var mv = this._II ? 0 : -8 * (size - 1),\n        i = void 0;\n\n    for (i = 0; i < size; i++) {\n      str += String.fromCharCode(num >> Math.abs(mv + i * 8) & 255);\n    }\n\n    this._putstr(str, idx, size);\n  };\n\n  BinaryReader.prototype._putstr = function _putstr(segment, idx, length) {\n    length = arguments.length === 3 ? length : this._bin.length - idx - 1;\n    this._bin = this._bin.substr(0, idx) + segment + this._bin.substr(length + idx);\n  };\n\n  BinaryReader.prototype.II = function II(order) {\n    if (order === undefined) return this._II;\n    this._II = order;\n  };\n\n  BinaryReader.prototype.init = function init(binData) {\n    this._II = false;\n    this._bin = binData;\n  };\n\n  BinaryReader.prototype.SEGMENT = function SEGMENT(idx, length, segment) {\n    var bin = this._bin;\n\n    switch (arguments.length) {\n      case 1:\n        return bin.substr(idx, bin.length - idx - 1);\n\n      case 2:\n        return bin.substr(idx, length);\n\n      case 3:\n        this._putstr(segment, idx, length);\n\n        break;\n\n      default:\n        return bin;\n    }\n  };\n\n  BinaryReader.prototype.BYTE = function BYTE(idx) {\n    return this._read(idx, 1);\n  };\n\n  BinaryReader.prototype.SHORT = function SHORT(idx) {\n    return this._read(idx, 2);\n  };\n\n  BinaryReader.prototype.LONG = function LONG(idx, num) {\n    if (num === undefined) {\n      return this._read(idx, 4);\n    }\n\n    this._write(idx, num, 4);\n  };\n\n  BinaryReader.prototype.SLONG = function SLONG(idx) {\n    // 2's complement notation\n    var num = this._read(idx, 4);\n\n    return num > 2147483647 ? num - 4294967296 : num;\n  };\n\n  BinaryReader.prototype.STRING = function STRING(idx, size) {\n    var str = '';\n\n    for (size += idx; idx < size; idx++) {\n      str += String.fromCharCode(this._read(idx, 1));\n    }\n\n    return str;\n  };\n\n  return BinaryReader;\n}();\n\nexports['default'] = BinaryReader;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}