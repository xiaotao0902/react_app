{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = undefined;\n\nvar _class, _temp; //将DOM元素渲染到指定的容器\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar Children = _react2['default'].Children; //<body> [containerNode]\n//  <div>\n//      <content></content>  [contentNode]\n// </div>  [wrapperNode]\n// </body>\n\n/** Overlay.Gateway */\n\nvar Gateway = (_temp = _class = function (_React$Component) {\n  _inherits(Gateway, _React$Component);\n\n  function Gateway() {\n    _classCallCheck(this, Gateway);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Gateway.prototype.componentWillReceiveProps = function componentWillReceiveProps(newProps) {\n    if (this.wrapper) {\n      var currentContainer = this.getContainerNode(this.props);\n      var newContainer = this.getContainerNode(newProps);\n\n      if (newContainer !== currentContainer) {\n        newContainer.appendChild(this.wrapper);\n      }\n    }\n  };\n\n  Gateway.prototype.componentDidMount = function componentDidMount() {\n    this._renderOverlay();\n  };\n\n  Gateway.prototype.componentDidUpdate = function componentDidUpdate() {\n    this._renderOverlay();\n  };\n\n  Gateway.prototype.componentWillUnmount = function componentWillUnmount() {\n    this._unRenderWrapper();\n  };\n\n  Gateway.prototype._renderOverlay = function _renderOverlay() {\n    var _this2 = this;\n\n    var children = this.props.children ? Children.only(this.props.children) : null;\n\n    if (children) {\n      this._renderWrapper(); // add refs of overlay\n\n\n      var originRef = typeof children.ref === 'function' ? children.ref : null;\n      children = _react2['default'].cloneElement(children, {\n        ref: function ref(node) {\n          originRef && originRef(node);\n          _this2._overlay = node;\n        }\n      });\n\n      _reactDom2['default'].unstable_renderSubtreeIntoContainer(this, children, this.wrapper);\n    } else {\n      this._unRenderWrapper();\n    }\n  };\n\n  Gateway.prototype._renderWrapper = function _renderWrapper() {\n    if (!this.wrapper) {\n      this.wrapper = document.createElement('div');\n      this.wrapper.setAttribute('data-tag', 'gateway-wrapper');\n      this.getContainerNode().appendChild(this.wrapper);\n    }\n  };\n\n  Gateway.prototype._unRenderWrapper = function _unRenderWrapper() {\n    if (this.wrapper) {\n      _reactDom2['default'].unmountComponentAtNode(this.wrapper);\n\n      var containerNode = this.getContainerNode();\n      containerNode && containerNode.removeChild(this.wrapper);\n      this._overlay = null;\n      this.wrapper = null;\n    }\n  };\n\n  Gateway.prototype.getNode = function getNode(props, name, node) {\n    var container = (props || this.props)[name];\n\n    if (typeof container === 'function') {\n      container = container(node);\n    }\n\n    if (typeof container === 'string') {\n      container = document.getElementById(container);\n    } else {\n      try {\n        container = _reactDom2['default'].findDOMNode(container);\n      } catch (err) {// regardless of error\n      }\n    }\n\n    return container;\n  };\n\n  Gateway.prototype.getContainerNode = function getContainerNode(props) {\n    return this.getNode(props, 'container', this.getTargetNode());\n  };\n\n  Gateway.prototype.getTargetNode = function getTargetNode(props) {\n    return this.getNode(props, 'target');\n  };\n\n  Gateway.prototype.getContentNode = function getContentNode() {\n    if (this._overlay) {\n      return _reactDom2['default'].findDOMNode(this._overlay);\n    }\n  };\n\n  Gateway.prototype.getWrapperNode = function getWrapperNode() {\n    return this.wrapper;\n  };\n\n  Gateway.prototype.render = function render() {\n    return null;\n  };\n\n  return Gateway;\n}(_react2['default'].Component), _class.propTypes = {\n  children: _propTypes2['default'].any,\n\n  /**\n   * 指定渲染children的容器\n   */\n  container: _propTypes2['default'].any\n}, _class.defaultProps = {\n  container: function container() {\n    return document.body;\n  }\n}, _temp);\nGateway.displayName = 'Gateway';\nexports['default'] = Gateway;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}