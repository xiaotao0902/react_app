{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.getValueFromEvent = getValueFromEvent;\nexports.getDefaultValue = getDefaultValue;\nexports.getErrorStrs = getErrorStrs;\nexports.getParams = getParams;\nexports.setIn = setIn;\nexports.getIn = getIn;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction getValueFromEvent(e) {\n  // support custom element\n  if (!e || !e.target) {\n    return e;\n  }\n\n  var target = e.target;\n\n  if (target.type === 'checkbox') {\n    return target.checked;\n  } else if (target.type === 'radio') {\n    //兼容radioGroup\n    if (target.value) {\n      return target.value;\n    } else {\n      return target.checked;\n    }\n  }\n\n  return target.value;\n}\n\nfunction getDefaultValue(ref, valueName) {\n  if (!ref) {\n    return undefined;\n  }\n\n  if (ref.nodeType && ref.nodeType === 1) {\n    //原生\n    if (ref.nodeName === 'INPUT') {\n      switch (ref.type) {\n        case 'checkbox':\n        case 'radio':\n          if ('defaultChecked' in ref) {\n            return ref.defaultChecked;\n          }\n\n          break;\n      }\n    }\n\n    if ('defaultValue' in ref) {\n      return ref.defaultValue;\n    } else if ('value' in ref) {\n      //原生的select设置defaultValue，但是ref上面只有value属性\n      return ref.value;\n    }\n  } else {\n    var defaultValue = 'default' + valueName.substring(0, 1).toUpperCase() + valueName.substring(1);\n\n    if (defaultValue in ref.props) {\n      return ref.props[defaultValue];\n    }\n\n    if ('defaultValue' in ref.props) {\n      return ref.props.defaultValue;\n    } else if ('defaultChecked' in ref.props) {\n      return ref.props.defaultChecked;\n    }\n  }\n\n  return undefined;\n}\n\nfunction getErrorStrs(errors) {\n  if (errors) {\n    return errors.map(function (e) {\n      if ('message' in e) {\n        return e.message;\n      }\n\n      return e;\n    });\n  }\n\n  return errors;\n} // export function isEmptyObject(obj) {\n//     return Object.keys(obj).length === 0;\n// }\n// export function flattenArray(arr) {\n//     return Array.prototype.concat.apply([], arr);\n// }\n// export function mirror(obj) {\n//     return obj;\n// }\n// export function hasRules(validate) {\n//     if (validate) {\n//         return validate.some((item) => {\n//             return !!item.rules && item.rules.length;\n//         });\n//     }\n//     return false;\n// }\n\n\nfunction getParams(ns, opt, cb) {\n  var names = typeof ns === 'string' ? [ns] : ns;\n  var callback = cb;\n  var options = opt;\n\n  if (cb === undefined) {\n    if (typeof names === 'function') {\n      callback = names;\n      options = {};\n      names = undefined;\n    } else if (Array.isArray(names)) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      } else {\n        options = options || {};\n      }\n    } else {\n      callback = options;\n      options = names || {};\n      names = undefined;\n    }\n  }\n\n  return {\n    names: names,\n    callback: callback,\n    options: options\n  };\n}\n/**\n * get value from key like 'a.b.c'\n * @param obj\n * @param strKey like a.b.c\n * @returns {*}\n */\n// export function getValueByStringKey(obj, strKey = '') {\n//     if (!strKey) {\n//         return obj;\n//     }\n//     return strKey.split('.').reduce((previousValue, currentValue) => {\n//         return previousValue[currentValue];\n//     }, obj);\n// }\n\n/**\n * set value by key like 'a.b.c'\n * @param obj a.b.c = value\n * @param strKey\n * @param value\n */\n// export function setValueByStringKey(obj, strKey = '', value) {\n//     if (!strKey) {\n//         return obj;\n//     }\n//     return strKey.split('.').reduce((previousValue, currentValue, i, arr) => {\n//         if (!(currentValue in previousValue)) {\n//             previousValue[currentValue] = {};\n//         }\n//         if (i === arr.length - 1) {\n//             previousValue[currentValue] = value;\n//         }\n//         return previousValue[currentValue];\n//     }, obj);\n// }\n\n\nvar setInWithPath = function setInWithPath(state, value, path, pathIndex) {\n  if (pathIndex >= path.length) {\n    return value;\n  }\n\n  var first = path[pathIndex];\n  var next = setInWithPath(state && state[first], value, path, pathIndex + 1);\n\n  if (!state) {\n    var initialized = isNaN(first) ? {} : [];\n    initialized[first] = next;\n    return initialized;\n  }\n\n  if (Array.isArray(state)) {\n    var copy = [].concat(state);\n    copy[first] = next;\n    return copy;\n  }\n\n  return _extends({}, state, _defineProperty({}, first, next));\n};\n\nfunction setIn(state, name, value) {\n  return setInWithPath(state, value, name.replace(/\\[/, '.').replace(/\\]/, '').split('.'), 0);\n}\n\nfunction getIn(state, name) {\n  if (!state) {\n    return state;\n  }\n\n  var path = name.replace(/\\[/, '.').replace(/\\]/, '').split('.');\n  var length = path.length;\n\n  if (!length) {\n    return undefined;\n  }\n\n  var result = state;\n\n  for (var i = 0; i < length && !!result; ++i) {\n    result = result[path[i]];\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}