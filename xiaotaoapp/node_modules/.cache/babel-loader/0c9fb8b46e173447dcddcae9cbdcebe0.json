{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _deepMerge = require('./deep-merge.js');\n\nvar _deepMerge2 = _interopRequireDefault(_deepMerge);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar LOCALE_CACHE = 'zh-cn';\nvar COMPONENTS_LOCALE_CACHE = {};\n\nvar getDisplayName = function getDisplayName(Component) {\n  return Component.displayName || Component.name || (typeof Component === 'string' ? Component : 'Component');\n};\n\nvar Locale = function Locale(Component) {\n  var _class, _temp;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var LocaleProvider = (_temp = _class = function (_React$Component) {\n    _inherits(LocaleProvider, _React$Component);\n\n    function LocaleProvider() {\n      _classCallCheck(this, LocaleProvider);\n\n      return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n    }\n\n    LocaleProvider.prototype._getInstance = function _getInstance(componentInstance) {\n      if (componentInstance) {\n        this.refs = componentInstance.refs;\n        this._instance = componentInstance;\n      }\n    };\n\n    LocaleProvider.prototype.getInstance = function getInstance() {\n      return this._instance;\n    };\n\n    LocaleProvider.prototype.render = function render() {\n      var _props = this.props,\n          language = _props.language,\n          _props$locale = _props.locale,\n          locale = _props$locale === undefined ? {} : _props$locale,\n          others = _objectWithoutProperties(_props, ['language', 'locale']);\n\n      var defaultLocale = void 0,\n          displayName = void 0,\n          cacheLocale = void 0,\n          resultLocale = void 0;\n\n      if (!language) {\n        language = Locale.get();\n      } // 获取组件挂载的默认多语言文案，增加英文兜底\n\n\n      defaultLocale = LocaleProvider.LOCALE && (LocaleProvider.LOCALE[language] || LocaleProvider.LOCALE['en-us']); // 组件名称\n\n      displayName = getDisplayName(Component); // 缓存的多语言文案\n\n      cacheLocale = COMPONENTS_LOCALE_CACHE[displayName] ? COMPONENTS_LOCALE_CACHE[displayName] : {}; // 最终的多语言文案\n\n      if (options.deepMerge) {\n        resultLocale = (0, _deepMerge2['default'])(defaultLocale, cacheLocale, locale);\n      } else {\n        resultLocale = _extends({}, defaultLocale, cacheLocale, locale);\n      }\n\n      others.ref = this._getInstance.bind(this);\n      return _react2['default'].createElement(Component, _extends({\n        locale: resultLocale,\n        language: language\n      }, others));\n    };\n\n    return LocaleProvider;\n  }(_react2['default'].Component), _class.propTypes = {\n    language: _propTypes2['default'].string,\n    locale: _propTypes2['default'].object\n  }, _temp);\n  LocaleProvider.displayName = 'LocaleProvider';\n  Locale.init(LocaleProvider);\n  LocaleProvider.displayName = 'LocaleProvider(' + getDisplayName(Component) + ')';\n  return LocaleProvider;\n};\n\nLocale.init = function (Component) {\n  Component.LOCALE = Component.LOCALE || {};\n};\n\nLocale.set = function (lang) {\n  LOCALE_CACHE = lang;\n};\n\nLocale.get = function () {\n  return LOCALE_CACHE;\n};\n\nLocale.setComponents = function (locales) {\n  COMPONENTS_LOCALE_CACHE = _extends({}, COMPONENTS_LOCALE_CACHE, locales);\n};\n\nexports['default'] = Locale;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}