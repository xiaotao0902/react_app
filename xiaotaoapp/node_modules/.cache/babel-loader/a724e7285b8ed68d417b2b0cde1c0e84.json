{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _nextSelect = require('../../next-select/lib/index.js');\n\nvar _nextSelect2 = _interopRequireDefault(_nextSelect);\n\nvar _nextInput = require('../../next-input/lib/index.js');\n\nvar _nextInput2 = _interopRequireDefault(_nextInput);\n\nvar _nextIcon = require('../../next-icon/lib/index.js');\n\nvar _nextIcon2 = _interopRequireDefault(_nextIcon);\n\nvar _nextTree = require('../../next-tree/lib/index.js');\n\nvar _nextTree2 = _interopRequireDefault(_nextTree);\n\nvar _util = require('../../next-tree/lib/util/index.js');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar noop = function noop() {};\n/**\n * TreeSelect\n */\n\n\nvar TreeSelect = (_temp = _class = function (_Component) {\n  _inherits(TreeSelect, _Component);\n\n  function TreeSelect(props, context) {\n    _classCallCheck(this, TreeSelect);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    var defaultVisible = props.defaultVisible,\n        defaultValue = props.defaultValue,\n        value = props.value;\n    _this.state = {\n      visible: defaultVisible,\n      value: _this.normalizeValue(typeof value === 'undefined' ? defaultValue : value),\n      searchedValue: '',\n      expandedKeys: [],\n      autoExpandParent: false\n    };\n    ['handleSelect', 'handleCheck', 'handleSearch', 'handleVisibleChange', 'handleRemove', 'handleExpand'].forEach(function (methodName) {\n      _this[methodName] = _this[methodName].bind(_this);\n    });\n\n    _this.updateCache(props);\n\n    _this.checked = false;\n    return _this;\n  }\n\n  TreeSelect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.updateCache(nextProps);\n\n    if ('value' in nextProps) {\n      this.setState({\n        value: this.normalizeValue(nextProps.value)\n      });\n    }\n  };\n\n  TreeSelect.prototype.normalizeValue = function normalizeValue(value) {\n    if (value !== undefined && value !== null) {\n      if (Array.isArray(value)) {\n        return value;\n      }\n\n      return [value];\n    }\n\n    return [];\n  };\n\n  TreeSelect.prototype.updateCache = function updateCache(props) {\n    var _this2 = this;\n\n    this._k2n = {};\n    this._v2k = {};\n    this._p2v = {};\n\n    var update = function update(key, value, pos, label) {\n      _this2._k2n[key] = {\n        value: value,\n        pos: pos,\n        label: label\n      };\n      _this2._v2k[value] = key;\n      _this2._p2v[pos] = value;\n    };\n\n    if ('dataSource' in props) {\n      var loop = function loop(data) {\n        var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n        return data.forEach(function (item, index) {\n          var key = item.key,\n              value = item.value,\n              label = item.label,\n              children = item.children;\n          var pos = prefix + '-' + index;\n          update(typeof key !== 'undefined' ? key : pos, value, pos, label);\n\n          if (children && children.length) {\n            loop(children, pos);\n          }\n        });\n      };\n\n      loop(props.dataSource);\n    } else if ('children' in props) {\n      var _loop = function _loop(children) {\n        var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n        return _react2['default'].Children.forEach(children, function (node, index) {\n          var key = node.key;\n          var _node$props = node.props,\n              value = _node$props.value,\n              label = _node$props.label,\n              children = _node$props.children;\n          var pos = prefix + '-' + index;\n          update(key, value, pos, label);\n\n          if (children && _react2['default'].Children.count(children)) {\n            _loop(children, pos);\n          }\n        });\n      };\n\n      _loop(props.children);\n    }\n  };\n\n  TreeSelect.prototype.getPrefix = function getPrefix() {\n    return this.context.prefix || this.props.prefix;\n  };\n\n  TreeSelect.prototype.getKeys = function getKeys(value) {\n    var _this3 = this;\n\n    return value.reduce(function (ret, v) {\n      if (v in _this3._v2k) {\n        ret.push(_this3._v2k[v]);\n      }\n\n      return ret;\n    }, []);\n  };\n\n  TreeSelect.prototype.getValueFromSelectedKeys = function getValueFromSelectedKeys(keys) {\n    var _this4 = this;\n\n    return keys.map(function (k) {\n      return _this4._k2n[k].value;\n    });\n  };\n\n  TreeSelect.prototype.getValueFromCheckedKeys = function getValueFromCheckedKeys(keys) {\n    var _this5 = this;\n\n    if (!this.props.treeCheckStrictly) {\n      var posArr = keys.map(function (k) {\n        return _this5._k2n[k].pos;\n      });\n      posArr = (0, _util.filterParentPosition)(posArr);\n      return posArr.map(function (p) {\n        return _this5._p2v[p];\n      });\n    }\n\n    return keys.map(function (k) {\n      return _this5._k2n[k].value;\n    });\n  };\n\n  TreeSelect.prototype.getSelectValue = function getSelectValue(value) {\n    var _this6 = this;\n\n    var filterValue = value.filter(function (v) {\n      return typeof _this6._v2k[v] !== 'undefined';\n    });\n    var flatValue = this.flatValue(filterValue);\n    var newValue = [].concat(_toConsumableArray(flatValue));\n\n    for (var i = 0; i < flatValue.length; i++) {\n      if (newValue.indexOf(flatValue[i]) === -1) {\n        continue;\n      }\n\n      var pos = this.getPos(flatValue[i]);\n      var nums = pos.split('-');\n\n      if (nums.length === 2) {\n        continue;\n      }\n\n      for (var j = nums.length - 2; j > 0; j--) {\n        var parent = this.getDataByPosition(nums.slice(1, j + 1));\n        var parentChecked = parent.children.every(function (child) {\n          return newValue.indexOf(child.value) > -1;\n        });\n\n        if (parentChecked) {\n          parent.children.forEach(function (child) {\n            newValue.splice(newValue.indexOf(child.value), 1);\n          });\n          newValue.push(parent.value);\n        } else {\n          break;\n        }\n      }\n    }\n\n    return newValue;\n  };\n\n  TreeSelect.prototype.getDataByPosition = function getDataByPosition(posNums) {\n    if ('dataSource' in this.props) {\n      return posNums.reduce(function (ret, num) {\n        return ret.children[num];\n      }, {\n        children: this.props.dataSource\n      });\n    }\n\n    if ('children' in this.props) {\n      var node = posNums.reduce(function (ret, num) {\n        return _react2['default'].Children.toArray(ret.props.children)[num];\n      }, this);\n      return {\n        value: node.props.value,\n        children: _react2['default'].Children.map(node.props.children, function (node) {\n          return {\n            value: node.props.value\n          };\n        })\n      };\n    }\n  };\n\n  TreeSelect.prototype.flatValue = function flatValue(value) {\n    var _this7 = this;\n\n    var getDepth = function getDepth(v) {\n      return _this7.getPos(v).split('-').length;\n    };\n\n    var newValue = value.slice(0).sort(function (prev, next) {\n      return getDepth(next) - getDepth(prev);\n    });\n\n    for (var i = 0; i < newValue.length; i++) {\n      for (var j = i + 1; j < newValue.length; j++) {\n        if (this.isDescendantOrSelf(this.getPos(newValue[j]), this.getPos(newValue[i]))) {\n          newValue.splice(i, 1);\n          i--;\n          break;\n        }\n      }\n    }\n\n    return newValue;\n  };\n\n  TreeSelect.prototype.getPos = function getPos(value) {\n    return this._k2n[this._v2k[value]].pos;\n  };\n\n  TreeSelect.prototype.isDescendantOrSelf = function isDescendantOrSelf(currentPos, targetPos) {\n    if (!currentPos || !targetPos) {\n      return false;\n    }\n\n    var currentNums = currentPos.split('-');\n    var targetNums = targetPos.split('-');\n    return currentNums.length <= targetNums.length && currentNums.every(function (num, index) {\n      return num === targetNums[index];\n    });\n  };\n\n  TreeSelect.prototype.getData = function getData(value, isSelect) {\n    var _this8 = this;\n\n    var _props = this.props,\n        treeCheckable = _props.treeCheckable,\n        treeCheckStrictly = _props.treeCheckStrictly;\n\n    if (isSelect && !this.checked && treeCheckable && !treeCheckStrictly) {\n      value = this.getSelectValue(value);\n    }\n\n    return value.reduce(function (ret, v) {\n      if (v in _this8._v2k) {\n        var k = _this8._v2k[v];\n        var _k2n$k = _this8._k2n[k],\n            label = _k2n$k.label,\n            pos = _k2n$k.pos;\n        var d = {\n          value: v,\n          label: label,\n          pos: pos\n        };\n\n        if (!isSelect) {\n          d.key = k;\n        }\n\n        ret.push(d);\n      }\n\n      return ret;\n    }, []);\n  };\n\n  TreeSelect.prototype.handleVisibleChange = function handleVisibleChange(visible) {\n    this.setState({\n      visible: visible\n    });\n  };\n\n  TreeSelect.prototype.handleSelect = function handleSelect(selectedKeys, extra) {\n    var _props2 = this.props,\n        multiple = _props2.multiple,\n        onChange = _props2.onChange;\n    var selected = extra.selected;\n\n    if (multiple || selected) {\n      var st = {};\n      var value = this.getValueFromSelectedKeys(selectedKeys);\n\n      if (!('value' in this.props)) {\n        st.value = value;\n      }\n\n      if (!multiple) {\n        st.visible = false;\n      }\n\n      if (Object.keys(st).length) {\n        this.setState(st);\n      }\n\n      var data = this.getData(value);\n      multiple ? onChange(value, data) : onChange(value[0], data[0]);\n    } else {\n      this.setState({\n        visible: false\n      });\n    }\n  };\n\n  TreeSelect.prototype.handleCheck = function handleCheck(checkedKeys) {\n    var onChange = this.props.onChange;\n    var value = this.getValueFromCheckedKeys(checkedKeys);\n\n    if (!('value' in this.props)) {\n      this.setState({\n        value: value\n      });\n    }\n\n    onChange(value, this.getData(value));\n    this.checked = true;\n  };\n\n  TreeSelect.prototype.handleRemove = function handleRemove(value) {\n    var _props3 = this.props,\n        multiple = _props3.multiple,\n        treeCheckable = _props3.treeCheckable,\n        onChange = _props3.onChange;\n    value = this.normalizeValue(value);\n\n    if (!('value' in this.props)) {\n      this.setState({\n        value: value\n      });\n    }\n\n    var data = this.getData(value);\n\n    if (!multiple && !treeCheckable) {\n      value = value.length ? value[0] : null;\n      data = data.length ? data[0] : null;\n    }\n\n    onChange(value, data);\n  };\n\n  TreeSelect.prototype.handleSearch = function handleSearch(searchedValue) {\n    var _this9 = this;\n\n    var searchedKeys = [];\n    var retainedKeys = [];\n    Object.keys(this._k2n).forEach(function (k) {\n      var _k2n$k2 = _this9._k2n[k],\n          label = _k2n$k2.label,\n          pos = _k2n$k2.pos;\n\n      if (_this9.isSearched(label, searchedValue)) {\n        searchedKeys.push(k);\n        var posArr = pos.split('-');\n        posArr.forEach(function (n, i) {\n          if (i > 0) {\n            var p = posArr.slice(0, i + 1).join('-');\n            var kk = _this9._v2k[_this9._p2v[p]];\n\n            if (retainedKeys.indexOf(kk) === -1) {\n              retainedKeys.push(kk);\n            }\n          }\n        });\n      }\n    });\n    this.setState({\n      searchedValue: searchedValue,\n      expandedKeys: searchedKeys,\n      autoExpandParent: true\n    });\n    this.searchedKeys = searchedKeys;\n    this.retainedKeys = retainedKeys;\n    this.props.onSearch(searchedValue);\n  };\n\n  TreeSelect.prototype.handleExpand = function handleExpand(expandedKeys) {\n    this.setState({\n      expandedKeys: expandedKeys,\n      autoExpandParent: false\n    });\n  };\n\n  TreeSelect.prototype.isSearched = function isSearched(label, searchedValue) {\n    var labelString = '';\n\n    var loop = function loop(arg) {\n      if (_react2['default'].isValidElement(arg) && arg.props.children) {\n        _react2['default'].Children.forEach(arg.props.children, loop);\n      } else if (typeof arg === 'string') {\n        labelString += arg;\n      }\n    };\n\n    loop(label);\n\n    if (labelString.length >= searchedValue.length && labelString.indexOf(searchedValue) > -1) {\n      return true;\n    }\n\n    return false;\n  };\n\n  TreeSelect.prototype.searchNodes = function searchNodes(children) {\n    var _this10 = this;\n\n    var loop = function loop(children) {\n      var retainedNodes = [];\n\n      _react2['default'].Children.forEach(children, function (child) {\n        if (_this10.searchedKeys.indexOf(child.key) > -1) {\n          retainedNodes.push(child);\n        } else if (_this10.retainedKeys.indexOf(child.key) > -1) {\n          var retainedNode = child.props.children ? _react2['default'].cloneElement(child, {}, loop(child.props.children)) : child;\n          retainedNodes.push(retainedNode);\n        } else {\n          var hideNode = _react2['default'].cloneElement(child, {\n            style: {\n              display: 'none'\n            }\n          });\n\n          retainedNodes.push(hideNode);\n        }\n      });\n\n      return retainedNodes;\n    };\n\n    return loop(children);\n  };\n\n  TreeSelect.prototype.createNodesByData = function createNodesByData(data, isSearched) {\n    var _this11 = this;\n\n    var loop = function loop(data, isParentMatched) {\n      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';\n      var retainedNodes = [];\n      data.forEach(function (item, index) {\n        var label = item.label,\n            value = item.value,\n            disabled = item.disabled,\n            selectable = item.selectable,\n            disableCheckbox = item.disableCheckbox,\n            isLeaf = item.isLeaf,\n            children = item.children;\n        var props = {\n          label: label,\n          value: value,\n          disabled: disabled,\n          disableCheckbox: disableCheckbox,\n          isLeaf: isLeaf,\n          selectable: typeof selectable === 'undefined' ? true : !!selectable\n        };\n        var pos = prefix + '-' + index;\n\n        var addNode = function addNode(isParentMatched, hide) {\n          if (hide) {\n            props.style = {\n              display: 'none'\n            };\n          }\n\n          retainedNodes.push(_react2['default'].createElement(_nextTree.Node, _extends({}, props, {\n            key: _this11._v2k[_this11._p2v[pos]]\n          }), children && children.length ? loop(children, isParentMatched, pos) : null));\n        };\n\n        if (isSearched) {\n          if (_this11.searchedKeys.indexOf(pos) > -1 || isParentMatched) {\n            addNode(true);\n          } else if (_this11.retainedKeys.indexOf(pos) > -1) {\n            addNode(false);\n          } else {\n            addNode(false, true);\n          }\n        } else {\n          addNode();\n        }\n      });\n      return retainedNodes;\n    };\n\n    return loop(data, false);\n  };\n\n  TreeSelect.prototype.renderOverlay = function renderOverlay() {\n    var _this12 = this;\n\n    var prefix = this.getPrefix();\n    var treeSelectPrefix = prefix + 'tree-select-';\n\n    if (!this.state.visible) {\n      return _react2['default'].createElement('div', {\n        className: treeSelectPrefix + 'dropdown',\n        ref: 'menu'\n      });\n    }\n\n    var _props4 = this.props,\n        multiple = _props4.multiple,\n        treeCheckable = _props4.treeCheckable,\n        treeCheckStrictly = _props4.treeCheckStrictly,\n        treeEnableCheckedCache = _props4.treeEnableCheckedCache,\n        treeDefaultExpandAll = _props4.treeDefaultExpandAll,\n        treeDefaultExpandedKeys = _props4.treeDefaultExpandedKeys,\n        treeLoadData = _props4.treeLoadData,\n        showSearch = _props4.showSearch,\n        dataSource = _props4.dataSource,\n        children = _props4.children;\n    var _state = this.state,\n        value = _state.value,\n        searchedValue = _state.searchedValue,\n        expandedKeys = _state.expandedKeys,\n        autoExpandParent = _state.autoExpandParent;\n    var treeProps = {\n      multiple: multiple,\n      loadData: treeLoadData,\n      defaultExpandAll: treeDefaultExpandAll,\n      defaultExpandedKeys: treeDefaultExpandedKeys\n    };\n    var keys = this.getKeys(value);\n\n    if (treeCheckable) {\n      treeProps.checkable = treeCheckable;\n      treeProps.checkStrictly = treeCheckStrictly;\n      treeProps.onCheck = this.handleCheck;\n      treeProps.checkedKeys = keys;\n      treeProps.enableCheckedCache = treeEnableCheckedCache;\n    } else {\n      treeProps.onSelect = this.handleSelect;\n      treeProps.selectedKeys = keys;\n    }\n\n    var newChildren = void 0;\n\n    if (showSearch && searchedValue) {\n      treeProps.expandedKeys = expandedKeys;\n      treeProps.autoExpandParent = autoExpandParent;\n      treeProps.onExpand = this.handleExpand;\n\n      treeProps.filterTreeNode = function (node) {\n        return _this12.searchedKeys.indexOf(node.props.eventKey) > -1;\n      };\n\n      newChildren = dataSource ? this.createNodesByData(dataSource, true) : this.searchNodes(children);\n    } else {\n      newChildren = dataSource ? this.createNodesByData(dataSource) : children;\n    }\n\n    return _react2['default'].createElement('div', {\n      className: treeSelectPrefix + 'dropdown',\n      ref: 'menu'\n    }, showSearch ? _react2['default'].createElement('div', {\n      className: prefix + 'select-search'\n    }, _react2['default'].createElement(_nextInput2['default'], {\n      defaultValue: this.state.searchedValue,\n      onChange: this.handleSearch\n    }), _react2['default'].createElement(_nextIcon2['default'], {\n      type: 'search',\n      size: 'small'\n    })) : null, _react2['default'].createElement(_nextTree2['default'], treeProps, newChildren));\n  };\n\n  TreeSelect.prototype.render = function render() {\n    var prefix = this.getPrefix();\n    /* eslint-disable no-unused-vars */\n\n    var _props5 = this.props,\n        propsPrefix = _props5.prefix,\n        size = _props5.size,\n        shape = _props5.shape,\n        placeholder = _props5.placeholder,\n        defaultValue = _props5.defaultValue,\n        propsValue = _props5.value,\n        dataSource = _props5.dataSource,\n        onChange = _props5.onChange,\n        defaultVisible = _props5.defaultVisible,\n        disabled = _props5.disabled,\n        hasArrow = _props5.hasArrow,\n        hasClear = _props5.hasClear,\n        autoWidth = _props5.autoWidth,\n        popupClassName = _props5.popupClassName,\n        showSearch = _props5.showSearch,\n        onSearch = _props5.onSearch,\n        multiple = _props5.multiple,\n        treeCheckable = _props5.treeCheckable,\n        treeCheckStrictly = _props5.treeCheckStrictly,\n        treeDefaultExpandAll = _props5.treeDefaultExpandAll,\n        treeLoadData = _props5.treeLoadData,\n        className = _props5.className,\n        children = _props5.children,\n        container = _props5.container,\n        others = _objectWithoutProperties(_props5, ['prefix', 'size', 'shape', 'placeholder', 'defaultValue', 'value', 'dataSource', 'onChange', 'defaultVisible', 'disabled', 'hasArrow', 'hasClear', 'autoWidth', 'popupClassName', 'showSearch', 'onSearch', 'multiple', 'treeCheckable', 'treeCheckStrictly', 'treeDefaultExpandAll', 'treeLoadData', 'className', 'children', 'container']);\n    /* eslint-enable */\n\n\n    var _state2 = this.state,\n        value = _state2.value,\n        visible = _state2.visible;\n    return _react2['default'].createElement(_nextSelect2['default'], _extends({\n      prefix: prefix,\n      className: className,\n      size: size,\n      shape: shape,\n      placeholder: placeholder,\n      disabled: disabled,\n      hasArrow: hasArrow,\n      hasClear: hasClear,\n      autoWidth: autoWidth,\n      popupClassName: popupClassName,\n      multiple: treeCheckable || multiple,\n      value: this.getData(value, true),\n      onChange: this.handleRemove,\n      visible: visible,\n      onVisibleChange: this.handleVisibleChange,\n      overlay: this.renderOverlay(),\n      container: container\n    }, others));\n  };\n\n  return TreeSelect;\n}(_react.Component), _class.contextTypes = {\n  prefix: _propTypes2['default'].string\n}, _class.propTypes = {\n  /**\n   * 样式类名的品牌前缀\n   */\n  prefix: _propTypes2['default'].string,\n\n  /**\n   * 自定义类名\n   */\n  className: _propTypes2['default'].string,\n\n  /**\n   * 自定义内联样式\n   */\n  style: _propTypes2['default'].object,\n\n  /**\n   * 树节点\n   */\n  children: _propTypes2['default'].node,\n\n  /**\n   * 选择框大小\n   */\n  size: _propTypes2['default'].oneOf(['small', 'medium', 'large']),\n\n  /**\n   * 选择框形状\n   */\n  shape: _propTypes2['default'].oneOf(['normal', 'arrow-only']),\n\n  /**\n   * 选择框占位符\n   */\n  placeholder: _propTypes2['default'].string,\n\n  /**\n   * 是否禁用\n   */\n  disabled: _propTypes2['default'].bool,\n\n  /**\n   * 是否显示右侧的箭头\n   */\n  hasArrow: _propTypes2['default'].bool,\n\n  /**\n   * 是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效\n   */\n  hasClear: _propTypes2['default'].bool,\n\n  /**\n   * 下拉框是否与选择器对齐\n   */\n  autoWidth: _propTypes2['default'].bool,\n\n  /**\n   * 数据源，该属性优先级高于 children\n   */\n  dataSource: _propTypes2['default'].arrayOf(_propTypes2['default'].object),\n\n  /**\n   * （受控）当前值\n   */\n  value: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].number, _propTypes2['default'].array]),\n\n  /**\n   * （非受控）默认值\n   */\n  defaultValue: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].number, _propTypes2['default'].array]),\n\n  /**\n   * 选中值改变时触发的回调函数\n   * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n   * @param {Object|Array} data 选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点\n   */\n  onChange: _propTypes2['default'].func,\n\n  /**\n   * 初始下拉框是否显示\n   */\n  defaultVisible: _propTypes2['default'].bool,\n\n  /**\n   * 是否显示搜索框\n   */\n  showSearch: _propTypes2['default'].bool,\n\n  /**\n   * 在搜索框中输入时触发的回调函数\n   * @param {String} keyword 输入的关键字\n   */\n  onSearch: _propTypes2['default'].func,\n\n  /**\n   * 是否支持多选\n   */\n  multiple: _propTypes2['default'].bool,\n\n  /**\n   * 下拉框中的树是否支持勾选节点的复选框\n   */\n  treeCheckable: _propTypes2['default'].bool,\n\n  /**\n   * 下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联）\n   */\n  treeCheckStrictly: _propTypes2['default'].bool,\n\n  /**\n   * 是否启用勾选节点复选框的缓存来提高性能，如果 dataSource 需要被动态更新，请将其设置为 false\n   */\n  treeEnableCheckedCache: _propTypes2['default'].bool,\n\n  /**\n   * 下拉框中的树是否默认展开所有节点\n   */\n  treeDefaultExpandAll: _propTypes2['default'].bool,\n\n  /**\n   * 下拉框中的树默认展开节点key的数组\n   */\n  treeDefaultExpandedKeys: _propTypes2['default'].arrayOf(_propTypes2['default'].string),\n\n  /**\n   * 下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=tree#tree-4)\n   * @param {ReactElement} node 被点击展开的节点\n   */\n  treeLoadData: _propTypes2['default'].func,\n\n  /**\n   * 下拉框样式自定义类名\n   */\n  popupClassName: _propTypes2['default'].string,\n\n  /**\n   * 下拉框挂载的容器节点\n   */\n  container: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].func])\n}, _class.defaultProps = {\n  prefix: 'next-',\n  size: 'medium',\n  shape: 'normal',\n  disabled: false,\n  hasArrow: true,\n  hasClear: false,\n  autoWidth: false,\n  defaultValue: null,\n  defaultVisible: false,\n  onChange: noop,\n  showSearch: false,\n  onSearch: noop,\n  multiple: false,\n  treeCheckable: false,\n  treeCheckStrictly: false,\n  treeEnableCheckedCache: true,\n  treeDefaultExpandAll: false,\n  treeDefaultExpandedKeys: []\n}, _temp);\nTreeSelect.displayName = 'TreeSelect';\nexports['default'] = TreeSelect;\nTreeSelect.Node = _nextTree.Node;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}