{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _nextCheckbox = require('../../next-checkbox/lib/index.js');\n\nvar _nextCheckbox2 = _interopRequireDefault(_nextCheckbox);\n\nvar _nextRadio = require('../../next-radio/lib/index.js');\n\nvar _nextRadio2 = _interopRequireDefault(_nextRadio);\n\nvar _classnames6 = require('classnames');\n\nvar _classnames7 = _interopRequireDefault(_classnames6);\n\nvar _nextIcon = require('../../next-icon/lib/index.js');\n\nvar _nextIcon2 = _interopRequireDefault(_nextIcon);\n\nvar _nextUtil = require('../../next-util/lib/index.js');\n\nvar _nextDom = require('../../next-dom/lib/index.js');\n\nvar _nextLocaleProvider = require('../../next-locale-provider/lib/index.js');\n\nvar _nextLocaleProvider2 = _interopRequireDefault(_nextLocaleProvider);\n\nvar _filter = require('./filter.js');\n\nvar _filter2 = _interopRequireDefault(_filter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar Children = _react2['default'].Children,\n    noop = function noop() {},\n    findDOMNode = _reactDom2['default'].findDOMNode,\n    getScrollbarSize = _nextUtil.scrollbar,\n    makeChain = _nextUtil.func.makeChain; //<Table>\n//    <Table.Column/>\n//    <Table.ColumnGroup>\n//      <Table.Column/>\n//      <Table.Column/>\n//    </Table.ColumnGroup>\n//</Table>\n\n/** Table */\n\n\nvar Table = (_temp = _class = function (_React$Component) {\n  _inherits(Table, _React$Component);\n\n  function Table(props, context) {\n    _classCallCheck(this, Table);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.state = _extends({}, _this.normalizeChildrenState(props), {\n      dataSource: _this.analyseDataSource(props.dataSource, props),\n      selectedRowKeys: props.rowSelection && 'selectedRowKeys' in props.rowSelection ? props.rowSelection.selectedRowKeys || [] : [],\n      sort: props.sort || {},\n      expandedRowKeys: props.expandedRowKeys || [],\n      openRowKeys: props.openRowKeys || []\n    });\n    _this.notRenderCellIndex = false;\n    return _this;\n  }\n\n  Table.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var state = this.normalizeChildrenState(nextProps);\n\n    if ('dataSource' in nextProps) {\n      state.dataSource = this.analyseDataSource(nextProps.dataSource, nextProps);\n    }\n\n    if ('sort' in nextProps) {\n      state.sort = nextProps.sort || {};\n    }\n\n    if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {\n      state.selectedRowKeys = nextProps.rowSelection.selectedRowKeys || [];\n    }\n\n    if ('expandedRowKeys' in nextProps) {\n      state.expandedRowKeys = nextProps.expandedRowKeys;\n    }\n\n    if ('openRowKeys' in nextProps) {\n      state.openRowKeys = nextProps.openRowKeys;\n    }\n\n    this.setState(state);\n  };\n\n  Table.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.optimization) {\n      if (shallowEqual(this.props, nextProps) && shallowEqual(this.state, nextState)) {\n        return false;\n      }\n\n      return true;\n    } else {\n      return true;\n    }\n  };\n\n  Table.prototype.componentWillUpdate = function componentWillUpdate() {\n    this.notRenderCellIndex = false; // 标记是否在lock中有合并单元格的情况，如果在lock中有合并单元格的情况采用更复杂的高度同步计算方式\n\n    this.rowSpanLock = false;\n  };\n\n  Table.prototype.normalizeChildrenState = function normalizeChildrenState(props) {\n    var normalizeChildren = this.normalizeChildren(props.children);\n\n    if (props.expandedRowRender && props.hasExpandedRowCtrl) {\n      normalizeChildren.unshift(this.renderExpandedNode());\n    }\n\n    if (props.rowSelection) {\n      normalizeChildren.unshift(this.renderSelectionNode());\n    }\n\n    var splitChildren = this.splitFromNormalizeChildren(normalizeChildren),\n        lockLeftChildren = splitChildren.lockLeftChildren,\n        lockRightChildren = splitChildren.lockRightChildren,\n        children = this.mergeFromSplitLockChildren(splitChildren),\n        state = this.fetchInfoFromBinaryChildren(children),\n        lockLeftChildrenMeta = this.fetchInfoFromBinaryChildren(lockLeftChildren),\n        lockRightChildrenMeta = this.fetchInfoFromBinaryChildren(lockRightChildren);\n    state.lockLeftGroupChildren = lockLeftChildrenMeta.groupChildren;\n    state.lockLeftChildren = lockLeftChildrenMeta.flatChildren;\n    state.lockRightGroupChildren = lockRightChildrenMeta.groupChildren;\n    state.lockRightChildren = lockRightChildrenMeta.flatChildren;\n    return state;\n  }; // 将React结构化数据提取props转换成数组\n\n\n  Table.prototype.normalizeChildren = function normalizeChildren(children) {\n    var isLock = false,\n        getChildren = function getChildren(children) {\n      var result = [];\n      Children.forEach(children, function (child) {\n        if (child) {\n          var props = _extends({}, child.props),\n              type = child.type,\n              mark = type._tableMark;\n\n          if (['column', 'column-group', 'list-group-header'].indexOf(mark) === -1) {\n            _nextUtil.log.warning('Use <Table.Column/>,<Table.ColumnGroup/>,<Table.GroupHeader/> as child.');\n          }\n\n          props.__mark = mark;\n\n          if ([true, 'left', 'right'].indexOf(props.lock) > -1) {\n            isLock = true;\n\n            if (!('width' in props)) {\n              _nextUtil.log.warning('Should config width for lock column named [ ' + props.dataIndex + ' ].');\n            }\n          }\n\n          result.push(props);\n\n          if (child.props.children) {\n            props.children = getChildren(child.props.children);\n          }\n        }\n      });\n      return result;\n    };\n\n    var result = getChildren(children);\n    this._isLock = isLock;\n    return result;\n  };\n\n  Table.prototype.getPrefix = function getPrefix() {\n    return this.context.prefix || this.props.prefix;\n  }; //从数组中分离出lock的列和正常的列\n\n\n  Table.prototype.splitFromNormalizeChildren = function splitFromNormalizeChildren(children) {\n    var originChildren = deepCopy(children),\n        lockLeftChildren = deepCopy(children),\n        lockRightChildren = deepCopy(children),\n        loop = function loop(lockChildren, condition) {\n      var result = [];\n      lockChildren.forEach(function (child) {\n        if (child.children) {\n          var res = loop(child.children, condition);\n\n          if (!res.length) {\n            result.push(child);\n          }\n        } else {\n          var order = condition(child);\n\n          if (!order) {\n            result.push(child);\n          }\n        }\n      });\n      result.forEach(function (res) {\n        var index = lockChildren.indexOf(res);\n        lockChildren.splice(index, 1);\n      });\n      return lockChildren;\n    };\n\n    loop(lockLeftChildren, function (child) {\n      if (child.lock === true || child.lock === 'left') {\n        return 'left';\n      }\n    });\n    loop(lockRightChildren, function (child) {\n      if (child.lock === 'right') {\n        return 'right';\n      }\n    });\n    loop(originChildren, function (child) {\n      return child.lock !== true && child.lock !== 'left' && child.lock !== 'right';\n    });\n    return {\n      lockLeftChildren: lockLeftChildren,\n      lockRightChildren: lockRightChildren,\n      originChildren: originChildren\n    };\n  }; //将左侧的锁列树和中间的普通树及右侧的锁列树进行合并\n\n\n  Table.prototype.mergeFromSplitLockChildren = function mergeFromSplitLockChildren(splitChildren) {\n    var lockLeftChildren = splitChildren.lockLeftChildren,\n        lockRightChildren = splitChildren.lockRightChildren,\n        originChildren = splitChildren.originChildren;\n    Array.prototype.unshift.apply(originChildren, lockLeftChildren);\n    originChildren = originChildren.concat(lockRightChildren);\n    return originChildren;\n  }; // 将结构化的数据转换成适合render的数据\n\n\n  Table.prototype.fetchInfoFromBinaryChildren = function fetchInfoFromBinaryChildren(children) {\n    var flatChildren = [],\n        groupChildren = [],\n        hasListGroupHeader = void 0,\n        listGroupHeader = void 0,\n        hasGroupHeader = void 0,\n        getChildren = function getChildren(propsChildren, level) {\n      groupChildren[level] = groupChildren[level] || [];\n      propsChildren.forEach(function (child) {\n        var mark = child.__mark;\n\n        if (mark === 'list-group-header') {\n          hasListGroupHeader = true;\n          listGroupHeader = child;\n        } else {\n          if (mark === 'column-group') {\n            hasGroupHeader = true;\n            getChildren(child.children, level + 1);\n          } else if (mark === 'column') {\n            flatChildren.push(child);\n          }\n\n          groupChildren[level].push(child);\n        }\n      });\n    },\n        getColSpan = function getColSpan(children, colSpan) {\n      colSpan = colSpan || 0;\n      children.forEach(function (child) {\n        if (child.children) {\n          colSpan = getColSpan(child.children, colSpan);\n        } else {\n          colSpan += 1;\n        }\n      });\n      return colSpan;\n    };\n\n    getChildren(children, 0);\n    groupChildren.forEach(function (groupChild, i) {\n      groupChild.forEach(function (child, j) {\n        var children = child.children,\n            colSpan = void 0;\n\n        if (children) {\n          colSpan = getColSpan(children);\n          child.colSpan = colSpan;\n          groupChildren[i][j] = child;\n        }\n      });\n    });\n    return {\n      flatChildren: flatChildren,\n      groupChildren: groupChildren,\n      hasListGroupHeader: hasListGroupHeader,\n      listGroupHeader: listGroupHeader,\n      hasGroupHeader: hasGroupHeader\n    };\n  }; // 渲染checkbox,直接使用序列化后的数据格式\n\n\n  Table.prototype.renderSelectionNode = function renderSelectionNode() {\n    var column = {\n      cell: this.renderSelectionCell('body'),\n      title: this.renderSelectionCell('header'),\n      width: 50,\n      className: this.getPrefix() + 'table-selection',\n      __mark: 'column',\n      __type: 'selection'\n    };\n\n    if (this.isOriginLock()) {\n      column.lock = true;\n    }\n\n    return column;\n  };\n\n  Table.prototype.renderSelectionCell = function renderSelectionCell(type) {\n    var _this2 = this;\n\n    return function (value, index, record) {\n      var checked = void 0,\n          onChange = void 0,\n          attrs = {},\n          _props = _this2.props,\n          rowSelection = _props.rowSelection,\n          primaryKey = _props.primaryKey,\n          _state = _this2.state,\n          selectedRowKeys = _state.selectedRowKeys,\n          dataSource = _state.dataSource,\n          hasListGroupHeader = _state.hasListGroupHeader,\n          mode = rowSelection.mode ? rowSelection.mode : 'multiple';\n\n      if (hasListGroupHeader) {\n        dataSource = _this2.flatDataSource(dataSource);\n      }\n\n      if (type === 'header') {\n        checked = !!selectedRowKeys.length;\n        dataSource.filter(function (record, index) {\n          if (!rowSelection.getProps) {\n            return true;\n          } else {\n            return !(rowSelection.getProps(record, index) || {}).disabled;\n          }\n        }).map(function (record) {\n          return record[primaryKey];\n        }).forEach(function (id) {\n          if (selectedRowKeys.indexOf(id) === -1) {\n            checked = false;\n          }\n        });\n        onChange = _this2.selectAllRow.bind(_this2);\n\n        if (mode !== 'multiple') {\n          return null;\n        }\n      } else {\n        checked = _this2.state.selectedRowKeys.indexOf(record[_this2.props.primaryKey]) > -1;\n        onChange = _this2.selectOneRow.bind(_this2, index, record);\n        attrs = rowSelection.getProps ? rowSelection.getProps(record, index) || {} : {};\n      }\n\n      attrs.onClick = makeChain(function (e) {\n        e.stopPropagation();\n      }, attrs.onClick);\n      return mode === 'multiple' ? _react2['default'].createElement(_nextCheckbox2['default'], _extends({\n        checked: checked,\n        onChange: onChange\n      }, attrs)) : _react2['default'].createElement(_nextRadio2['default'], _extends({\n        checked: checked,\n        onChange: onChange\n      }, attrs));\n    };\n  }; //渲染额外的控制数据的项\n\n\n  Table.prototype.renderExpandedNode = function renderExpandedNode() {\n    var column = {\n      cell: this.renderExpandedCell('body'),\n      title: this.renderExpandedCell('header'),\n      width: 50,\n      className: this.getPrefix() + 'table-expanded',\n      __mark: 'column',\n      __type: 'expanded'\n    };\n\n    if (this.isOriginLock()) {\n      column.lock = true;\n    }\n\n    return column;\n  };\n\n  Table.prototype.renderExpandedCell = function renderExpandedCell(type) {\n    var _this3 = this;\n\n    return function (value, index, record) {\n      var getExpandedColProps = _this3.props.getExpandedColProps,\n          prefix = _this3.getPrefix();\n\n      if (type === 'header') {\n        return '';\n      } else {\n        var _classnames;\n\n        var expandedRowKeys = _this3.state.expandedRowKeys,\n            primaryKey = _this3.props.primaryKey,\n            switchNode = expandedRowKeys.indexOf(record[primaryKey]) > -1 ? _react2['default'].createElement(_nextIcon2['default'], {\n          type: 'minus',\n          size: 'xs'\n        }) : _react2['default'].createElement(_nextIcon2['default'], {\n          type: 'add',\n          size: 'xs'\n        }),\n            attrs = getExpandedColProps(record, index) || {},\n            cls = void 0;\n\n        if (!attrs.disabled) {\n          attrs.onClick = _this3.onExpandedClick.bind(_this3, value, record, index);\n        }\n\n        cls = (0, _classnames7['default'])((_classnames = {}, _defineProperty(_classnames, prefix + 'table-expanded-ctrl', true), _defineProperty(_classnames, 'disabled', attrs.disabled), _defineProperty(_classnames, attrs.className, attrs.className), _classnames));\n        return _react2['default'].createElement('span', _extends({}, attrs, {\n          className: cls\n        }), switchNode);\n      }\n    };\n  };\n\n  Table.prototype.onExpandedClick = function onExpandedClick(value, record, i, e) {\n    var expandedRowKeys = [].concat(_toConsumableArray(this.state.expandedRowKeys)),\n        primaryKey = this.props.primaryKey,\n        id = record[primaryKey],\n        index = expandedRowKeys.indexOf(id);\n\n    if (index > -1) {\n      expandedRowKeys.splice(index, 1);\n    } else {\n      expandedRowKeys.push(id);\n    }\n\n    if (!('expandedRowKeys' in this.props)) {\n      this.setState({\n        expandedRowKeys: expandedRowKeys\n      });\n    }\n\n    this.props.onExpandedChange(expandedRowKeys, id, index === -1, record);\n    e.stopPropagation();\n  };\n\n  Table.prototype.unique = function unique(arr) {\n    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'this';\n    var temp = {},\n        ret = [];\n    arr.forEach(function (item) {\n      var value = void 0;\n\n      if (key === 'this') {\n        value = item;\n      } else {\n        value = item[key];\n      }\n\n      if (!temp[value]) {\n        ret.push(item);\n        temp[value] = true;\n      }\n    });\n    return ret;\n  };\n\n  Table.prototype.selectAllRow = function selectAllRow(checked, e) {\n    var ret = [].concat(_toConsumableArray(this.state.selectedRowKeys)),\n        records = [],\n        _props2 = this.props,\n        rowSelection = _props2.rowSelection,\n        primaryKey = _props2.primaryKey,\n        _state2 = this.state,\n        dataSource = _state2.dataSource,\n        hasListGroupHeader = _state2.hasListGroupHeader,\n        selectedRowKeys = _state2.selectedRowKeys,\n        getProps = rowSelection.getProps,\n        attrs = {};\n\n    if (hasListGroupHeader) {\n      dataSource = this.flatDataSource(dataSource);\n    }\n\n    dataSource.forEach(function (record, index) {\n      var id = record[primaryKey];\n\n      if (getProps) {\n        attrs = getProps(record, index) || {};\n      } // 反选和全选的时候不要丢弃禁用项的选中状态\n\n\n      if (checked && (!attrs.disabled || selectedRowKeys.indexOf(id) > -1)) {\n        ret.push(id);\n        records.push(record);\n      } else if (attrs.disabled && selectedRowKeys.indexOf(id) > -1) {\n        ret.push(id);\n        records.push(record);\n      } else {\n        var i = ret.indexOf(id);\n        i > -1 && ret.splice(i, 1);\n      }\n    });\n    records = this.unique(records, primaryKey);\n\n    if (typeof rowSelection.onSelectAll === 'function') {\n      rowSelection.onSelectAll(checked, records);\n    }\n\n    this.triggerSelection(rowSelection, this.unique(ret), records);\n    e.stopPropagation();\n  };\n\n  Table.prototype.selectOneRow = function selectOneRow(index, record, checked, e) {\n    var dataSource = this.state.dataSource,\n        selectedRowKeys = [].concat(_toConsumableArray(this.state.selectedRowKeys)),\n        _props3 = this.props,\n        primaryKey = _props3.primaryKey,\n        rowSelection = _props3.rowSelection,\n        mode = rowSelection.mode ? rowSelection.mode : 'multiple',\n        records = void 0,\n        id = record[primaryKey],\n        i = void 0;\n\n    if (mode === 'multiple') {\n      if (checked) {\n        selectedRowKeys.push(id);\n      } else {\n        i = selectedRowKeys.indexOf(id);\n        selectedRowKeys.splice(i, 1);\n      }\n    } else if (checked) {\n      selectedRowKeys = [id];\n    }\n\n    records = dataSource.filter(function (item) {\n      return selectedRowKeys.indexOf(item[primaryKey]) > -1;\n    });\n\n    if (typeof rowSelection.onSelect === 'function') {\n      rowSelection.onSelect(checked, record, records);\n    }\n\n    this.triggerSelection(rowSelection, selectedRowKeys, records);\n    e.stopPropagation();\n  };\n\n  Table.prototype.triggerSelection = function triggerSelection(rowSelection, selectedRowKeys, records) {\n    if (!('selectedRowKeys' in rowSelection)) {\n      this.setState({\n        selectedRowKeys: selectedRowKeys\n      });\n    }\n\n    if (typeof rowSelection.onChange === 'function') {\n      rowSelection.onChange(selectedRowKeys, records);\n    }\n  }; // 渲染头部\n\n\n  Table.prototype.renderHeaderGroup = function renderHeaderGroup(groupChildren, flatChildren, lock) {\n    var _this4 = this;\n\n    var rowSpan = groupChildren.length,\n        _props4 = this.props,\n        locale = _props4.locale,\n        filterParams = _props4.filterParams,\n        onFilter = _props4.onFilter,\n        prefix = this.getPrefix(),\n        header = groupChildren.map(function (cols, index) {\n      var col = cols.map(function (col, j) {\n        var _classnames2;\n        /* eslint-disable no-unused-vars */\n\n\n        var title = col.title,\n            colSpan = col.colSpan,\n            sortable = col.sortable,\n            dataIndex = col.dataIndex,\n            filters = col.filters,\n            filterMode = col.filterMode,\n            width = col.width,\n            align = col.align,\n            className = col.className,\n            others = _objectWithoutProperties(col, ['title', 'colSpan', 'sortable', 'dataIndex', 'filters', 'filterMode', 'width', 'align', 'className']);\n\n        others = (0, _nextUtil.pickAttrs)(others);\n\n        if (typeof title === 'function') {\n          title = title();\n        }\n\n        className = (0, _classnames7['default'])((_classnames2 = {}, _defineProperty(_classnames2, prefix + 'table-header-node', true), _defineProperty(_classnames2, 'first', j === 0 && lock !== 'right'), _defineProperty(_classnames2, 'last', j === cols.length - 1 && lock !== 'left'), _defineProperty(_classnames2, className, className), _classnames2));\n        others.style = others.style || {};\n        others.className = className;\n\n        if (align) {\n          others.style.textAlign = align;\n        }\n\n        if (col.__mark === 'column-group') {\n          return _react2['default'].createElement('th', _extends({\n            colSpan: colSpan,\n            key: j\n          }, others, {\n            ref: _this4.getHeaderRef(index, j, lock)\n          }), _react2['default'].createElement('div', {\n            className: prefix + 'table-cell-wrapper'\n          }, title));\n        } else {\n          var sortElement = void 0,\n              filterElement = void 0;\n\n          if (sortable) {\n            sortElement = _this4.renderSort(dataIndex);\n          }\n\n          if (filters) {\n            filterElement = filters.length ? _react2['default'].createElement(_filter2['default'], {\n              dataIndex: dataIndex,\n              filters: filters,\n              prefix: prefix,\n              locale: locale,\n              filterParams: filterParams,\n              filterMode: filterMode,\n              onFilter: onFilter\n            }) : null;\n          }\n\n          return _react2['default'].createElement('th', _extends({\n            rowSpan: rowSpan - index,\n            key: j\n          }, others, {\n            ref: _this4.getHeaderRef(index, j, lock)\n          }), _react2['default'].createElement('div', {\n            className: prefix + 'table-cell-wrapper'\n          }, title, sortElement, filterElement));\n        }\n      });\n      return _react2['default'].createElement('tr', {\n        key: index\n      }, col);\n    }),\n        colGroups = flatChildren.map(function (col, index) {\n      var style = {},\n          width = col.width;\n\n      if (width) {\n        style = {\n          width: width\n        };\n      }\n\n      return _react2['default'].createElement('col', {\n        style: style,\n        key: index\n      });\n    });\n    return _react2['default'].createElement('div', {\n      className: prefix + 'table-header-inner',\n      ref: this.getTableRef(lock, 'innerHeader')\n    }, _react2['default'].createElement('table', null, _react2['default'].createElement('colgroup', null, colGroups), _react2['default'].createElement('tbody', null, header)));\n  }; // 渲染排序\n\n\n  Table.prototype.renderSort = function renderSort(dataIndex) {\n    var sort = this.state.sort,\n        prefix = this.getPrefix(),\n        sortStatus = sort[dataIndex],\n        map = {\n      desc: 'descending',\n      asc: 'ascending'\n    };\n    var icons = ['asc', 'desc'].map(function (sortOrder) {\n      return _react2['default'].createElement('a', {\n        href: 'javascript:;',\n        key: sortOrder,\n        className: sortStatus === sortOrder ? 'current' : ''\n      }, _react2['default'].createElement(_nextIcon2['default'], {\n        type: map[sortOrder],\n        size: 'small'\n      }));\n    });\n    return _react2['default'].createElement('span', {\n      className: prefix + 'table-sort',\n      onClick: this._onSort.bind(this, dataIndex, sortStatus === 'asc' ? 'desc' : 'asc')\n    }, icons);\n  };\n\n  Table.prototype._onSort = function _onSort(dataIndex, order) {\n    var _this5 = this;\n\n    var sort = {};\n    sort[dataIndex] = order;\n\n    if (!('sort' in this.props)) {\n      this.setState({\n        sort: sort\n      }, function () {\n        _this5.props.onSort(dataIndex, order, sort);\n      });\n    } else {\n      this.props.onSort(dataIndex, order, sort);\n    }\n  }; // 获取表格的ref\n  // 主要用于渲染完表格后进行宽度和高度的一些设置\n\n\n  Table.prototype.getTableRef = function getTableRef(lock, type) {\n    if (lock) {\n      return 'lock_' + lock + type;\n    } else {\n      return type;\n    }\n  }; // 通过头部和扁平的结构渲染表格\n\n\n  Table.prototype.renderTable = function renderTable(groupChildren, flatChildren, lock) {\n    var header = this.renderHeaderGroup(groupChildren, flatChildren, lock),\n        rows = this.renderRows(flatChildren, lock),\n        _props5 = this.props,\n        hasHeader = _props5.hasHeader,\n        fixedHeader = _props5.fixedHeader,\n        maxBodyHeight = _props5.maxBodyHeight,\n        prefix = this.getPrefix(),\n        events = {\n      onWheel: this.onBodyMouseWheel.bind(this)\n    },\n        style = {},\n        bodyStyle = {};\n\n    if (!lock) {\n      events = {\n        onScroll: this.onBodyScroll.bind(this)\n      };\n\n      if (fixedHeader) {\n        style = {\n          paddingRight: getScrollbarSize().width\n        };\n        bodyStyle = {\n          maxHeight: maxBodyHeight\n        };\n      }\n    }\n\n    this.notRenderCellIndex = false;\n    return _react2['default'].createElement('div', {\n      className: prefix + 'table-inner'\n    }, hasHeader ? _react2['default'].createElement('div', {\n      className: prefix + 'table-header',\n      ref: this.getTableRef(lock, 'header'),\n      style: style\n    }, header) : null, _react2['default'].createElement('div', _extends({\n      className: prefix + 'table-body'\n    }, events, {\n      ref: this.getTableRef(lock, 'body'),\n      style: bodyStyle\n    }), rows));\n  };\n\n  Table.prototype.onBodyMouseWheel = function onBodyMouseWheel(e) {\n    var deltaY = e.deltaY;\n    var scrollNode = findDOMNode(this.refs[this.getTableRef(false, 'body')]);\n    this.scrollTo(scrollNode, scrollNode.scrollLeft, scrollNode.scrollTop + deltaY);\n\n    if (scrollNode.scrollTop + scrollNode.clientHeight < scrollNode.scrollHeight && scrollNode.scrollTop) {\n      e.preventDefault();\n    }\n  };\n\n  Table.prototype.onBodyScroll = function onBodyScroll() {\n    var scrollNode = findDOMNode(this.refs[this.getTableRef(false, 'body')]);\n    this.scrollTo(scrollNode, scrollNode.scrollLeft, scrollNode.scrollTop);\n  };\n\n  Table.prototype.scrollTo = function scrollTo(scrollNode, x, y) {\n    var header = findDOMNode(this.refs[this.getTableRef(false, 'innerHeader')]);\n\n    if (header) {\n      header.scrollLeft = x;\n    }\n\n    scrollNode.scrollTop = y;\n\n    if (this.isLock()) {\n      var lockRightBody = findDOMNode(this.refs[this.getTableRef('right', 'body')]),\n          lockLeftBody = findDOMNode(this.refs[this.getTableRef('left', 'body')]),\n          lockRightTable = findDOMNode(this.refs[this.getTableRef('right', 'lockWrapper')]),\n          lockLeftTable = findDOMNode(this.refs[this.getTableRef('left', 'lockWrapper')]),\n          shadowClassName = 'shadow';\n\n      if (lockLeftBody) {\n        lockLeftBody.scrollTop = y;\n      }\n\n      if (lockRightBody) {\n        lockRightBody.scrollTop = y;\n      }\n\n      if (x === 0) {\n        lockLeftTable && _nextDom.classList.removeClass(lockLeftTable, shadowClassName);\n        lockRightTable && _nextDom.classList.addClass(lockRightTable, shadowClassName);\n      } else if (x === scrollNode.scrollWidth - scrollNode.clientWidth) {\n        lockLeftTable && _nextDom.classList.addClass(lockLeftTable, shadowClassName);\n        lockRightTable && _nextDom.classList.removeClass(lockRightTable, shadowClassName);\n      } else {\n        lockLeftTable && _nextDom.classList.addClass(lockLeftTable, shadowClassName);\n        lockRightTable && _nextDom.classList.addClass(lockRightTable, shadowClassName);\n      }\n    }\n  };\n\n  Table.prototype.renderRows = function renderRows(flatChildren, lock) {\n    var _this6 = this;\n\n    var dataSource = this.state.dataSource,\n        _props6 = this.props,\n        locale = _props6.locale,\n        isLoading = _props6.isLoading,\n        prefix = this.getPrefix(),\n        rows = [],\n        empty = isLoading ? null : locale.empty,\n        needWrapper = false,\n        colGroups = flatChildren.map(function (child, index) {\n      return _react2['default'].createElement('col', {\n        style: {\n          width: child.width + 'px'\n        },\n        key: index\n      });\n    });\n    this._lastChildrenLength = 0;\n    dataSource.forEach(function (record, index) {\n      var row = _this6.renderRow(flatChildren, record, index, lock);\n\n      if (row.needWrapper) {\n        needWrapper = true;\n        colGroups = row.colGroups;\n        rows = rows.concat(row.node);\n      } else {\n        rows.push(row.node);\n      }\n    });\n    this._lastChildrenLength = 0;\n\n    if (!rows.length) {\n      rows = _react2['default'].createElement('table', null, _react2['default'].createElement('colgroup', null, colGroups), _react2['default'].createElement('tbody', null, _react2['default'].createElement('tr', null, _react2['default'].createElement('td', {\n        colSpan: flatChildren.length\n      }, _react2['default'].createElement('div', {\n        className: prefix + 'table-empty'\n      }, empty)))));\n    }\n\n    if (needWrapper) {\n      return _react2['default'].createElement('table', null, _react2['default'].createElement('colgroup', null, colGroups), _react2['default'].createElement('tbody', null, rows));\n    } else {\n      return rows;\n    }\n  }; // Don't need recursion.\n\n\n  Table.prototype.flatDataSource = function flatDataSource(dataSource) {\n    var ret = [],\n        listGroupHeader = this.state.listGroupHeader,\n        hasSelection = listGroupHeader.hasSelection;\n    dataSource.forEach(function (item) {\n      var children = item.children; // 如果需要渲染selection才将这条记录插入到dataSource\n      // 或者没有孩子节点\n\n      if (hasSelection || !children) {\n        ret.push(item);\n      }\n\n      if (children) {\n        ret = ret.concat(children);\n      }\n    });\n    return ret;\n  };\n\n  Table.prototype.analyseDataSource = function analyseDataSource(dataSource, props) {\n    var isTree = props.isTree,\n        result = [],\n        loop = function loop(dataSource, level) {\n      dataSource.forEach(function (item) {\n        item.__level = level;\n        result.push(item);\n\n        if (item.children) {\n          loop(item.children, level + 1);\n        }\n      });\n    };\n\n    if (isTree) {\n      loop(dataSource, 0);\n    } else {\n      result = dataSource;\n    }\n\n    return result;\n  };\n\n  Table.prototype.renderRow = function renderRow(flatChildren, record, index, lock) {\n    var _this7 = this,\n        _classnames3;\n\n    index = index + this._lastChildrenLength;\n    var _props7 = this.props,\n        getRowClassName = _props7.getRowClassName,\n        getRowProps = _props7.getRowProps,\n        primaryKey = _props7.primaryKey,\n        isTree = _props7.isTree,\n        prefix = this.getPrefix(),\n        _state3 = this.state,\n        openRowKeys = _state3.openRowKeys,\n        dataSource = _state3.dataSource,\n        selectedRowKeys = _state3.selectedRowKeys,\n        colGroups = [],\n        listHeader = this.renderListGroupHeader(record, index),\n        col = flatChildren.map(function (child, i) {\n      var cell = _this7.renderCell(record, child, index, i, lock, flatChildren.length, listHeader);\n\n      colGroups.push(cell.col);\n      return cell.node;\n    }),\n        expandedRow = void 0,\n        treeNodeStatus = this.getTreeNodeStatus(dataSource);\n    expandedRow = this.renderExpandedRow(record, index, flatChildren.length, lock);\n\n    if (expandedRow) {\n      expandedRow = _react2['default'].cloneElement(expandedRow, {\n        onClick: this._onExpandedRowClick.bind(this, record, index)\n      });\n    }\n\n    var className = getRowClassName(record, index),\n        otherProps = getRowProps(record, index),\n        cls = (0, _classnames7['default'])((_classnames3 = {}, _defineProperty(_classnames3, prefix + 'table-row', true), _defineProperty(_classnames3, 'last', index === dataSource.length - 1), _defineProperty(_classnames3, 'first', index === 0), _defineProperty(_classnames3, 'hidden', isTree && !(treeNodeStatus.indexOf(record[primaryKey]) > -1) && record.__level !== 0), _defineProperty(_classnames3, prefix + 'table-row-level-' + record.__level, isTree), _defineProperty(_classnames3, 'opened', openRowKeys.indexOf(record[primaryKey]) > -1), _defineProperty(_classnames3, 'selected', !listHeader && selectedRowKeys.indexOf(record[primaryKey]) > -1), _defineProperty(_classnames3, className, className), _classnames3));\n    var row = {};\n    /* eslint-disable eqeqeq */\n\n    var rowKey = record[primaryKey] != null && record[primaryKey] != '' ? record[primaryKey] : index;\n\n    if (listHeader) {\n      if (record.children && record.children.length) {\n        colGroups = [];\n        col = record.children.map(function (item, childIndex) {\n          var td = flatChildren.map(function (child, i) {\n            var cell = _this7.renderCell(item, child, index + childIndex + 1, i, lock, flatChildren.length);\n\n            if (colGroups.length !== flatChildren.length) {\n              colGroups.push(cell.col);\n            }\n\n            return cell.node;\n          });\n          return _react2['default'].createElement('tr', {\n            key: childIndex\n          }, td);\n        });\n        this._lastChildrenLength += record.children.length;\n      } else {\n        col = _react2['default'].createElement('tr', {\n          key: index\n        }, col);\n      }\n\n      row.node = _react2['default'].createElement('table', _extends({}, otherProps, {\n        className: cls,\n        key: rowKey,\n        onClick: this._onRowClick.bind(this, record, index),\n        onMouseEnter: this._onRowHover.bind(this, record, index, true),\n        onMouseLeave: this._onRowHover.bind(this, record, index, false)\n      }), _react2['default'].createElement('colgroup', null, colGroups), _react2['default'].createElement('tbody', null, listHeader, col, expandedRow));\n    } else {\n      row.node = [_react2['default'].createElement('tr', _extends({}, otherProps, {\n        className: cls,\n        key: rowKey,\n        onClick: this._onRowClick.bind(this, record, index),\n        ref: this.getRowRef(index, lock),\n        onMouseEnter: this._onRowHover.bind(this, record, index, true),\n        onMouseLeave: this._onRowHover.bind(this, record, index, false)\n      }), col), expandedRow];\n      row.needWrapper = true;\n    }\n\n    row.colGroups = colGroups;\n    return row;\n  };\n\n  Table.prototype.getTreeNodeStatus = function getTreeNodeStatus(dataSource) {\n    var openRowKeys = this.state.openRowKeys,\n        primaryKey = this.props.primaryKey,\n        res = [];\n    openRowKeys.forEach(function (openKey) {\n      dataSource.forEach(function (item) {\n        if (item[primaryKey] === openKey) {\n          if (item.children) {\n            item.children.forEach(function (child) {\n              res.push(child[primaryKey]);\n            });\n          }\n        }\n      });\n    });\n    return res;\n  };\n\n  Table.prototype.renderExpandedRow = function renderExpandedRow(record, index, colSpan, lock) {\n    var expandedRowRender = this.props.expandedRowRender;\n\n    if (expandedRowRender) {\n      var _props8 = this.props,\n          primaryKey = _props8.primaryKey,\n          expandedRowIndent = _props8.expandedRowIndent,\n          prefix = this.getPrefix(),\n          _state4 = this.state,\n          expandedRowKeys = _state4.expandedRowKeys,\n          lockLeftChildren = _state4.lockLeftChildren,\n          lockRightChildren = _state4.lockRightChildren,\n          _style = {\n        display: expandedRowKeys.indexOf(record[primaryKey]) > -1 ? '' : 'none'\n      },\n          leftIndent = expandedRowIndent[0],\n          rightIndent = expandedRowIndent[1],\n          totalIndent = leftIndent + rightIndent,\n          renderCols = function renderCols(number) {\n        var result = [];\n\n        for (var i = 0; i < number; i++) {\n          result.push(_react2['default'].createElement('td', {\n            key: i\n          }, '\\xA0'));\n        }\n\n        return result;\n      },\n          content = void 0;\n\n      if (totalIndent > colSpan && !lock) {\n        _nextUtil.log.warning('It\\'s not allowed expandedRowIndent is more than the number of columns.');\n      }\n\n      if (leftIndent < lockLeftChildren.length) {\n        _nextUtil.log.warning('expandedRowIndent left is less than the number of left lock columns.');\n      }\n\n      if (rightIndent < lockRightChildren.length) {\n        _nextUtil.log.warning('expandedRowIndent right is less than the number of right lock columns.');\n      }\n\n      if (lock) {\n        return _react2['default'].createElement('tr', {\n          className: prefix + 'table-expanded-row',\n          style: _style,\n          key: 'expanded-' + index\n        }, _react2['default'].createElement('td', {\n          colSpan: colSpan,\n          ref: this.getExpandedCellRef(index, 0, lock)\n        }, ' '));\n      }\n\n      content = expandedRowRender(record, index);\n\n      if (!_react2['default'].isValidElement(content)) {\n        content = _react2['default'].createElement('div', {\n          className: prefix + 'table-cell-wrapper'\n        }, content);\n      }\n\n      return _react2['default'].createElement('tr', {\n        className: prefix + 'table-expanded-row',\n        style: _style,\n        key: 'expanded-' + index\n      }, renderCols(leftIndent), _react2['default'].createElement('td', {\n        colSpan: colSpan - totalIndent,\n        ref: this.getExpandedCellRef(index, 0, false)\n      }, content), renderCols(rightIndent));\n    } else {\n      return null;\n    }\n  };\n\n  Table.prototype.getRowRef = function getRowRef(i, lock) {\n    if (lock) {\n      return 'lock_row_' + lock + '_' + i;\n    } else {\n      return 'row_' + i;\n    }\n  }; // 主要用于锁列的时候同步锁列和正常数据的高度\n\n\n  Table.prototype.getCellRef = function getCellRef(i, j, lock) {\n    if (lock) {\n      return 'lock_' + lock + '_' + i + '_' + j;\n    } else {\n      return i + '_' + j;\n    }\n  };\n\n  Table.prototype.getExpandedCellRef = function getExpandedCellRef(i, j, lock) {\n    if (lock) {\n      return 'lock_expanded_' + lock + '_' + i + '_' + j;\n    } else {\n      return 'expanded_' + i + '_' + j;\n    }\n  };\n\n  Table.prototype.getHeaderRef = function getHeaderRef(i, j, lock) {\n    if (lock) {\n      return 'lock_header_' + lock + '_' + i + '_' + j;\n    } else {\n      return 'header_' + i + '_' + j;\n    }\n  }; // Table处理过后真实的lock状态\n\n\n  Table.prototype.isLock = function isLock() {\n    if (this.state) {\n      return !!this.state.lockLeftChildren.length || !!this.state.lockRightChildren.length;\n    }\n\n    return this._isLock;\n  }; // 用户设置的lock状态\n\n\n  Table.prototype.isOriginLock = function isOriginLock() {\n    return this._isLock;\n  }; //index: rowIndex\n  //i: colIndex\n\n\n  Table.prototype.renderCell = function renderCell(record, props, index, i, lock, flatChildrenLength, listGroup) {\n    var _classnames4;\n\n    if (lock === 'right') {\n      i = i + (this.state.flatChildren.length - this.state.lockRightChildren.length);\n    }\n\n    var value = getDataByPath(record, props.dataIndex),\n        cellProps = {\n      value: value,\n      index: index,\n      record: record,\n      context: this\n    },\n        content = void 0,\n        style = void 0,\n        align = props.align,\n        _props9 = this.props,\n        getCellProps = _props9.getCellProps,\n        indentSize = _props9.indentSize,\n        primaryKey = _props9.primaryKey,\n        isTree = _props9.isTree,\n        prefix = this.getPrefix(),\n        ref = this.getCellRef(index, i, lock),\n        attrs = getCellProps(index, i, record) || {},\n        firstCellStyle = void 0,\n        treeArrowNode = void 0;\n\n    if (_react2['default'].isValidElement(props.cell)) {\n      content = _react2['default'].cloneElement(props.cell, cellProps);\n    } else if (typeof props.cell === 'function') {\n      content = props.cell(value, index, record, this);\n    }\n\n    if (props.width) {\n      style = {\n        width: props.width\n      };\n    }\n\n    if (this.notRenderCellIndex && !listGroup) {\n      var matchCellIndex = this.notRenderCellIndex.map(function (cellIndex) {\n        return cellIndex.toString();\n      }).indexOf([index, i].toString());\n\n      if (matchCellIndex > -1) {\n        this.notRenderCellIndex.splice(matchCellIndex, 1);\n        return {\n          node: null,\n          col: _react2['default'].createElement('col', {\n            style: style,\n            key: index + '_' + i\n          })\n        };\n      }\n    }\n\n    if (attrs.colSpan && attrs.colSpan > 1 || attrs.rowSpan && attrs.rowSpan > 1) {\n      if (lock) {\n        this.rowSpanLock = true;\n      }\n\n      this._getNotRenderCellIndex(i, index, attrs.colSpan || 1, attrs.rowSpan || 1);\n    }\n\n    var cls = (0, _classnames7['default'])((_classnames4 = {}, _defineProperty(_classnames4, props.className, props.className), _defineProperty(_classnames4, prefix + 'table-cell', true), _defineProperty(_classnames4, 'first', lock !== 'right' && i === 0), _defineProperty(_classnames4, 'last', lock !== 'left' && (i === flatChildrenLength - 1 || i + attrs.colSpan === flatChildrenLength)), _classnames4));\n    var treeArrowNodeIndex = this.props.rowSelection ? 1 : 0;\n\n    if (isTree && lock !== 'right' && i === treeArrowNodeIndex) {\n      firstCellStyle = {\n        paddingLeft: indentSize * (record.__level + 1)\n      };\n      treeArrowNode = _react2['default'].createElement(_nextIcon2['default'], {\n        size: 'xs',\n        className: prefix + 'table-tree-placeholder'\n      });\n      var treeArrowType = void 0;\n\n      if (record.children && record.children.length) {\n        if (this.state.openRowKeys.indexOf(record[primaryKey]) > -1) {\n          treeArrowType = 'arrow-down';\n        } else {\n          treeArrowType = 'arrow-right';\n        }\n\n        treeArrowNode = _react2['default'].createElement(_nextIcon2['default'], {\n          type: treeArrowType,\n          size: 'xs',\n          onClick: this.onTreeNodeClick.bind(this, record)\n        });\n      }\n    }\n\n    var cellStyle = _extends({}, props.style);\n\n    if (typeof align !== 'undefined') {\n      cellStyle.textAlign = align;\n    }\n\n    return {\n      node: _react2['default'].createElement('td', _extends({\n        className: cls,\n        style: cellStyle,\n        ref: ref,\n        key: index + '_' + i\n      }, attrs), _react2['default'].createElement('div', {\n        className: prefix + 'table-cell-wrapper',\n        style: firstCellStyle\n      }, treeArrowNode, content)),\n      col: _react2['default'].createElement('col', {\n        style: style,\n        key: index + '_' + i\n      })\n    };\n  };\n\n  Table.prototype._getNotRenderCellIndex = function _getNotRenderCellIndex(colIndex, rowIndex, colSpan, rowSpan) {\n    var maxColIndex = colSpan;\n    var maxRowIndex = rowSpan;\n    var notRenderCellIndex = [];\n\n    for (var i = 0; i < maxColIndex; i++) {\n      for (var j = 0; j < maxRowIndex; j++) {\n        notRenderCellIndex.push([rowIndex + j, colIndex + i]);\n      }\n    }\n\n    if (!this.notRenderCellIndex) {\n      this.notRenderCellIndex = [];\n    }\n\n    this.notRenderCellIndex = this.notRenderCellIndex.concat(notRenderCellIndex);\n    return this.notRenderCellIndex;\n  };\n\n  Table.prototype.onTreeNodeClick = function onTreeNodeClick(record, e) {\n    e.stopPropagation();\n\n    var primaryKey = this.props.primaryKey,\n        id = record[primaryKey],\n        dataSource = this.state.dataSource,\n        openRowKeys = [].concat(_toConsumableArray(this.state.openRowKeys)),\n        index = openRowKeys.indexOf(id),\n        getChildrenKeyById = function getChildrenKeyById(id) {\n      var res = [id],\n          loop = function loop(data) {\n        data.forEach(function (item) {\n          res.push(item[primaryKey]);\n\n          if (item.children) {\n            loop(item.children);\n          }\n        });\n      };\n\n      dataSource.forEach(function (item) {\n        if (item[primaryKey] === id) {\n          if (item.children) {\n            loop(item.children);\n          }\n        }\n      });\n      return res;\n    };\n\n    if (index > -1) {\n      // 不仅要删除当前的openRowKey，还需要删除关联子节点的openRowKey\n      var ids = getChildrenKeyById(id);\n      ids.forEach(function (id) {\n        var i = openRowKeys.indexOf(id);\n\n        if (i > -1) {\n          openRowKeys.splice(i, 1);\n        }\n      });\n    } else {\n      openRowKeys.push(id);\n    }\n\n    if (!('openRowKeys' in this.props)) {\n      this.setState({\n        openRowKeys: openRowKeys\n      });\n    }\n\n    this.props.onRowOpen(openRowKeys, id, index === -1, record);\n  }; // 渲染List模式的header\n\n\n  Table.prototype.renderListGroupHeader = function renderListGroupHeader(record, index) {\n    var _state5 = this.state,\n        listGroupHeader = _state5.listGroupHeader,\n        flatChildren = _state5.flatChildren,\n        prefix = this.getPrefix(),\n        listHeader = void 0;\n\n    if (listGroupHeader) {\n      var hasSelection = listGroupHeader.hasSelection;\n\n      if (_react2['default'].isValidElement(listGroupHeader.cell)) {\n        listHeader = _react2['default'].cloneElement(listGroupHeader.cell, {\n          record: record,\n          index: index\n        });\n      } else if (typeof listGroupHeader.cell === 'function') {\n        listHeader = listGroupHeader.cell(record, index);\n      }\n\n      if (listHeader) {\n        listHeader = _react2['default'].createElement('tr', {\n          className: prefix + 'table-group-header'\n        }, hasSelection ? _react2['default'].createElement('td', {\n          className: prefix + 'table-selection'\n        }, _react2['default'].createElement('div', {\n          className: prefix + 'table-cell-wrapper'\n        }, this.renderSelectionCell('body')(null, index, record))) : null, _react2['default'].createElement('td', {\n          colSpan: hasSelection ? flatChildren.length - 1 : flatChildren.length\n        }, _react2['default'].createElement('div', {\n          className: prefix + 'table-cell-wrapper'\n        }, listHeader)));\n      }\n    }\n\n    return listHeader;\n  };\n\n  Table.prototype._onRowClick = function _onRowClick(record, index, e) {\n    this.props.onRowClick(record, index, e);\n  };\n\n  Table.prototype._onRowHover = function _onRowHover(record, index, isEnter, e) {\n    var _props10 = this.props,\n        onRowMouseEnter = _props10.onRowMouseEnter,\n        onRowMouseLeave = _props10.onRowMouseLeave,\n        currentTarget = e.currentTarget,\n        isLock = this.isLock(),\n        leftLockRow = void 0,\n        rightLockRow = void 0,\n        currentRow = _reactDom2['default'].findDOMNode(this.refs[this.getRowRef(index, false)]);\n\n    if (isLock) {\n      leftLockRow = _reactDom2['default'].findDOMNode(this.refs[this.getRowRef(index, 'left')]);\n      rightLockRow = _reactDom2['default'].findDOMNode(this.refs[this.getRowRef(index, 'right')]);\n    }\n\n    if (isEnter) {\n      onRowMouseEnter(record, index, e);\n      currentRow && _nextDom.classList.addClass(currentRow, 'hovered');\n      leftLockRow && _nextDom.classList.addClass(leftLockRow, 'hovered');\n      rightLockRow && _nextDom.classList.addClass(rightLockRow, 'hovered');\n    } else {\n      onRowMouseLeave(record, index, e);\n      currentRow && _nextDom.classList.removeClass(currentRow, 'hovered');\n      leftLockRow && _nextDom.classList.removeClass(leftLockRow, 'hovered');\n      rightLockRow && _nextDom.classList.removeClass(rightLockRow, 'hovered');\n    }\n  };\n\n  Table.prototype._onExpandedRowClick = function _onExpandedRowClick(record, index, e) {\n    e.stopPropagation();\n    this.props.onExpandedRowClick(record, index, e);\n  };\n\n  Table.prototype.render = function render() {\n    var _classnames5;\n\n    var table = this.renderTable(this.state.groupChildren, this.state.flatChildren),\n        _props11 = this.props,\n        className = _props11.className,\n        fixedHeader = _props11.fixedHeader,\n        hasBorder = _props11.hasBorder,\n        isZebra = _props11.isZebra,\n        isLoading = _props11.isLoading,\n        hasHeader = _props11.hasHeader,\n        others = _objectWithoutProperties(_props11, ['className', 'fixedHeader', 'hasBorder', 'isZebra', 'isLoading', 'hasHeader']),\n        prefix = this.getPrefix(),\n        isLock = this.isLock(),\n        cls = (0, _classnames7['default'])((_classnames5 = {}, _defineProperty(_classnames5, prefix + 'table', true), _defineProperty(_classnames5, prefix + 'table-fixed', fixedHeader), _defineProperty(_classnames5, prefix + 'table-group', this.state.hasListGroupHeader), _defineProperty(_classnames5, prefix + 'table-lock', isLock), _defineProperty(_classnames5, 'only-bottom-border', !hasBorder), _defineProperty(_classnames5, 'no-header', !hasHeader), _defineProperty(_classnames5, 'zebra', isZebra), _defineProperty(_classnames5, className, className), _classnames5)),\n        loadingNode = isLoading ? _react2['default'].createElement('div', {\n      className: prefix + 'table-loading'\n    }, _react2['default'].createElement(_nextIcon2['default'], {\n      type: 'loading',\n      size: 'xl'\n    })) : null;\n\n    others = (0, _nextUtil.pickAttrs)(others);\n\n    if (!isLock) {\n      return _react2['default'].createElement('div', _extends({\n        className: cls\n      }, others), table, loadingNode);\n    } else {\n      return _react2['default'].createElement('div', _extends({\n        className: cls\n      }, others), table, this.renderLockTable('left'), this.renderLockTable('right'), loadingNode);\n    }\n  };\n\n  Table.prototype.renderLockTable = function renderLockTable(dir) {\n    var prefix = this.getPrefix(),\n        dirUpperCase = dir.charAt(0).toUpperCase() + dir.substring(1);\n\n    if (this.state.dataSource.length) {\n      return _react2['default'].createElement('div', {\n        className: prefix + 'table-lock-' + dir,\n        ref: this.getTableRef(dir, 'lockWrapper')\n      }, this.renderTable(this.state['lock' + dirUpperCase + 'GroupChildren'], this.state['lock' + dirUpperCase + 'Children'], dir));\n    } else {\n      return null;\n    }\n  };\n\n  Table.prototype.componentDidMount = function componentDidMount() {\n    this.adjustSize = this.adjustSize.bind(this);\n    this.adjustSize();\n    window.onresize = this.adjustSize;\n  };\n\n  Table.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.adjustSize();\n  };\n\n  Table.prototype.componentWillUnmount = function componentWillUnmount() {\n    window.onresize = null;\n  };\n\n  Table.prototype.adjustSize = function adjustSize() {\n    this.adjustIfTableNotNeedLock();\n    this.adjustCellSize();\n    this.adjustBodySize();\n    this.adjustHeaderSize();\n    this.adjustFixedHeaderSize();\n    this.onBodyScroll();\n    this._notNeedAdjustLockLeft = this._notNeedAdjustLockRight = false;\n  };\n\n  Table.prototype.adjustCellSize = function adjustCellSize() {\n    var _this8 = this;\n\n    if (this.isLock()) {\n      this.state.dataSource.forEach(function (item, index) {\n        if (!_this8.rowSpanLock) {\n          _this8.setLeftCellSize(index, 0);\n\n          _this8.setRightCellSize(index, 0);\n        } else {\n          var _state6 = _this8.state,\n              lockLeftChildren = _state6.lockLeftChildren,\n              lockRightChildren = _state6.lockRightChildren; // 同步最左侧的锁列\n\n          lockLeftChildren.forEach(function (child, i) {\n            _this8.setLeftCellSize(index, i);\n          }); // 同步最右侧的锁列\n\n          lockRightChildren.forEach(function (child, i) {\n            _this8.setRightCellSize(index, i);\n          });\n        }\n      });\n    }\n  };\n\n  Table.prototype.setLeftCellSize = function setLeftCellSize(index, i) {\n    var lockLeftRow = findDOMNode(this.refs[this.getCellRef(index, i, 'left')]),\n        row = this.getRowDOMNode(index, i),\n        expandedRow = findDOMNode(this.refs[this.getExpandedCellRef(index, i, false)]),\n        lockLeftExpandedRow = findDOMNode(this.refs[this.getExpandedCellRef(index, i, 'left')]),\n        rowHeight = row && row.offsetHeight || 0;\n    var expandedRowHeight = 0,\n        lockLeftHeight = 0;\n\n    if (lockLeftRow) {\n      lockLeftHeight = lockLeftRow.offsetHeight;\n    }\n\n    if (expandedRow) {\n      expandedRowHeight = expandedRow.offsetHeight;\n    }\n\n    lockLeftExpandedRow && _nextDom.style.set(lockLeftExpandedRow, 'height', expandedRowHeight + 'px');\n\n    if (lockLeftRow && rowHeight !== lockLeftHeight) {\n      _nextDom.style.set(lockLeftRow, 'height', rowHeight + 'px');\n    }\n  };\n\n  Table.prototype.setRightCellSize = function setRightCellSize(index, i) {\n    var lockRightStart = this.state.flatChildren.length - this.state.lockRightChildren.length;\n    var lockRightRow = findDOMNode(this.refs[this.getCellRef(index, lockRightStart + i, 'right')]),\n        row = this.getRowDOMNode(index, lockRightStart + i),\n        expandedRow = findDOMNode(this.refs[this.getExpandedCellRef(index, i, false)]),\n        lockRightExpandedRow = findDOMNode(this.refs[this.getExpandedCellRef(index, i, 'right')]),\n        rowHeight = row && row.offsetHeight || 0;\n    var lockRightHeight = 0,\n        expandedRowHeight = 0;\n\n    if (lockRightRow) {\n      lockRightHeight = lockRightRow.offsetHeight;\n    }\n\n    if (expandedRow) {\n      expandedRowHeight = expandedRow.offsetHeight;\n    }\n\n    lockRightExpandedRow && _nextDom.style.set(lockRightExpandedRow, 'height', expandedRowHeight + 'px');\n\n    if (lockRightRow && rowHeight !== lockRightRow) {\n      _nextDom.style.set(lockRightRow, 'height', rowHeight + 'px');\n    }\n  };\n\n  Table.prototype.getRowDOMNode = function getRowDOMNode(index, i) {\n    return findDOMNode(this.refs[this.getCellRef(index, i)]);\n  };\n\n  Table.prototype.adjustBodySize = function adjustBodySize() {\n    if (this.isLock()) {\n      var body = findDOMNode(this.refs[this.getTableRef(false, 'body')]),\n          lockLeftBody = findDOMNode(this.refs[this.getTableRef('left', 'body')]),\n          lockRightBody = findDOMNode(this.refs[this.getTableRef('right', 'body')]),\n          lockRightBodyWrapper = findDOMNode(this.refs[this.getTableRef('right', 'lockWrapper')]),\n          bodyHeight = body.offsetHeight,\n          lockBodyHeight = void 0,\n          width = 0;\n\n      if (body.scrollHeight > body.clientHeight) {\n        width = getScrollbarSize().width;\n      }\n\n      if (bodyHeight >= this.props.maxBodyHeight && this.props.fixedHeader) {\n        lockBodyHeight = this.props.maxBodyHeight - getScrollbarSize().height;\n        lockLeftBody && _nextDom.style.set(lockLeftBody, 'max-height', lockBodyHeight + 'px');\n        lockRightBody && _nextDom.style.set(lockRightBody, 'max-height', lockBodyHeight + 'px');\n        lockRightBodyWrapper && _nextDom.style.set(lockRightBodyWrapper, 'right', width + 'px');\n      }\n    }\n  };\n\n  Table.prototype.adjustHeaderSize = function adjustHeaderSize() {\n    var _this9 = this;\n\n    if (this.isLock()) {\n      this.state.groupChildren.forEach(function (child, index) {\n        var headerRow = findDOMNode(_this9.refs[_this9.getHeaderRef(index, 0, false)]),\n            headerRightLockRow = findDOMNode(_this9.refs[_this9.getHeaderRef(index, 0, 'right')]),\n            headerLeftLockRow = findDOMNode(_this9.refs[_this9.getHeaderRef(index, 0, 'left')]),\n            headerRowHeight = headerRow.offsetHeight,\n            headerRightLockRowHeight = 0,\n            headerLeftLockRowHeight = 0,\n            maxRowHeight = void 0; // 如果不需要锁列的出现，就不要在计算锁列的header的高度\n        // 这在浏览器缩放的时候可能会造成高度计算的问题\n\n        if (headerRightLockRow && !_this9._notNeedAdjustLockRight) {\n          headerRightLockRowHeight = headerRightLockRow.offsetHeight;\n        }\n\n        if (headerLeftLockRow && !_this9._notNeedAdjustLockLeft) {\n          headerLeftLockRowHeight = headerLeftLockRow.offsetHeight;\n        }\n\n        maxRowHeight = Math.max(headerRightLockRowHeight, headerLeftLockRowHeight, headerRowHeight);\n\n        _nextDom.style.set(headerRow, 'height', maxRowHeight);\n\n        headerRightLockRow && _nextDom.style.set(headerRightLockRow, 'height', maxRowHeight);\n        headerLeftLockRow && _nextDom.style.set(headerLeftLockRow, 'height', maxRowHeight);\n      });\n    }\n  };\n\n  Table.prototype.adjustFixedHeaderSize = function adjustFixedHeaderSize() {\n    var _props12 = this.props,\n        hasHeader = _props12.hasHeader,\n        fixedHeader = _props12.fixedHeader,\n        maxBodyHeight = _props12.maxBodyHeight;\n\n    if (hasHeader && fixedHeader) {\n      var headerNode = findDOMNode(this.refs[this.getTableRef(false, 'header')]);\n      var bodyNode = findDOMNode(this.refs[this.getTableRef(false, 'body')]);\n\n      if (bodyNode.scrollHeight <= maxBodyHeight) {\n        _nextDom.style.set(headerNode, 'paddingRight', 0);\n      } else {\n        _nextDom.style.set(headerNode, 'paddingRight', getScrollbarSize().width);\n      }\n    }\n  };\n\n  Table.prototype.adjustIfTableNotNeedLock = function adjustIfTableNotNeedLock() {\n    var _this10 = this;\n\n    if (this.isLock() && this.state.dataSource.length) {\n      var configWidths = this.state.flatChildren.map(function (item, index) {\n        var row = findDOMNode(_this10.refs[_this10.getCellRef(0, index)]);\n        return row.clientWidth || 0;\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n      var node = findDOMNode(this);\n      var width = node.clientWidth;\n\n      if (configWidths <= width) {\n        if (this.state.lockLeftChildren.length) {\n          this.setState({\n            lockLeftChildren: []\n          });\n          this._notNeedAdjustLockLeft = true;\n        }\n\n        if (this.state.lockRightChildren.length) {\n          this.setState({\n            lockRightChildren: []\n          });\n          this._notNeedAdjustLockRight = true;\n        }\n      }\n    }\n  };\n\n  return Table;\n}(_react2['default'].Component), _class.propTypes = {\n  /**\n   * 样式类名的品牌前缀\n   */\n  prefix: _propTypes2['default'].string,\n\n  /**\n   * 自定义类名\n   */\n  className: _propTypes2['default'].string,\n\n  /**\n   * 自定义内联样式\n   */\n  style: _propTypes2['default'].object,\n\n  /**\n   * 表格展示的数据源\n   */\n  dataSource: _propTypes2['default'].array,\n\n  /**\n   * 是否启用选择模式\n   * @property {Function} getProps `Function(record)=>Object` 获取selection的默认属性\n   * @property {Function} onChange `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。\n   * @property {Function} onSelect `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调\n   * @property {Function} onSelectAll `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调\n   * @property {Array} selectedRowKeys 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值\n   * @property {String} mode 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`\n   */\n  rowSelection: _propTypes2['default'].object,\n\n  /**\n   * 点击表格每一行触发的事件\n   * @param {Object} record 该行所对应的数据\n   * @param {Number} index 该行所对应的序列\n   * @param {Event} e DOM事件对象\n   */\n  onRowClick: _propTypes2['default'].func,\n\n  /**\n   * 悬浮在表格每一行的时候触发的事件\n   * @param {Object} record 该行所对应的数据\n   * @param {Number} index 该行所对应的序列\n   * @param {Event} e DOM事件对象\n   */\n  onRowMouseEnter: _propTypes2['default'].func,\n\n  /**\n   * 离开表格每一行的时候触发的事件\n   * @param {Object} record 该行所对应的数据\n   * @param {Number} index 该行所对应的序列\n   * @param {Event} e DOM事件对象\n   */\n  onRowMouseLeave: _propTypes2['default'].func,\n\n  /**\n   * 点击列排序触发的事件\n   * @param {String} dataIndex 指定的排序的字段\n   * @param {String} order 排序对应的顺序, 有`desc`和`asc`两种\n   */\n  onSort: _propTypes2['default'].func,\n\n  /**\n   * 点击过滤确认按钮触发的事件\n   * @param {Object} filterParams 过滤的字段信息\n   */\n  onFilter: _propTypes2['default'].func,\n\n  /**\n   * 设置每一行的样式名称\n   * @param {Object} record 该行所对应的数据\n   * @param {Number} index 该行所对应的序列\n   * @returns {String} 需要设置的样式名称\n   */\n  getRowClassName: _propTypes2['default'].func,\n\n  /**\n   * 设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。\n   * @param {Object} record 该行所对应的数据\n   * @param {Number} index 该行所对应的序列\n   * @returns {Object} 需要设置的行属性\n   */\n  getRowProps: _propTypes2['default'].func,\n\n  /**\n   * 设置单元格的属性，通过该属性可以进行合并单元格\n   * @param {Number} rowIndex 该列所对应的序列\n   * @param {Number} colIndex 该行所对应的序列\n   * @param {Object} record 该行对应的记录\n   * @returns {Object} 返回td元素的所支持的属性对象\n   */\n  getCellProps: _propTypes2['default'].func,\n\n  /**\n   * 表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条\n   */\n  fixedHeader: _propTypes2['default'].bool,\n\n  /**\n   * 最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条\n   */\n  maxBodyHeight: _propTypes2['default'].number,\n\n  /**\n   * 表格是否具有边框\n   */\n  hasBorder: _propTypes2['default'].bool,\n\n  /**\n   * 表格是否具有头部\n   */\n  hasHeader: _propTypes2['default'].bool,\n\n  /**\n   * 表格是否是斑马线\n   */\n  isZebra: _propTypes2['default'].bool,\n\n  /**\n   * 表格是否在加载中\n   */\n  isLoading: _propTypes2['default'].bool,\n\n  /**\n   * dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中\n   */\n  primaryKey: _propTypes2['default'].string,\n\n  /**\n   * 当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:[]}}\n   * 示例:\n   * 假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中\n   * `<Table filterParams={{id: {selectedKeys: ['one']}}}/>`\n   */\n  filterParams: _propTypes2['default'].object,\n\n  /**\n   * 当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{dataIndex: 'asc'}\n   */\n  sort: _propTypes2['default'].object,\n\n  /**\n   * 额外渲染行的渲染函数\n   * @param {Object} record 该行所对应的数据\n   * @param {Number} index 该行所对应的序列\n   * @returns {Element}\n   */\n  expandedRowRender: _propTypes2['default'].func,\n\n  /**\n   * 额外渲染行的缩进\n   */\n  expandedRowIndent: _propTypes2['default'].array,\n\n  /**\n   * 默认情况下展开的额外渲染行, 传入此属性为受控状态\n   */\n  expandedRowKeys: _propTypes2['default'].array,\n\n  /**\n   * 是否显示点击展开额外渲染行的+号按钮\n   */\n  hasExpandedRowCtrl: _propTypes2['default'].bool,\n\n  /**\n   * 设置额外渲染行的属性\n   */\n  getExpandedColProps: _propTypes2['default'].func,\n\n  /**\n   * 在额外渲染行展开或者收齐的时候触发的事件\n   * @param {Array} expandedRowKeys 展开的渲染行的key\n   * @param {String} currentRowKey 当前点击的渲染行的key\n   * @param {Boolean} expanded 当前点击是展开还是收起\n   * @param {Object} currentRecord 当前点击额外渲染行的记录\n   */\n  onExpandedChange: _propTypes2['default'].func,\n\n  /**\n   * 点击额外渲染行触发的事件\n   * @param {Object} record 该行所对应的数据\n   * @param {Number} index 该行所对应的序列\n   * @param {Event} e DOM事件对象\n   */\n  onExpandedRowClick: _propTypes2['default'].func,\n\n  /**\n   * 在tree模式下的缩进尺寸， 仅在isTree为true时候有效\n   */\n  indentSize: _propTypes2['default'].number,\n\n  /**\n   * 默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作\n   */\n  openRowKeys: _propTypes2['default'].array,\n\n  /**\n   * 点击tree展开或者关闭的时候触发的事件\n   * @param {Array} openRowKeys tree模式下展开的key\n   * @param {String} currentRowKey 当前点击行的key\n   * @param {Boolean} opened 当前点击是展开还是收起\n   * @param {Object} currentRecord 当前点击行的记录\n   */\n  onRowOpen: _propTypes2['default'].func,\n\n  /**\n   * 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table\n   */\n  isTree: _propTypes2['default'].bool,\n\n  /**\n   * 是否开启性能优化，开启了性能优化后，会自动加入`shouldComponentUpdate`\n   */\n  optimization: _propTypes2['default'].bool,\n\n  /**\n   * 自定义国际化文案对象\n   * @property {String} empty 没有数据时的提示文案\n   * @property {String} ok 过滤器中确认按钮文案\n   * @property {String} reset 过滤器中重置按钮文案\n   */\n  locale: _propTypes2['default'].object,\n\n  /**\n   * 自定义国际化语言\n   */\n  language: _propTypes2['default'].oneOf(['en-us', 'zh-cn', 'zh-tw'])\n}, _class.defaultProps = {\n  dataSource: [],\n  rowSelection: null,\n  onRowClick: noop,\n  onRowMouseEnter: noop,\n  onRowMouseLeave: noop,\n  onSort: noop,\n  onExpandedChange: noop,\n  onExpandedRowClick: noop,\n  expandedRowIndent: [1, 0],\n  getExpandedColProps: noop,\n  onFilter: noop,\n  getRowClassName: noop,\n  getRowProps: noop,\n  getCellProps: noop,\n  prefix: 'next-',\n  fixedHeader: false,\n  maxBodyHeight: 200,\n  hasBorder: true,\n  hasHeader: true,\n  isZebra: false,\n  isLoading: false,\n  primaryKey: 'id',\n  indentSize: 12,\n  hasExpandedRowCtrl: true,\n  onRowOpen: noop,\n  isTree: false,\n  optimization: false\n}, _class.contextTypes = {\n  prefix: _propTypes2['default'].string\n}, _temp);\nTable.displayName = 'Table';\n\nfunction getDataByPath(object, path) {\n  if (!object || !path) {\n    return false;\n  }\n\n  path = path.toString();\n  var field = path.split('.'),\n      val = void 0,\n      key = void 0;\n\n  if (field.length) {\n    key = field[0]; //lists[1].name\n\n    if (key.indexOf('[') >= 0) {\n      key = key.match(/(.*)\\[(.*)\\]/);\n\n      if (key) {\n        val = object[key[1]][key[2]];\n      }\n    } else {\n      val = object[field[0]];\n    }\n\n    if (val) {\n      for (var i = 1; i < field.length; i++) {\n        val = val[field[i]];\n\n        if (typeof val === 'undefined') {\n          break;\n        }\n      }\n    }\n  }\n\n  return val;\n}\n\nfunction deepCopy(arr) {\n  var copy = function copy(arr) {\n    return arr.map(function (item) {\n      if (item.children) {\n        item.children = copy(item.children);\n      }\n\n      return _extends({}, item);\n    });\n  };\n\n  return copy(arr);\n}\n\nfunction shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n  var len = keysA.length;\n\n  if (len !== keysB.length) {\n    return false;\n  }\n\n  compareContext = compareContext || null; // Test for A's keys different from B.\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  for (var i = 0; i < len; i++) {\n    var key = keysA[i];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    var _ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (_ret === false || _ret === void 0 && !shallowEqual(valueA, valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.shallowEqual = shallowEqual;\nexports['default'] = (0, _nextLocaleProvider2['default'])(Table);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}