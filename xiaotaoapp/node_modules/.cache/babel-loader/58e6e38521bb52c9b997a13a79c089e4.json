{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _nextIcon = require('../../../next-icon/lib/index.js');\n\nvar _nextIcon2 = _interopRequireDefault(_nextIcon);\n\nvar _nextCheckbox = require('../../../next-checkbox/lib/index.js');\n\nvar _nextCheckbox2 = _interopRequireDefault(_nextCheckbox);\n\nvar _nextAnimate = require('../../../next-animate/lib/index.js');\n\nvar _nextAnimate2 = _interopRequireDefault(_nextAnimate);\n\nvar _nextUtil = require('../../../next-util/lib/index.js');\n\nvar _nextDom = require('../../../next-dom/lib/index.js');\n\nvar _util = require('../util/index.js');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar browserUa = typeof window !== 'undefined' ? (0, _util.browser)(window.navigator) : '';\nvar ieOrEdge = /.*(IE|Edge).+/.test(browserUa);\n\nvar isRoot = function isRoot(pos) {\n  return /^0-(\\d)+$/.test(pos);\n};\n/**\n * Tree.Node\n */\n\n\nvar TreeNode = (_temp = _class = function (_Component) {\n  _inherits(TreeNode, _Component);\n\n  function TreeNode(props, context) {\n    _classCallCheck(this, TreeNode);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    ['onExpand', 'onCheck', 'onContextMenu', 'onMouseEnter', 'onMouseLeave', 'onDragStart', 'onDragEnd', 'onDragEnter', 'onDragOver', 'onDragLeave', 'onDrop', 'onSelect', 'onEditFinish'].forEach(function (m) {\n      _this[m] = _this[m].bind(_this);\n    });\n    _this.clickTimer = null;\n    _this.state = {\n      dataLoading: false,\n      editMode: false,\n      title: props.title || props.label\n    };\n    return _this;\n  }\n\n  TreeNode.prototype.componentDidMount = function componentDidMount() {\n    if (!this.props.root._treeNodeInstances) {\n      this.props.root._treeNodeInstances = [];\n    }\n\n    this.props.root._treeNodeInstances.push(this);\n  };\n\n  TreeNode.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('title' in nextProps) {\n      this.setState({\n        title: nextProps.title\n      });\n    } else if ('label' in nextProps) {\n      this.setState({\n        title: nextProps.label\n      });\n    }\n\n    this.expandedChanged = nextProps.expanded !== this.props.expanded;\n  };\n\n  TreeNode.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this.refs.selectInput) {\n      this.refs.selectInput.focus();\n    }\n  };\n\n  TreeNode.prototype.getPrefix = function getPrefix() {\n    return this.context.prefix || this.props.prefix;\n  };\n\n  TreeNode.prototype.onCheck = function onCheck() {\n    this.props.root.onCheck(this);\n  };\n\n  TreeNode.prototype.onSelect = function onSelect() {\n    this.props.root.onSelect(this);\n  };\n\n  TreeNode.prototype.onEditFinish = function onEditFinish(info) {\n    this.props.root.onEditFinish(info);\n  };\n\n  TreeNode.prototype.onMouseEnter = function onMouseEnter(e) {\n    e.preventDefault();\n    this.props.root.onMouseEnter(e, this);\n  };\n\n  TreeNode.prototype.onMouseLeave = function onMouseLeave(e) {\n    e.preventDefault();\n    this.props.root.onMouseLeave(e, this);\n  };\n\n  TreeNode.prototype.onContextMenu = function onContextMenu(e) {\n    e.preventDefault();\n    this.props.root.onContextMenu(e, this);\n  };\n\n  TreeNode.prototype.onDragStart = function onDragStart(e) {\n    e.stopPropagation();\n    this.props.root.onDragStart(e, this);\n    e.dataTransfer.setData('text/plain', 'firefox-need-it');\n  };\n\n  TreeNode.prototype.onDragEnd = function onDragEnd(e) {\n    e.stopPropagation();\n    this.props.root.onDragEnd(e, this);\n  };\n\n  TreeNode.prototype.onDragEnter = function onDragEnter(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.props.root.onDragEnter(e, this);\n  };\n\n  TreeNode.prototype.onDragOver = function onDragOver(e) {\n    if (this.props.root.canDrop(this)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.props.root.onDragOver(e, this);\n      return false;\n    }\n  };\n\n  TreeNode.prototype.onDragLeave = function onDragLeave(e) {\n    e.stopPropagation();\n    this.props.root.onDragLeave(e, this);\n  };\n\n  TreeNode.prototype.onDrop = function onDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.props.root.onDrop(e, this);\n  };\n\n  TreeNode.prototype.onExpand = function onExpand() {\n    var _this2 = this;\n\n    var callbackPromise = this.props.root.onExpand(this);\n\n    if (callbackPromise && (typeof callbackPromise === 'undefined' ? 'undefined' : _typeof(callbackPromise)) === 'object') {\n      var setLoading = function setLoading(dataLoading) {\n        _this2.setState({\n          dataLoading: dataLoading\n        });\n      };\n\n      setLoading(true);\n      callbackPromise.then(function () {\n        setLoading(false);\n      }, function () {\n        setLoading(false);\n      });\n    }\n  };\n\n  TreeNode.prototype.onKeyDown = function onKeyDown(e) {\n    e.preventDefault();\n  };\n\n  TreeNode.prototype.renderRightAngle = function renderRightAngle() {\n    var prefix = this.getPrefix();\n    var _props = this.props,\n        showLine = _props.showLine,\n        pos = _props.pos;\n    return showLine && !isRoot(pos) ? _react2['default'].createElement('span', {\n      className: prefix + 'tree-right-angle'\n    }) : null;\n  };\n\n  TreeNode.prototype.renderSwitcher = function renderSwitcher() {\n    var _classNames;\n\n    var prefix = this.getPrefix();\n    var _props2 = this.props,\n        showLine = _props2.showLine,\n        disabled = _props2.disabled,\n        expanded = _props2.expanded;\n    var lineState = showLine ? 'line' : 'noline';\n    var wrapperProps = {\n      className: (0, _classnames2['default'])((_classNames = {}, _defineProperty(_classNames, prefix + 'tree-switcher', true), _defineProperty(_classNames, prefix + 'tree-switcher-' + lineState, true), _defineProperty(_classNames, prefix + 'tree-switcher-' + lineState + '-close', !showLine && !expanded), _defineProperty(_classNames, 'disabled', disabled), _classNames)),\n      onClick: disabled ? null : this.onExpand,\n      key: 'switcher'\n    };\n    var iconProps = {\n      className: prefix + 'tree-switcher-icon',\n      type: showLine ? expanded ? 'minus' : 'add' : 'arrow-down'\n    };\n    return _react2['default'].createElement('span', wrapperProps, this.renderRightAngle(), _react2['default'].createElement(_nextIcon2['default'], iconProps));\n  };\n\n  TreeNode.prototype.renderNoopSwitcher = function renderNoopSwitcher() {\n    var _classNames2;\n\n    var prefix = this.getPrefix();\n    var _props3 = this.props,\n        showLine = _props3.showLine,\n        pos = _props3.pos;\n    var lineState = showLine ? 'line' : 'noline';\n    var switcherCls = (0, _classnames2['default'])((_classNames2 = {}, _defineProperty(_classNames2, prefix + 'tree-switcher', true), _defineProperty(_classNames2, prefix + 'tree-switcher-noop-' + lineState, true), _defineProperty(_classNames2, prefix + 'tree-switcher-noop-line-noroot', showLine && !isRoot(pos)), _classNames2));\n    return _react2['default'].createElement('span', {\n      className: switcherCls,\n      key: 'noopSwitcher'\n    }, this.renderRightAngle());\n  };\n\n  TreeNode.prototype.renderCheckbox = function renderCheckbox() {\n    var _props4 = this.props,\n        checked = _props4.checked,\n        halfChecked = _props4.halfChecked,\n        disabled = _props4.disabled,\n        disableCheckbox = _props4.disableCheckbox;\n    return _react2['default'].createElement(_nextCheckbox2['default'], {\n      key: 'checkbox',\n      checked: checked,\n      indeterminate: halfChecked,\n      disabled: disableCheckbox || disabled,\n      onChange: this.onCheck\n    });\n  };\n\n  TreeNode.prototype.renderSelectHandle = function renderSelectHandle() {\n    var _classNames3,\n        _classNames4,\n        _this3 = this;\n\n    var prefix = this.getPrefix();\n    var _props5 = this.props,\n        expanded = _props5.expanded,\n        loadData = _props5.loadData,\n        showIcon = _props5.showIcon,\n        editable = _props5.editable,\n        disabled = _props5.disabled,\n        selected = _props5.selected,\n        draggable = _props5.draggable,\n        selectable = _props5.selectable,\n        onRightClick = _props5.onRightClick,\n        onMouseEnter = _props5.onMouseEnter,\n        onMouseLeave = _props5.onMouseLeave;\n    var _state = this.state,\n        dataLoading = _state.dataLoading,\n        editMode = _state.editMode,\n        title = _state.title;\n    var expandedState = expanded ? 'open' : 'close';\n    var iconEleCls = (0, _classnames2['default'])((_classNames3 = {}, _defineProperty(_classNames3, prefix + 'tree-icon', true), _defineProperty(_classNames3, prefix + 'tree-icon-loading', dataLoading), _defineProperty(_classNames3, prefix + 'tree-icon-' + expandedState, true), _classNames3));\n    var domProps = {};\n    var inputProps = {};\n    domProps.className = (0, _classnames2['default'])((_classNames4 = {}, _defineProperty(_classNames4, prefix + 'tree-node-handle', true), _defineProperty(_classNames4, prefix + 'tree-node-handle-selected', !disabled && selected), _defineProperty(_classNames4, prefix + 'tree-node-handle-disabled', disabled), _classNames4));\n    inputProps.className = prefix + 'tree-node-input';\n\n    if (!disabled) {\n      if (editable) {\n        domProps.onDoubleClick = function (e) {\n          e.preventDefault();\n\n          _this3.setState({\n            title: e.currentTarget.textContent,\n            editMode: true\n          });\n        };\n      }\n\n      if (selectable) {\n        domProps.onClick = function (e) {\n          e.preventDefault();\n\n          _this3.onSelect();\n        };\n      }\n\n      if (onRightClick) {\n        domProps.onContextMenu = this.onContextMenu;\n      }\n\n      if (onMouseEnter) {\n        domProps.onMouseEnter = this.onMouseEnter;\n      }\n\n      if (onMouseLeave) {\n        domProps.onMouseLeave = this.onMouseLeave;\n      }\n\n      if (draggable) {\n        if (ieOrEdge) {\n          domProps.href = '#';\n        }\n\n        domProps.draggable = true;\n        domProps['aria-grabbed'] = true;\n        domProps.onDragStart = this.onDragStart;\n        domProps.onDragEnd = this.onDragEnd;\n      }\n\n      inputProps.defaultValue = title;\n\n      inputProps.onBlur = function (e) {\n        _this3.setState({\n          editMode: false,\n          title: e.currentTarget.value || title\n        });\n\n        _this3.onEditFinish({\n          key: _this3.props.eventKey,\n          title: e.currentTarget.value || title,\n          label: e.currentTarget.value || title\n        });\n      };\n    }\n\n    var icon = showIcon || loadData && dataLoading ? _react2['default'].createElement('span', {\n      className: iconEleCls\n    }) : null;\n    return editMode ? _react2['default'].createElement('input', _extends({\n      ref: 'selectInput',\n      key: 'selectInput'\n    }, inputProps)) : draggable ? _react2['default'].createElement('a', _extends({\n      ref: 'selectHandle',\n      key: 'selectHandle'\n    }, domProps, {\n      title: typeof title === 'string' ? title : ''\n    }), _react2['default'].createElement('span', {\n      className: prefix + 'tree-node-handle-inner'\n    }, icon, title)) : _react2['default'].createElement('a', _extends({\n      ref: 'selectHandle',\n      key: 'selectHandle'\n    }, domProps, {\n      title: typeof title === 'string' ? title : ''\n    }), icon, title);\n  };\n\n  TreeNode.prototype.isTreeNode = function isTreeNode(child) {\n    return child && typeof child.type === 'function' && !!child.type.isTreeNode;\n  };\n\n  TreeNode.prototype.renderChildren = function renderChildren() {\n    var _this4 = this;\n\n    var prefix = this.getPrefix();\n    var _props6 = this.props,\n        expanded = _props6.expanded,\n        children = _props6.children,\n        showLine = _props6.showLine,\n        last = _props6.last,\n        root = _props6.root,\n        pos = _props6.pos;\n    var animation = this.props.root.props.animation;\n    this.renderFirst = 1;\n    var newChildren = children;\n    var allTreeNode = void 0;\n\n    if (Array.isArray(children)) {\n      allTreeNode = children.every(function (item) {\n        return _this4.isTreeNode(item);\n      });\n    }\n\n    if (!children || this.isTreeNode(children) || allTreeNode) {\n      var _classNames5;\n\n      var cls = (0, _classnames2['default'])((_classNames5 = {}, _defineProperty(_classNames5, prefix + 'tree-child-tree', true), _defineProperty(_classNames5, prefix + 'tree-line', showLine && !last), _defineProperty(_classNames5, 'temp-hide', animation && this.expandedChanged && expanded), _classNames5));\n      newChildren = expanded && children ? _react2['default'].createElement('ul', {\n        className: cls\n      }, _react.Children.map(children, function (item, index) {\n        return root.renderTreeNode(item, index, pos);\n      }, root)) : null;\n\n      if (animation) {\n        var animationHooks = {\n          enter: function enter(node, done) {\n            _nextDom.classList.addClass(node, 'out-screen');\n\n            _nextDom.classList.removeClass(node, 'temp-hide');\n\n            var height = node.offsetHeight + 'px';\n\n            _nextDom.classList.addClass(node, 'child-tree-enter');\n\n            _nextDom.classList.removeClass(node, 'out-screen');\n\n            setTimeout(function () {\n              _nextDom.classList.addClass(node, 'child-tree-enter-active');\n\n              _nextDom.style.set(node, 'height', height);\n            }, 10);\n            var called = false; // eslint-disable-next-line\n\n            var timer = void 0;\n\n            var onExpandInDownTransitionEnd = function onExpandInDownTransitionEnd(e) {\n              if (e.target === node) {\n                if (timer) {\n                  clearTimeout(timer);\n                }\n\n                if (called) {\n                  return;\n                }\n\n                called = true;\n                ['child-tree-enter', 'child-tree-enter-active', 'child-tree-leave', 'child-tree-leave-active'].forEach(function (className) {\n                  _nextDom.classList.removeClass(node, className);\n                });\n\n                _nextDom.style.set(node, 'height', null);\n\n                _nextDom.events.off(node, _nextUtil.support.transition.end, onExpandInDownTransitionEnd);\n\n                done();\n              }\n            };\n\n            _nextDom.events.on(node, _nextUtil.support.transition.end, onExpandInDownTransitionEnd);\n\n            timer = setTimeout(onExpandInDownTransitionEnd.bind(null, {\n              target: node\n            }), 260);\n          },\n          leave: function leave(node, done) {\n            var height = node.offsetHeight + 'px';\n\n            _nextDom.style.set(node, 'height', height);\n\n            _nextDom.classList.addClass(node, 'child-tree-leave');\n\n            setTimeout(function () {\n              _nextDom.classList.addClass(node, 'child-tree-leave-active');\n\n              _nextDom.style.set(node, 'height', 0);\n            }, 10);\n            var called = false; // eslint-disable-next-line\n\n            var timer = void 0;\n\n            var onExpandOutUpTransitionEnd = function onExpandOutUpTransitionEnd(e) {\n              if (e.target === node) {\n                if (timer) {\n                  clearTimeout(timer);\n                }\n\n                if (called) {\n                  return;\n                }\n\n                called = true;\n                ['child-tree-enter', 'child-tree-enter-active', 'child-tree-leave', 'child-tree-leave-active'].forEach(function (className) {\n                  _nextDom.classList.removeClass(node, className);\n                });\n\n                _nextDom.style.set(node, 'height', null);\n\n                _nextDom.events.off(node, _nextUtil.support.transition.end, onExpandOutUpTransitionEnd);\n\n                done();\n              }\n            };\n\n            _nextDom.events.on(node, _nextUtil.support.transition.end, onExpandOutUpTransitionEnd);\n\n            timer = setTimeout(onExpandOutUpTransitionEnd.bind(null, {\n              target: node\n            }), 310);\n          }\n        };\n        newChildren = _react2['default'].createElement(_nextAnimate2['default'], {\n          useTransition: true,\n          animation: animationHooks,\n          animationAppear: false\n        }, newChildren);\n      }\n    }\n\n    return newChildren;\n  };\n\n  TreeNode.prototype.render = function render() {\n    var _classNames6;\n\n    var prefix = this.getPrefix();\n\n    var _props7 = this.props,\n        className = _props7.className,\n        loadData = _props7.loadData,\n        isLeaf = _props7.isLeaf,\n        title = _props7.title,\n        children = _props7.children,\n        disabled = _props7.disabled,\n        filterTreeNode = _props7.filterTreeNode,\n        dragOver = _props7.dragOver,\n        dragOverGapTop = _props7.dragOverGapTop,\n        dragOverGapBottom = _props7.dragOverGapBottom,\n        checkable = _props7.checkable,\n        root = _props7.root,\n        others = _objectWithoutProperties(_props7, ['className', 'loadData', 'isLeaf', 'title', 'children', 'disabled', 'filterTreeNode', 'dragOver', 'dragOverGapTop', 'dragOverGapBottom', 'checkable', 'root']);\n\n    var _root$props = root.props,\n        draggable = _root$props.draggable,\n        isLabelBlock = _root$props.isLabelBlock;\n    title && _nextUtil.log.deprecated('title', 'label', 'Tree.Node');\n    var canRenderSwitcher = children && _react.Children.count(children) || loadData && !isLeaf;\n    var newChildren = this.renderChildren();\n    var liProps = {};\n\n    if (draggable) {\n      liProps.onDragEnter = this.onDragEnter;\n      liProps.onDragOver = this.onDragOver;\n      liProps.onDragLeave = this.onDragLeave;\n      liProps.onDrop = this.onDrop;\n    }\n\n    var liCls = (0, _classnames2['default'])((_classNames6 = {}, _defineProperty(_classNames6, prefix + 'tree-node', true), _defineProperty(_classNames6, prefix + 'tree-node-disabled', disabled), _defineProperty(_classNames6, className, className), _defineProperty(_classNames6, 'drag-over', dragOver), _defineProperty(_classNames6, 'drag-over-gap-top', dragOverGapTop), _defineProperty(_classNames6, 'drag-over-gap-bottom', dragOverGapBottom), _defineProperty(_classNames6, 'filter-node', filterTreeNode(this)), _classNames6));\n    var topHalf = [canRenderSwitcher ? this.renderSwitcher() : this.renderNoopSwitcher(), checkable ? this.renderCheckbox() : null, this.renderSelectHandle()];\n\n    if (isLabelBlock || draggable) {\n      var _classNames7;\n\n      var _className = (0, _classnames2['default'])((_classNames7 = {}, _defineProperty(_classNames7, prefix + 'tree-node-top-half', isLabelBlock), _defineProperty(_classNames7, prefix + 'tree-node-draggable-inner', draggable), _classNames7));\n\n      topHalf = _react2['default'].createElement('div', {\n        className: _className\n      }, topHalf);\n    }\n\n    return _react2['default'].createElement('li', _extends({}, (0, _nextUtil.pickAttrs)(others), liProps, {\n      ref: 'li',\n      className: liCls\n    }), topHalf, newChildren);\n  };\n\n  return TreeNode;\n}(_react.Component), _class.isTreeNode = 1, _class.contextTypes = {\n  prefix: _propTypes2['default'].string\n}, _class.propTypes = {\n  /**\n   * 样式类名的品牌前缀\n   */\n  prefix: _propTypes2['default'].string,\n\n  /**\n   * 自定义类名\n   */\n  className: _propTypes2['default'].string,\n\n  /**\n   * 自定义内联样式\n   */\n  style: _propTypes2['default'].object,\n\n  /**\n   * 树节点\n   */\n  children: _propTypes2['default'].node,\n  // TODO: deprecated in 1.0 release\n  title: _propTypes2['default'].node,\n\n  /**\n   * 节点文本内容\n   */\n  label: _propTypes2['default'].node,\n\n  /**\n   * 单独设置是否支持选中，覆盖Tree的selectable\n   */\n  selectable: _propTypes2['default'].bool,\n\n  /**\n   * 单独设置是否支持编辑，覆盖Tree的editable\n   */\n  editable: _propTypes2['default'].bool,\n\n  /**\n   * 单独设置是否支持拖拽，覆盖Tree的draggable\n   */\n  draggable: _propTypes2['default'].bool,\n\n  /**\n   * 是否禁止节点响应\n   */\n  disabled: _propTypes2['default'].bool,\n\n  /**\n   * 是否禁止勾选节点复选框\n   */\n  disableCheckbox: _propTypes2['default'].bool,\n\n  /**\n   * 是否是叶子节点，设置loadData时生效\n   */\n  isLeaf: _propTypes2['default'].bool,\n  expanded: _propTypes2['default'].bool,\n  root: _propTypes2['default'].object\n}, _class.defaultProps = {\n  label: '---',\n  disabled: false,\n  disableCheckbox: false,\n  isLeaf: false\n}, _temp);\nTreeNode.displayName = 'TreeNode';\nexports['default'] = TreeNode;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}