{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _nextIcon = require('../../../next-icon/lib/index.js');\n\nvar _nextIcon2 = _interopRequireDefault(_nextIcon);\n\nvar _nextInput = require('../../../next-input/lib/index.js');\n\nvar _nextInput2 = _interopRequireDefault(_nextInput);\n\nvar _nextOverlay = require('../../../next-overlay/lib/index.js');\n\nvar _nextCalendar = require('../../../next-calendar/lib/index.js');\n\nvar _nextTimePicker = require('../../../next-time-picker/lib/index.js');\n\nvar _nextUtil = require('../../../next-util/lib/index.js');\n\nvar _nextMoment = require('../../../next-moment/lib/index.js');\n\nvar _nextMoment2 = _interopRequireDefault(_nextMoment);\n\nvar _nextLocaleProvider = require('../../../next-locale-provider/lib/index.js');\n\nvar _nextLocaleProvider2 = _interopRequireDefault(_nextLocaleProvider);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _quickTool = require('./quick-tool.js');\n\nvar _quickTool2 = _interopRequireDefault(_quickTool);\n\nvar _utils = require('./utils.js');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nfunction getValue(value, dateFormat, disabledDate) {\n  if (!value) {\n    return null;\n  }\n\n  return (0, _utils.toMoment)(value, dateFormat, disabledDate);\n}\n/** DatePicker */\n\n\nvar DatePicker = (_temp = _class = function (_Component) {\n  _inherits(DatePicker, _Component);\n\n  function DatePicker(props, context) {\n    _classCallCheck(this, DatePicker);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    _this.onValueChange = function (value) {\n      var handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'onChange';\n      var showTime = _this.props.showTime;\n      var valueParts = (0, _utils.parseDateParts)(value, _this.dateFormat, _this.timeFormat, _this.dateTimeFormat);\n      var formatString = showTime ? valueParts.dateTimeString : valueParts.dateString;\n\n      _this.props[handler](valueParts.dateValue, formatString);\n    };\n\n    _this.onSelectDate = function (_ref) {\n      var base = _ref.base,\n          value = _ref.value,\n          mode = _ref.mode,\n          from = _ref.from;\n      var newState = {\n        base: base,\n        mode: mode\n      };\n\n      if (value) {\n        switch (mode) {\n          case 'date':\n            {\n              var showTime = _this.props.showTime;\n              var defaultHour = 0;\n              var defaultMinute = 0;\n              var defaultSecond = 0;\n\n              if (showTime && showTime.defaultValue) {\n                var defaultTimeValue = (0, _utils.toMoment)(showTime.defaultValue, _this.timeFormat);\n\n                if (defaultTimeValue) {\n                  defaultHour = defaultTimeValue.hour();\n                  defaultMinute = defaultTimeValue.minute();\n                  defaultSecond = defaultTimeValue.second();\n                }\n              }\n\n              value = value.hour(defaultHour).minute(defaultMinute).second(defaultSecond);\n              newState.mode = from === 'select-time' ? 'date' : 'month';\n\n              if (!('value' in _this.props)) {\n                newState.value = value;\n              }\n\n              if (!from && !_this.props.showTime) {\n                _this.onOpenChange(false);\n              }\n\n              break;\n            }\n\n          case 'year':\n            {\n              newState.base = value;\n              break;\n            }\n\n          case 'month':\n            {\n              newState.base = value;\n              break;\n            }\n\n          default:\n        }\n      }\n\n      _this.setState(newState);\n\n      if (mode === 'date' && (!_this.state.value || value.valueOf() !== _this.state.value.valueOf())) {\n        _this.onValueChange(value, 'onChange');\n      }\n    };\n\n    _this.onSelectTime = function (value) {\n      if (!('value' in _this.props)) {\n        _this.setState({\n          value: value\n        });\n      }\n\n      if (value.valueOf() !== _this.state.value.valueOf()) {\n        _this.onValueChange(value, 'onChange');\n      }\n    };\n\n    _this.onOpenChange = function (open) {\n      if (!('open' in _this.props)) {\n        _this.setState({\n          open: open\n        });\n      }\n\n      _this.props.onOpenChange(open);\n    };\n\n    _this.onQuickChange = function (type) {\n      switch (type) {\n        case 'now':\n          {\n            var now = (0, _nextMoment2['default'])();\n\n            _this.setState({\n              base: now,\n              value: now,\n              mode: 'month'\n            });\n\n            _this.onValueChange(now);\n\n            _this.onOpenChange(false);\n\n            break;\n          }\n\n        case 'select-date':\n          _this.setState({\n            mode: 'month'\n          });\n\n          break;\n\n        case 'select-time':\n          _this.setState({\n            mode: 'date'\n          });\n\n          break;\n\n        case 'ok':\n          _this.onOpenChange(false);\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.clearValue = function (e) {\n      e.stopPropagation();\n\n      _this.setState({\n        base: (0, _nextMoment2['default'])(),\n        value: null\n      });\n\n      _this.onValueChange(null);\n    };\n\n    if (props.format) {\n      _nextUtil.log.deprecated('format', 'formater', 'DatePicker');\n    }\n\n    (0, _utils.mixin)(_this, (0, _utils.getFormat)(props.formater, props.format, props.showTime));\n    var normalizeValue = getValue(props.value || props.defaultValue, _this.dateTimeFormat, props.disabledDate);\n    _this.state = {\n      value: normalizeValue,\n      base: props.defaultBase || normalizeValue,\n      mode: 'month',\n      dateInputStr: '',\n      timeInputStr: '',\n      inputing: false,\n      inputingError: false,\n      open: props.open || props.defaultOpen\n    };\n    return _this;\n  }\n\n  DatePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps) {\n      var showTime = 'showTime' in nextProps ? nextProps.showTime : this.props.showTime;\n      (0, _utils.mixin)(this, (0, _utils.getFormat)(nextProps.formater, nextProps.format || this.props.format, showTime));\n      var normalizeValue = getValue(nextProps.value, this.dateTimeFormat, nextProps.disabledDate || this.props.disabledDate);\n      this.setState({\n        value: normalizeValue,\n        base: normalizeValue\n      });\n    }\n\n    if ('showTime' in nextProps) {\n      (0, _utils.mixin)(this, (0, _utils.getFormat)(nextProps.formater, nextProps.format || this.props.format, nextProps.showTime));\n    }\n\n    if ('open' in nextProps) {\n      this.setState({\n        open: nextProps.open\n      });\n    }\n  };\n\n  DatePicker.prototype.onInputChange = function onInputChange(stateName, inputString) {\n    if (!('value' in this.props)) {\n      var _setState;\n\n      this.setState((_setState = {}, _defineProperty(_setState, stateName, inputString), _defineProperty(_setState, 'inputing', stateName), _setState));\n    }\n  };\n\n  DatePicker.prototype.onInputBlur = function onInputBlur(stateName) {\n    var _this2 = this;\n\n    var inputString = this.state[stateName];\n\n    if (this.state.inputing && inputString) {\n      var _props = this.props,\n          showTime = _props.showTime,\n          disabledDate = _props.disabledDate;\n      var format = stateName === 'dateInputStr' ? this.dateFormat : this.timeFormat;\n\n      if (!(0, _utils.isFunction)(format)) {\n        var parsed = (0, _nextMoment2['default'])(inputString, format);\n\n        if (parsed.isValid() && !disabledDate((0, _utils.getCalendarDate)(parsed))) {\n          var _setState2;\n\n          var value = parsed;\n\n          if (stateName === 'timeInputStr') {\n            value = this.state.value.clone().hour(parsed.hour()).minute(parsed.minute()).second(parsed.second());\n          } else if (showTime && showTime.defaultValue) {\n            // set defaultValue of time\n            var defaultTimeValue = (0, _utils.toMoment)(showTime.defaultValue, this.timeFormat);\n            var defaultHour = defaultTimeValue.hour();\n            var defaultMinute = defaultTimeValue.minute();\n            var defaultSecond = defaultTimeValue.second();\n            value = value.hour(defaultHour).minute(defaultMinute).second(defaultSecond);\n          }\n\n          this.setState((_setState2 = {\n            value: value,\n            base: value\n          }, _defineProperty(_setState2, stateName, ''), _defineProperty(_setState2, 'inputing', false), _defineProperty(_setState2, 'inputingError', false), _setState2), function () {\n            _this2.onValueChange(_this2.state.value);\n          });\n        } else {\n          this.setState({\n            inputingError: stateName\n          });\n        }\n      }\n    }\n  };\n\n  DatePicker.prototype.render = function render() {\n    var _classNames, _classNames2, _classNames3, _classNames4;\n\n    var _props2 = this.props,\n        className = _props2.className,\n        size = _props2.size,\n        disabled = _props2.disabled,\n        locale = _props2.locale,\n        popupStyle = _props2.popupStyle,\n        popupAlign = _props2.popupAlign,\n        popupOffset = _props2.popupOffset,\n        hasClear = _props2.hasClear,\n        showTime = _props2.showTime,\n        readOnly = _props2.readOnly,\n        id = _props2.id,\n        style = _props2.style,\n        others = _objectWithoutProperties(_props2, ['className', 'size', 'disabled', 'locale', 'popupStyle', 'popupAlign', 'popupOffset', 'hasClear', 'showTime', 'readOnly', 'id', 'style']);\n\n    var state = this.state;\n    var prefix = this.context.prefix || this.props.prefix;\n    var quickModule = showTime ? ['now', 'select'] : ['now']; // 样式\n\n    var triggerCls = (0, _classnames2['default'])((_classNames = {}, _defineProperty(_classNames, prefix + 'date-picker', true), _defineProperty(_classNames, prefix + 'date-picker-' + size, size), _defineProperty(_classNames, prefix + 'date-picker-disabled', disabled), _defineProperty(_classNames, prefix + 'date-picker-show-time', showTime), _defineProperty(_classNames, className, className), _classNames));\n    var panelCls = (0, _classnames2['default'])((_classNames2 = {}, _defineProperty(_classNames2, prefix + 'date-picker-panel', true), _defineProperty(_classNames2, prefix + 'date-picker-panel-show-time', showTime), _classNames2));\n    var iconSize = {\n      large: 'medium',\n      medium: 'small',\n      small: 'xs'\n    }[size];\n    var dateInputCls = (0, _classnames2['default'])((_classNames3 = {}, _defineProperty(_classNames3, 'error', state.inputingError === 'dateInputStr'), _defineProperty(_classNames3, 'focus', state.mode !== 'date' && showTime), _classNames3));\n    var timeInputCls = (0, _classnames2['default'])((_classNames4 = {}, _defineProperty(_classNames4, 'error', state.inputingError === 'timeInputStr'), _defineProperty(_classNames4, 'focus', state.mode === 'date' && showTime), _classNames4)); // 判断时分秒\n\n    if (showTime && typeof this.timeFormat === 'string') {\n      if (this.timeFormat.indexOf('HH') < 0) {\n        others.showHour = false;\n      }\n\n      if (this.timeFormat.indexOf('mm') < 0) {\n        others.showMinute = false;\n      }\n\n      if (this.timeFormat.indexOf('ss') < 0) {\n        others.showSecond = false;\n      }\n    }\n\n    var valueParts = (0, _utils.parseDateParts)(state.value, this.dateFormat, this.timeFormat, this.dateTimeFormat);\n    var panelDateInputValue = state.inputing === 'dateInputStr' ? state.dateInputStr : state.value ? valueParts.dateString : '';\n    var panelTimeInputValue = state.inputing === 'timeInputStr' ? state.timeInputStr : state.value ? valueParts.timeString : ''; // 组件\n\n    var datePanel = _react2['default'].createElement('div', {\n      className: panelCls,\n      style: popupStyle\n    }, _react2['default'].createElement('div', {\n      className: prefix + 'date-picker-input'\n    }, _react2['default'].createElement(_nextInput2['default'], {\n      className: dateInputCls,\n      placeholder: (0, _utils.isFunction)(this.dateFormat) ? locale.selectDate : this.dateFormat,\n      disabled: disabled,\n      size: 'medium',\n      value: panelDateInputValue,\n      readOnly: readOnly,\n      onChange: this.onInputChange.bind(this, 'dateInputStr'),\n      onBlur: this.onInputBlur.bind(this, 'dateInputStr'),\n      onClick: this.onQuickChange.bind(this, 'select-date')\n    }), showTime ? _react2['default'].createElement(_nextInput2['default'], {\n      className: timeInputCls,\n      placeholder: (0, _utils.isFunction)(this.timeFormat) ? locale.selectTime : this.timeFormat,\n      disabled: disabled || !state.value,\n      size: 'medium',\n      value: panelTimeInputValue,\n      readOnly: readOnly,\n      onChange: this.onInputChange.bind(this, 'timeInputStr'),\n      onBlur: this.onInputBlur.bind(this, 'timeInputStr'),\n      onClick: !state.value ? null : this.onQuickChange.bind(this, 'select-time')\n    }) : null), state.mode === 'date' ? _react2['default'].createElement(_nextTimePicker.Panel, _extends({}, others, {\n      locale: locale,\n      value: state.value,\n      onChange: this.onSelectTime\n    })) : _react2['default'].createElement(_nextCalendar.DatePickerPanel, _extends({}, others, {\n      mode: state.mode,\n      locale: locale,\n      base: state.base,\n      value: state.value,\n      onChange: this.onSelectDate\n    })), _react2['default'].createElement(_quickTool2['default'], _extends({}, others, {\n      value: state.value,\n      mode: state.mode,\n      locale: locale,\n      module: quickModule,\n      onChange: this.onQuickChange.bind(this)\n    })));\n\n    var dateTrigger = _react2['default'].createElement('div', _extends({}, (0, _nextUtil.pickAttrs)(others), {\n      className: triggerCls,\n      style: style,\n      id: id\n    }), _react2['default'].createElement(_nextInput2['default'], {\n      placeholder: locale.datePlaceholder,\n      readOnly: readOnly,\n      disabled: disabled,\n      size: size,\n      value: showTime ? valueParts.dateTimeString : valueParts.dateString\n    }), state.value && !disabled && hasClear ? _react2['default'].createElement(_nextIcon2['default'], {\n      type: 'delete-filling',\n      size: iconSize,\n      title: locale.clear,\n      onClick: this.clearValue\n    }) : _react2['default'].createElement(_nextIcon2['default'], {\n      type: 'calendar',\n      size: iconSize\n    }));\n\n    return _react2['default'].createElement(_nextOverlay.Popup, _extends({}, others, {\n      autoFocus: false,\n      disabled: disabled,\n      visible: state.open,\n      trigger: dateTrigger,\n      triggerType: 'click',\n      align: popupAlign,\n      offset: popupOffset,\n      onVisibleChange: this.onOpenChange\n    }), datePanel);\n  };\n\n  return DatePicker;\n}(_react.Component), _class.propTypes = {\n  /**\n   * 品牌样式前缀\n   */\n  prefix: _propTypes2['default'].string,\n\n  /**\n   * 默认的基准日期\n   */\n  defaultBase: _propTypes2['default'].string,\n\n  /**\n   * 默认日期\n   */\n  defaultValue: _propTypes2['default'].any,\n\n  /**\n   * 日期值\n   */\n  value: _propTypes2['default'].any,\n\n  /**\n   * 日期禁用\n   * @param {Object} CalendarObject\n   * @return {Boolean} true 表示禁用，反之表示可用\n   */\n  disabledDate: _propTypes2['default'].func,\n\n  /**\n   * 时间发生改变时的回调函数\n   * @param {String} date       改变后的日期\n   * @param {String} formatDate 改变后的格式化日期\n   */\n  onChange: _propTypes2['default'].func,\n\n  /**\n   * 是否默认展开\n   */\n  defaultOpen: _propTypes2['default'].bool,\n\n  /**\n   * 是否展开\n   */\n  open: _propTypes2['default'].bool,\n\n  /**\n   * 当面板展开状态改变时的回调函数\n   * @param {Boolean} open 面板的展开状态\n   */\n  onOpenChange: _propTypes2['default'].func,\n\n  /**\n   * 输入框大小\n   */\n  size: _propTypes2['default'].oneOf(['small', 'medium', 'large']),\n\n  /**\n   * 语言\n   */\n  language: _propTypes2['default'].oneOf(['en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw']),\n\n  /**\n   * 国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)\n   */\n  locale: _propTypes2['default'].object,\n\n  /**\n   * 弹层面板样式\n   */\n  popupStyle: _propTypes2['default'].object,\n\n  /**\n   * 弹层对齐方式\n   */\n  popupAlign: _propTypes2['default'].string,\n\n  /**\n   * 弹层偏移\n   */\n  popupOffset: _propTypes2['default'].array,\n  format: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].func]),\n\n  /**\n   * 日期格式化\n   */\n  formater: _propTypes2['default'].array,\n\n  /**\n   * 是否禁用\n   */\n  disabled: _propTypes2['default'].bool,\n\n  /**\n   * 是否展示清空按钮\n   */\n  hasClear: _propTypes2['default'].bool,\n\n  /**\n   * 是否展示时间选择或传入 { defaultValue } 设置时间初值\n   */\n  showTime: _propTypes2['default'].oneOfType([_propTypes2['default'].bool, _propTypes2['default'].object]),\n\n  /**\n   * 输入框是否只读\n   */\n  readOnly: _propTypes2['default'].bool,\n\n  /**\n   * 自定义组件样式\n   */\n  className: _propTypes2['default'].string,\n  id: _propTypes2['default'].any,\n  style: _propTypes2['default'].object\n}, _class.defaultProps = {\n  prefix: 'next-',\n  size: 'medium',\n  popupAlign: 'tl tl',\n  popupOffset: [0, 0],\n  formater: ['YYYY-MM-DD', 'HH:mm:ss'],\n  disabledDate: function disabledDate() {\n    return false;\n  },\n  hasClear: true,\n  readOnly: false,\n  onChange: function onChange() {},\n  onOpenChange: function onOpenChange() {}\n}, _class.contextTypes = {\n  prefix: _propTypes2['default'].string\n}, _temp);\nDatePicker.displayName = 'DatePicker';\nexports['default'] = (0, _nextLocaleProvider2['default'])(DatePicker);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}