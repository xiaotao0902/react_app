{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = undefined;\n\nvar _navigation = require('./navigation.js');\n\nvar _navigation2 = _interopRequireDefault(_navigation);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar Tree = function (_Navigation) {\n  _inherits(Tree, _Navigation);\n\n  function Tree(props, context) {\n    _classCallCheck(this, Tree);\n\n    var _this = _possibleConstructorReturn(this, _Navigation.call(this, props, context));\n\n    _this.state.openedKeys = _this.props.openedKeys || [];\n    _this.state.openedKey = null;\n    _this.theSameLevelKeys = [];\n    return _this;\n  } // 由item子组件click触发select处理函数\n  // 分局子组件selected状态决定是否调用该处理函数\n\n\n  Tree.prototype.onItemSelect = function onItemSelect(itemid) {\n    if (itemid === this.state.itemid) {\n      return this;\n    }\n\n    _Navigation.prototype.onItemSelect.apply(this, arguments);\n\n    if (this.props.selectedStyle) {\n      this.setState({\n        selectedKey: itemid\n      });\n    }\n  };\n\n  Tree.prototype.componentWillMount = function componentWillMount() {\n    var branchLevel = this.context.branchLevel;\n    this.context.branchLevel = branchLevel + 1;\n    this.branchLevel = this.context.branchLevel;\n  };\n\n  Tree.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var state = {};\n\n    _Navigation.prototype.componentWillReceiveProps.call(this, nextProps);\n\n    if (nextProps.openedKeys) {\n      state.openedKeys = nextProps.openedKeys;\n    }\n\n    this.setState(state);\n  }; // 折叠处理函数\n  // 仅限Tree组件事件\n\n\n  Tree.prototype.onItemFold = function onItemFold(itemid) {\n    var argv = [].slice.call(arguments);\n    var index = this.state.openedKeys.indexOf(itemid);\n\n    if (index > -1) {\n      this.state.openedKeys.splice(index, 1);\n    }\n\n    argv.splice(2, 0, this);\n    this.props.onFold.apply(this, argv);\n  }; // 展开处理函数\n  // 仅限Tree组件\n\n\n  Tree.prototype.onItemUnFold = function onItemUnFold(itemid) {\n    var argv = [].slice.call(arguments);\n    var hasThisKey = this.state.openedKeys.indexOf(itemid) > -1;\n\n    if (!hasThisKey) {\n      this.state.openedKeys.push(itemid);\n    }\n\n    argv.splice(2, 0, this);\n    this.props.onUnFold.apply(this, argv);\n  };\n  /**\n   * 克隆子组件属性值;根据状态设置新的属性值；一般用来处理selected、opened、focused属性\n   * 克隆子组件函数;过滤掉undefined，null情况\n   * @method cloneChildProperty\n   * @return {Object}\n   */\n\n\n  Tree.prototype.cloneChildProperty = function cloneChildProperty(child, key, _cloneChildProperty) {\n    var props = _Navigation.prototype.cloneChildProperty.call(this, child, key, _cloneChildProperty),\n        isMount = this.isMount,\n        context = this.context,\n        navigation = context.rootNavigation || this,\n        hasOpenedKey = context.openedKeys || this.props.openedKeys,\n        opened = void 0,\n        state = void 0;\n\n    state = navigation ? navigation.getRootState() : this.state;\n\n    if (this.theSameLevelKeys.indexOf(key) === -1) {\n      this.theSameLevelKeys.push(key);\n    }\n\n    if (!isMount) {\n      if (!hasOpenedKey) {\n        if (typeof child.props.opened === 'string') {\n          if (child.props.opened === 'true') {\n            state.openedKeys.push(key);\n            this.state.openedKey = key;\n          }\n        } else {\n          if (child.props.opened) {\n            state.openedKeys.push(key);\n            this.state.openedKey = key;\n          }\n        }\n      }\n    }\n\n    if (state.openedKeys.indexOf(key) > -1) {\n      opened = true;\n      this.state.openedKey = key;\n    } else {\n      opened = false;\n    }\n\n    props.opened = opened;\n    props.branchLevel = this.branchLevel;\n    return props;\n  };\n\n  return Tree;\n}(_navigation2['default']);\n\nexports['default'] = Tree;\nTree.defaultProps.type = 'tree';\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}