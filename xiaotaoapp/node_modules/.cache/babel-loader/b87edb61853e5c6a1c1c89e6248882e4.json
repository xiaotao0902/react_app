{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = undefined;\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _nextCheckbox = require('../../../next-checkbox/lib/index.js');\n\nvar _nextCheckbox2 = _interopRequireDefault(_nextCheckbox);\n\nvar _nextInput = require('../../../next-input/lib/index.js');\n\nvar _nextInput2 = _interopRequireDefault(_nextInput);\n\nvar _nextIcon = require('../../../next-icon/lib/index.js');\n\nvar _nextIcon2 = _interopRequireDefault(_nextIcon);\n\nvar _transferItem = require('./transfer-item.js');\n\nvar _transferItem2 = _interopRequireDefault(_transferItem);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar TransferPanel = (_temp = _class = function (_Component) {\n  _inherits(TransferPanel, _Component);\n\n  function TransferPanel(props, context) {\n    _classCallCheck(this, TransferPanel);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    _this.state = {\n      searchedValue: ''\n    };\n    _this.handleAllCheck = _this.handleAllCheck.bind(_this);\n    _this.getListContainerDOM = _this.getListContainerDOM.bind(_this);\n    _this.handleSearch = _this.handleSearch.bind(_this);\n    _this.firstRender = true;\n    return _this;\n  }\n\n  TransferPanel.prototype.componentDidMount = function componentDidMount() {\n    this.firstRender = false;\n  };\n\n  TransferPanel.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (prevProps.dataSource.length !== this.props.dataSource.length) {\n      if (this.listContainer.scrollTop > 0) {\n        this.listContainer.scrollTop = 0;\n      }\n    }\n  };\n\n  TransferPanel.prototype.getListContainerDOM = function getListContainerDOM(ref) {\n    this.listContainer = ref;\n  };\n\n  TransferPanel.prototype.isSearched = function isSearched(label, searchedValue) {\n    var labelString = '';\n\n    var loop = function loop(arg) {\n      if (_react2['default'].isValidElement(arg) && arg.props.children) {\n        _react2['default'].Children.forEach(arg.props.children, loop);\n      } else if (typeof arg === 'string') {\n        labelString += arg;\n      }\n    };\n\n    loop(label);\n\n    if (labelString.length >= searchedValue.length && labelString.indexOf(searchedValue) > -1) {\n      return true;\n    }\n\n    return false;\n  };\n\n  TransferPanel.prototype.handleAllCheck = function handleAllCheck(allChecked) {\n    var onChange = this.props.onChange;\n    var newValue = void 0;\n\n    if (allChecked) {\n      newValue = this.enabledDatasource.map(function (item) {\n        return item.value;\n      });\n    } else {\n      newValue = [];\n    }\n\n    onChange && onChange(newValue);\n  };\n\n  TransferPanel.prototype.handleCheck = function handleCheck(itemValue, checked) {\n    var _props = this.props,\n        value = _props.value,\n        onChange = _props.onChange;\n    var newValue = [].concat(_toConsumableArray(value));\n    var index = value.indexOf(itemValue);\n\n    if (checked && index === -1) {\n      newValue.push(itemValue);\n    } else if (!checked && index > -1) {\n      newValue.splice(index, 1);\n    }\n\n    onChange && onChange(newValue);\n  };\n\n  TransferPanel.prototype.handleSearch = function handleSearch(searchedValue) {\n    this.setState({\n      searchedValue: searchedValue\n    });\n  };\n\n  TransferPanel.prototype.renderHeader = function renderHeader() {\n    var _props2 = this.props,\n        prefix = _props2.prefix,\n        locale = _props2.locale,\n        title = _props2.title,\n        value = _props2.value,\n        dataSource = _props2.dataSource;\n    var checkedCount = value.length;\n    var totalCount = dataSource.length;\n    var totalEnabledCount = this.enabledDatasource.length;\n    var checked = checkedCount > 0 && checkedCount >= totalEnabledCount;\n    var indeterminate = checkedCount > 0 && checkedCount < totalEnabledCount;\n    var items = totalCount > 1 ? locale.items : locale.item;\n    var countLabel = checkedCount === 0 ? totalCount + ' ' + items : checkedCount + '/' + totalCount + ' ' + items;\n    return _react2['default'].createElement('div', {\n      className: prefix + 'transfer-panel-header'\n    }, _react2['default'].createElement(_nextCheckbox2['default'], {\n      checked: checked,\n      indeterminate: indeterminate,\n      onChange: this.handleAllCheck\n    }), _react2['default'].createElement('span', {\n      className: prefix + 'transfer-panel-count'\n    }, countLabel), title ? _react2['default'].createElement('span', {\n      className: prefix + 'transfer-panel-title'\n    }, title) : null);\n  };\n\n  TransferPanel.prototype.renderSearch = function renderSearch() {\n    var _props3 = this.props,\n        prefix = _props3.prefix,\n        searchPlaceholder = _props3.searchPlaceholder;\n    return _react2['default'].createElement('div', {\n      className: prefix + 'transfer-panel-search'\n    }, _react2['default'].createElement(_nextIcon2['default'], {\n      type: 'search',\n      size: 'xs'\n    }), _react2['default'].createElement(_nextInput2['default'], {\n      placeholder: searchPlaceholder,\n      onChange: this.handleSearch\n    }));\n  };\n\n  TransferPanel.prototype.renderList = function renderList(dataSource) {\n    var _this2 = this;\n\n    var _props4 = this.props,\n        prefix = _props4.prefix,\n        value = _props4.value,\n        listStyle = _props4.listStyle;\n    return _react2['default'].createElement('div', {\n      className: prefix + 'transfer-panel-list',\n      style: listStyle,\n      ref: this.getListContainerDOM\n    }, _react2['default'].createElement('ul', {\n      className: prefix + 'transfer-panel-list-content'\n    }, dataSource.map(function (item) {\n      return _react2['default'].createElement(_transferItem2['default'], {\n        key: item.value,\n        prefix: prefix,\n        value: value,\n        item: item,\n        onCheck: _this2.handleCheck.bind(_this2),\n        playTransition: !_this2.firstRender\n      });\n    })));\n  };\n\n  TransferPanel.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props5 = this.props,\n        prefix = _props5.prefix,\n        showSearch = _props5.showSearch;\n    var searchedValue = this.state.searchedValue;\n    var dataSource = this.props.dataSource;\n    this.enabledDatasource = dataSource.filter(function (item) {\n      return !item.disabled;\n    });\n\n    if (showSearch && searchedValue) {\n      dataSource = dataSource.filter(function (item) {\n        return _this3.isSearched(item.label, searchedValue);\n      });\n    }\n\n    return _react2['default'].createElement('div', {\n      className: prefix + 'transfer-panel'\n    }, this.renderHeader(), showSearch ? this.renderSearch() : null, this.renderList(dataSource));\n  };\n\n  return TransferPanel;\n}(_react.Component), _class.propTypes = {\n  prefix: _propTypes2['default'].string,\n  dataSource: _propTypes2['default'].array,\n  value: _propTypes2['default'].array,\n  onChange: _propTypes2['default'].func,\n  locale: _propTypes2['default'].object,\n  title: _propTypes2['default'].string,\n  showSearch: _propTypes2['default'].bool,\n  searchPlaceholder: _propTypes2['default'].string,\n  listStyle: _propTypes2['default'].object\n}, _temp);\nTransferPanel.displayName = 'TransferPanel';\nexports['default'] = TransferPanel;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}