{"ast":null,"code":"'use strict';\n\nvar PIXEL_PATTERN = /margin|padding|width|height|max|min|offset/;\n\nvar getComputedStyle = function getComputedStyle(node) {\n  return node.nodeType == 1 ? node.ownerDocument.defaultView.getComputedStyle(node, null) : {};\n},\n    removePixel = {\n  left: true,\n  top: true\n},\n    getStyleValue = function getStyleValue(node, type, value) {\n  type = type.toLowerCase();\n\n  if (value === 'auto') {\n    if (type === 'height') {\n      return node.offsetHeight;\n    }\n\n    if (type === 'width') {\n      return node.offsetWidth;\n    }\n  }\n\n  if (!(type in removePixel)) {\n    removePixel[type] = PIXEL_PATTERN.test(type);\n  }\n\n  return removePixel[type] ? parseFloat(value) || 0 : value;\n},\n    floatMap = {\n  cssFloat: 1,\n  styleFloat: 1,\n  float: 1\n};\n\nfunction camelize(name) {\n  return name.replace(/-(.)/g, function ($0, $1) {\n    return $1.toUpperCase();\n  });\n}\n\nfunction hyphenate(name) {\n  return name.replace(/[A-Z]/g, function ($1) {\n    return '-' + $1.toLowerCase();\n  });\n}\n\nfunction getStyle(node, name) {\n  var length = arguments.length,\n      style = getComputedStyle(node);\n  name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;\n  return length === 1 ? style : getStyleValue(node, name, style.getPropertyValue(hyphenate(name)) || node.style[camelize(name)]);\n}\n\nfunction setStyle(node, name, value) {\n  var length = arguments.length;\n  name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;\n\n  if (length === 3) {\n    if (typeof value === 'number' && PIXEL_PATTERN.test(name)) {\n      value = value + 'px';\n    }\n\n    return node.style[camelize(name)] = value; // IE8 support.\n  }\n\n  for (var x in name) {\n    setStyle(node, x, name[x]);\n  }\n\n  return getComputedStyle(node);\n}\n\nfunction getOuterWidth(el) {\n  if (el === document.body) {\n    return document.documentElement.clientWidth;\n  }\n\n  return el.offsetWidth;\n}\n\nfunction getOuterHeight(el) {\n  if (el === document.body) {\n    return window.innerHeight || document.documentElement.clientHeight;\n  }\n\n  return el.offsetHeight;\n}\n\nfunction getDocSize() {\n  var width = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth),\n      height = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n  return {\n    width: width,\n    height: height\n  };\n}\n\nfunction getClientSize() {\n  var width = document.documentElement.clientWidth,\n      height = window.innerHeight || document.documentElement.clientHeight;\n  return {\n    width: width,\n    height: height\n  };\n}\n\nfunction getScroll() {\n  return {\n    scrollLeft: Math.max(document.documentElement.scrollLeft, document.body.scrollLeft),\n    scrollTop: Math.max(document.documentElement.scrollTop, document.body.scrollTop)\n  };\n}\n\nfunction getOffset(node) {\n  var box = node.getBoundingClientRect(),\n      docElem = document.documentElement;\n  return {\n    left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || document.body.clientLeft || 0),\n    top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || document.body.clientTop || 0)\n  };\n}\n\nmodule.exports = {\n  set: setStyle,\n  get: getStyle,\n  getOuterWidth: getOuterWidth,\n  getOuterHeight: getOuterHeight,\n  getDocSize: getDocSize,\n  getClientSize: getClientSize,\n  getScroll: getScroll,\n  getOffset: getOffset\n};","map":null,"metadata":{},"sourceType":"script"}